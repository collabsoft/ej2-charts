/*!
*  filename: ej2-charts.umd.js
*  version : 1.0.19
*  Copyright Syncfusion Inc. 2001 - 2017. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("@syncfusion/ej2-base"), require("@syncfusion/ej2-data"), require("@syncfusion/ej2-popups"));
	else if(typeof define === 'function' && define.amd)
		define(["@syncfusion/ej2-base", "@syncfusion/ej2-data", "@syncfusion/ej2-popups"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("@syncfusion/ej2-base"), require("@syncfusion/ej2-data"), require("@syncfusion/ej2-popups")) : factory(root["@syncfusion/ej2-base"], root["@syncfusion/ej2-data"], root["@syncfusion/ej2-popups"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_16__, __WEBPACK_EXTERNAL_MODULE_54__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(46), __webpack_require__(57)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, index_1, index_2, index_3) {
	    "use strict";
	    function __export(m) {
	        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	    }
	    Object.defineProperty(exports, "__esModule", { value: true });
	    __export(index_1);
	    __export(index_2);
	    __export(index_3);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(6), __webpack_require__(9), __webpack_require__(19), __webpack_require__(20), __webpack_require__(21), __webpack_require__(7), __webpack_require__(22), __webpack_require__(23), __webpack_require__(25), __webpack_require__(26), __webpack_require__(27), __webpack_require__(28), __webpack_require__(29), __webpack_require__(30), __webpack_require__(2), __webpack_require__(31), __webpack_require__(32), __webpack_require__(33), __webpack_require__(34), __webpack_require__(35), __webpack_require__(3), __webpack_require__(36), __webpack_require__(37), __webpack_require__(38), __webpack_require__(40), __webpack_require__(42), __webpack_require__(14), __webpack_require__(43), __webpack_require__(44), __webpack_require__(18)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, chart_1, axis_1, date_time_axis_1, category_axis_1, logarithmic_axis_1, base_1, line_series_1, column_series_1, area_series_1, bar_series_1, stacking_bar_series_1, stacking_column_series_1, step_line_series_1, step_area_series_1, stacking_area_series_1, scatter_series_1, range_column_series_1, bubble_series_1, spline_series_1, marker_1, helper_1, crosshair_1, tooltip_1, zooming_1, selection_1, data_label_1, chart_series_1, legend_1, annotation_1, chart_base_1) {
	    "use strict";
	    function __export(m) {
	        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	    }
	    Object.defineProperty(exports, "__esModule", { value: true });
	    __export(chart_1);
	    __export(axis_1);
	    __export(date_time_axis_1);
	    __export(category_axis_1);
	    __export(logarithmic_axis_1);
	    __export(base_1);
	    __export(line_series_1);
	    __export(column_series_1);
	    __export(area_series_1);
	    __export(bar_series_1);
	    __export(stacking_bar_series_1);
	    __export(stacking_column_series_1);
	    __export(step_line_series_1);
	    __export(step_area_series_1);
	    __export(stacking_area_series_1);
	    __export(scatter_series_1);
	    __export(range_column_series_1);
	    __export(bubble_series_1);
	    __export(spline_series_1);
	    __export(marker_1);
	    __export(helper_1);
	    __export(crosshair_1);
	    __export(tooltip_1);
	    __export(zooming_1);
	    __export(selection_1);
	    __export(data_label_1);
	    __export(chart_series_1);
	    __export(legend_1);
	    __export(annotation_1);
	    __export(chart_base_1);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, line_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var StackingAreaSeries = (function (_super) {
	        __extends(StackingAreaSeries, _super);
	        function StackingAreaSeries() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        StackingAreaSeries.prototype.render = function (series, xAxis, yAxis) {
	            var point1;
	            var point2;
	            var lineDirection = '';
	            var visiblePoints = series.points;
	            var pointsLength = visiblePoints.length;
	            var stackedvalue = series.stackedValues;
	            var origin = Math.max(series.yAxis.visibleRange.min, stackedvalue.startValues[0]);
	            var border = series.border;
	            var options;
	            var startPoint = 0;
	            point1 = helper_1.getPoint(visiblePoints[0].xValue, origin, xAxis, yAxis);
	            lineDirection = lineDirection.concat('M' + ' ' + (point1.x) + ' ' + (point1.y) + ' ');
	            for (var i = 0; i < pointsLength; i++) {
	                visiblePoints[i].symbolLocation = null;
	                if (visiblePoints[i].visible && helper_1.withInRange(visiblePoints[i - 1], visiblePoints[i], visiblePoints[i + 1], series)) {
	                    point1 = helper_1.getPoint(visiblePoints[i].xValue, stackedvalue.endValues[i], xAxis, yAxis);
	                    lineDirection = lineDirection.concat('L' + ' ' + (point1.x) + ' ' + (point1.y) + ' ');
	                    visiblePoints[i].symbolLocation = helper_1.getPoint(visiblePoints[i].xValue, stackedvalue.endValues[i], xAxis, yAxis);
	                    visiblePoints[i].region = new helper_1.Rect(visiblePoints[i].symbolLocation.x - series.marker.width, visiblePoints[i].symbolLocation.y - series.marker.height, 2 * series.marker.width, 2 * series.marker.height);
	                }
	                else {
	                    for (var j = i - 1; j >= startPoint; j--) {
	                        point2 = helper_1.getPoint(visiblePoints[j].xValue, stackedvalue.startValues[j], xAxis, yAxis);
	                        lineDirection = lineDirection.concat('L' + ' ' + (point2.x) + ' ' + (point2.y) + ' ');
	                    }
	                    if (visiblePoints[i + 1] && visiblePoints[i + 1].visible) {
	                        point1 = helper_1.getPoint(visiblePoints[i + 1].xValue, stackedvalue.startValues[i + 1], xAxis, yAxis);
	                        lineDirection = lineDirection.concat('M' + ' ' + (point1.x) + ' ' + (point1.y) + ' ');
	                    }
	                    startPoint = i + 1;
	                }
	            }
	            for (var j = pointsLength - 1; j >= startPoint; j--) {
	                point2 = helper_1.getPoint(visiblePoints[j].xValue, stackedvalue.startValues[j], xAxis, yAxis);
	                lineDirection = lineDirection.concat('L' + ' ' + (point2.x) + ' ' + (point2.y) + ' ');
	            }
	            options = new helper_1.PathOption(series.chart.element.id + '_Series_' + series.index, series.interior, series.border.width, series.border.color, series.opacity, series.dashArray, lineDirection);
	            this.appendLinePath(options, series);
	            this.renderMarker(series);
	        };
	        StackingAreaSeries.prototype.doAnimation = function (series) {
	            var option = series.animation;
	            this.doLinearAnimation(series, option);
	        };
	        StackingAreaSeries.prototype.destroy = function (chart) {
	        };
	        StackingAreaSeries.prototype.getModuleName = function () {
	            return 'StackingAreaSeries';
	        };
	        return StackingAreaSeries;
	    }(line_base_1.LineBase));
	    exports.StackingAreaSeries = StackingAreaSeries;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(4), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    function measureText(text, font) {
	        var htmlObject = document.getElementById('chartmeasuretext');
	        if (htmlObject === null) {
	            htmlObject = ej2_base_3.createElement('text', { id: 'chartmeasuretext' });
	            document.body.appendChild(htmlObject);
	        }
	        htmlObject.innerHTML = text;
	        htmlObject.style.position = 'absolute';
	        htmlObject.style.fontSize = font.size;
	        htmlObject.style.fontWeight = font.fontWeight;
	        htmlObject.style.fontStyle = font.fontStyle;
	        htmlObject.style.fontFamily = font.fontFamily;
	        htmlObject.style.visibility = 'hidden';
	        htmlObject.style.top = '-100';
	        htmlObject.style.left = '0';
	        htmlObject.style.whiteSpace = 'nowrap';
	        return new Size(htmlObject.clientWidth, htmlObject.clientHeight);
	    }
	    exports.measureText = measureText;
	    function rotateTextSize(font, text, angle, chart) {
	        var renderer = new ej2_base_1.SvgRenderer(chart.element.id);
	        var box;
	        var options;
	        var htmlObject;
	        options = {
	            'font-size': font.size,
	            'font-style': font.fontStyle,
	            'font-family': font.fontFamily,
	            'font-weight': font.fontWeight,
	            'transform': 'rotate(' + angle + ', 0, 0)',
	            'text-anchor': 'middle'
	        };
	        htmlObject = renderer.createText(options, text);
	        chart.element.appendChild(chart.svgObject);
	        chart.svgObject.appendChild(htmlObject);
	        box = htmlObject.getBoundingClientRect();
	        htmlObject.remove();
	        chart.svgObject.remove();
	        return new Size((box.right - box.left), (box.bottom - box.top));
	    }
	    exports.rotateTextSize = rotateTextSize;
	    function removeElement(id) {
	        var element = getElement(id);
	        if (element) {
	            ej2_base_3.remove(element);
	        }
	    }
	    exports.removeElement = removeElement;
	    function logBase(value, base) {
	        return Math.log(value) / Math.log(base);
	    }
	    exports.logBase = logBase;
	    function showTooltip(text, x, y, areaWidth, id, isTouch) {
	        var tooltip = document.getElementById(id);
	        var width = measureText(text, {
	            fontFamily: 'Segoe UI', size: '12px',
	            fontStyle: 'Normal', fontWeight: 'Regular'
	        }).width + 5;
	        x = (x + width > areaWidth) ? x - width : x;
	        if (!tooltip) {
	            tooltip = ej2_base_3.createElement('div', {
	                innerHTML: text,
	                id: id,
	                styles: 'top:' + (y + 10).toString() + 'px;left:' + (x + 10).toString() + 'px;background-color: rgb(255, 255, 255);' +
	                    'position:fixed;border:1px solid rgb(112, 112, 112); padding-left : 3px; padding-right : 2px;' +
	                    'padding-bottom : 2px; padding-top : 2px; font-size:12px; font-family: "Segoe UI"'
	            });
	            document.body.appendChild(tooltip);
	        }
	        if (isTouch) {
	            setTimeout(function () { removeElement(id); }, 1500);
	        }
	    }
	    exports.showTooltip = showTooltip;
	    function inside(value, range) {
	        return (value < range.max) && (value > range.min);
	    }
	    exports.inside = inside;
	    function withIn(value, range) {
	        return (value <= range.max) && (value >= range.min);
	    }
	    exports.withIn = withIn;
	    function withInRange(previousPoint, currentPoint, nextPoint, series) {
	        var mX2 = series.logWithIn(currentPoint.xValue, series.xAxis);
	        var mX1 = previousPoint ? series.logWithIn(previousPoint.xValue, series.xAxis) : mX2;
	        var mX3 = nextPoint ? series.logWithIn(nextPoint.xValue, series.xAxis) : mX2;
	        var xStart = Math.floor(series.xAxis.visibleRange.min);
	        var xEnd = Math.ceil(series.xAxis.visibleRange.max);
	        return ((mX1 >= xStart && mX1 <= xEnd) || (mX2 >= xStart && mX2 <= xEnd) ||
	            (mX3 >= xStart && mX3 <= xEnd) || (xStart >= mX1 && xStart <= mX3));
	    }
	    exports.withInRange = withInRange;
	    function sum(values) {
	        var sum = 0;
	        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
	            var value = values_1[_i];
	            sum += value;
	        }
	        return sum;
	    }
	    exports.sum = sum;
	    function subtractThickness(rect, thickness) {
	        rect.x += thickness.left;
	        rect.y += thickness.top;
	        rect.width -= thickness.left + thickness.right;
	        rect.height -= thickness.top + thickness.bottom;
	        return rect;
	    }
	    exports.subtractThickness = subtractThickness;
	    function subtractRect(rect, thickness) {
	        rect.x += thickness.x;
	        rect.y += thickness.y;
	        rect.width -= thickness.x + thickness.width;
	        rect.height -= thickness.y + thickness.height;
	        return rect;
	    }
	    exports.subtractRect = subtractRect;
	    function degreeToLocation(degree, radius, center) {
	        var radian = (degree * Math.PI) / 180;
	        return new ChartLocation(Math.cos(radian) * radius + center.x, Math.sin(radian) * radius + center.y);
	    }
	    exports.degreeToLocation = degreeToLocation;
	    function getAccumulationLegend(locX, locY, r, height, width, mode) {
	        var cartesianlarge = degreeToLocation(270, r, new ChartLocation(locX, locY));
	        var cartesiansmall = degreeToLocation(270, r, new ChartLocation(locX + (width / 10), locY));
	        return 'M' + ' ' + locX + ' ' + locY + ' ' + 'L' + ' ' + (locX + r) + ' ' + (locY) + ' ' + 'A' + ' ' + (r) + ' ' + (r) +
	            ' ' + 0 + ' ' + 1 + ' ' + 1 + ' ' + cartesianlarge.x + ' ' + cartesianlarge.y + ' ' + 'Z' + ' ' + 'M' + ' ' + (locX +
	            (width / 10)) + ' ' + (locY - (height / 10)) + ' ' + 'L' + (locX + (r)) + ' ' + (locY - height / 10) + ' ' + 'A' + ' '
	            + (r) + ' ' + (r) + ' ' + 0 + ' ' + 0 + ' ' + 0 + ' ' + cartesiansmall.x + ' ' + cartesiansmall.y + ' ' + 'Z';
	    }
	    function getAngle(center, point) {
	        var angle = Math.atan2((point.y - center.y), (point.x - center.x));
	        angle = angle < 0 ? (6.283 + angle) : angle;
	        return angle * (180 / Math.PI);
	    }
	    exports.getAngle = getAngle;
	    function subArray(values, index) {
	        var subArray = [];
	        for (var i = 0; i <= index - 1; i++) {
	            subArray.push(values[i]);
	        }
	        return subArray;
	    }
	    exports.subArray = subArray;
	    function valueToCoefficient(value, axis) {
	        var range = axis.visibleRange;
	        var result = (value - range.min) / (range.delta);
	        return axis.isInversed ? (1 - result) : result;
	    }
	    exports.valueToCoefficient = valueToCoefficient;
	    function createTooltip(id, text, top, left, fontSize) {
	        var tooltip = this.getElement(id);
	        var style = 'top:' + top.toString() + 'px;' +
	            'left:' + left.toString() + 'px;' +
	            'background:' + '#FFFFFF' + ';' +
	            'position:absolute;border:1px solid #707070;font-size:' + fontSize + ';border-radius:2px;';
	        if (!tooltip) {
	            tooltip = ej2_base_3.createElement('div', {
	                id: id, innerHTML: '&nbsp;' + text + '&nbsp;', styles: style
	            });
	            document.body.appendChild(tooltip);
	        }
	        else {
	            tooltip.setAttribute('innerHTML', '&nbsp;' + text + '&nbsp;');
	            tooltip.setAttribute('styles', style);
	        }
	    }
	    exports.createTooltip = createTooltip;
	    function createZoomingLabels(chart, axis, parent, index, isVertical) {
	        var margin = 5;
	        var opposedPosition = axis.opposedPosition;
	        var anchor = isVertical ? 'start' : 'auto';
	        var size;
	        var chartRect = chart.availableSize.width;
	        var x;
	        var y;
	        var rx = 3;
	        var arrowLocation;
	        var rect = axis.rect;
	        var direction;
	        for (var i = 0; i < 2; i++) {
	            size = this.measureText(i ? axis.endLabel : axis.startLabel, axis.labelStyle);
	            if (isVertical) {
	                arrowLocation = i ? new ChartLocation(rect.x, rect.y + rx) :
	                    new ChartLocation(axis.rect.x, (rect.y + rect.height - rx));
	                x = (rect.x + (opposedPosition ? (rect.width + margin) : -(size.width + margin + margin)));
	                y = (rect.y + (i ? 0 : rect.height - size.height - margin));
	                x += (x < 0 || ((chartRect) < (x + size.width + margin))) ? (opposedPosition ? -(size.width / 2) : size.width / 2) : 0;
	                direction = this.findDirection(rx, rx, new Rect(x, y, size.width + margin, size.height + margin), arrowLocation, margin, false, false, !opposedPosition, arrowLocation.x, arrowLocation.y + (i ? -rx : rx));
	            }
	            else {
	                arrowLocation = i ? new ChartLocation((rect.x + rect.width - rx), (rect.y + rect.height)) :
	                    new ChartLocation(rect.x + rx, (rect.y + rect.height));
	                x = (rect.x + (i ? (rect.width - size.width - margin) : 0));
	                y = (opposedPosition ? (rect.y - size.height - 10) : (rect.y + rect.height + margin));
	                direction = this.findDirection(rx, rx, new Rect(x, y, size.width + margin, size.height + margin), arrowLocation, margin, opposedPosition, !opposedPosition, false, arrowLocation.x + (i ? rx : -rx), arrowLocation.y);
	            }
	            x = x + (margin / 2);
	            y = y + (3 * (size.height / 4)) + (margin / 2);
	            parent.appendChild(chart.renderer.drawPath(new PathOption(chart.element.id + '_Zoom_' + index + '_AxisLabel_Shape_' + i, '#414141', 2, '#414141', 1, null, direction)));
	            this.textElement(new TextOption(chart.element.id + '_Zoom_' + index + '_AxisLabel_' + i, x, y, anchor, i ? axis.endLabel : axis.startLabel), { color: 'white', fontFamily: 'Segoe UI', fontWeight: 'Regular', size: '11px' }, 'white', parent);
	        }
	        return parent;
	    }
	    exports.createZoomingLabels = createZoomingLabels;
	    function getPoint(xValue, yValue, xAxis, yAxis) {
	        var xLength = xAxis.rect.width;
	        var yLength = yAxis.rect.height;
	        xValue = (xAxis.valueType === 'Logarithmic' ? logBase(xValue, xAxis.logBase) : xValue);
	        yValue = (yAxis.valueType === 'Logarithmic' ?
	            logBase(yValue === 0 ? 1 : yValue, yAxis.logBase) : yValue);
	        xValue = this.valueToCoefficient(xValue, xAxis);
	        yValue = this.valueToCoefficient(yValue, yAxis);
	        xValue = xValue * xLength;
	        yValue = (1 - yValue) * yLength;
	        return new ChartLocation(xValue, yValue);
	    }
	    exports.getPoint = getPoint;
	    function withInBounds(x, y, bounds, width, height) {
	        if (width === void 0) { width = 0; }
	        if (height === void 0) { height = 0; }
	        return (x >= bounds.x - width && x <= bounds.x + bounds.width + width && y >= bounds.y - height
	            && y <= bounds.y + bounds.height + height);
	    }
	    exports.withInBounds = withInBounds;
	    function getValueXByPoint(value, size, axis) {
	        return (value / size) * (axis.visibleRange.delta) + axis.visibleRange.min;
	    }
	    exports.getValueXByPoint = getValueXByPoint;
	    function getValueYByPoint(value, size, axis) {
	        return Math.abs(1 - (value / size)) * (axis.visibleRange.delta) + axis.visibleRange.min;
	    }
	    exports.getValueYByPoint = getValueYByPoint;
	    function findClipRect(series) {
	        var rect = series.clipRect;
	        if (series.chart.requireInvertedAxis) {
	            rect.x = series.yAxis.rect.x;
	            rect.y = series.xAxis.rect.y;
	            rect.width = series.yAxis.rect.width;
	            rect.height = series.xAxis.rect.height;
	        }
	        else {
	            rect.x = series.xAxis.rect.x;
	            rect.y = series.yAxis.rect.y;
	            rect.width = series.xAxis.rect.width;
	            rect.height = series.yAxis.rect.height;
	        }
	    }
	    exports.findClipRect = findClipRect;
	    function firstToLowerCase(str) {
	        return str.substr(0, 1).toLowerCase() + str.substr(1);
	    }
	    exports.firstToLowerCase = firstToLowerCase;
	    function getMinPointsDelta(axis, seriesCollection) {
	        var minDelta = Number.MAX_VALUE;
	        var xValues;
	        var minVal;
	        seriesCollection.forEach(function (series, index) {
	            xValues = [];
	            if (series.visible &&
	                (axis.name === series.xAxisName || (axis.name === 'primaryXAxis' && series.xAxisName === null)
	                    || (axis.name === series.chart.primaryXAxis.name && !series.xAxisName))) {
	                xValues = series.points.map(function (point, index) {
	                    return point.xValue;
	                });
	                xValues.sort(function (first, second) { return first - second; });
	                if (xValues.length === 1) {
	                    minVal = xValues[0] - ((series.xMin && series.xAxis.valueType !== 'DateTime') ?
	                        series.xMin : axis.visibleRange.min);
	                    if (minVal !== 0) {
	                        minDelta = Math.min(minDelta, minVal);
	                    }
	                }
	                else {
	                    xValues.forEach(function (value, index, xValues) {
	                        if (index > 0 && value) {
	                            minVal = value - xValues[index - 1];
	                            if (minVal !== 0) {
	                                minDelta = Math.min(minDelta, minVal);
	                            }
	                        }
	                    });
	                }
	            }
	        });
	        if (minDelta === Number.MAX_VALUE) {
	            minDelta = 1;
	        }
	        return minDelta;
	    }
	    exports.getMinPointsDelta = getMinPointsDelta;
	    function getAnimationFunction(effect) {
	        var functionName;
	        switch (effect) {
	            case 'Linear':
	                functionName = linear;
	                break;
	        }
	        return functionName;
	    }
	    exports.getAnimationFunction = getAnimationFunction;
	    function linear(currentTime, startValue, endValue, duration) {
	        return -endValue * Math.cos(currentTime / duration * (Math.PI / 2)) + endValue + startValue;
	    }
	    exports.linear = linear;
	    function markerAnimate(element, delay, duration, series, pointIndex, point, isLabel) {
	        var centerX = point.x;
	        var centerY = point.y;
	        var height = 0;
	        element.style.visibility = 'hidden';
	        new ej2_base_1.Animation({}).animate(element, {
	            duration: duration,
	            delay: delay,
	            progress: function (args) {
	                if (args.timeStamp > args.delay) {
	                    args.element.style.visibility = 'visible';
	                    height = ((args.timeStamp - args.delay) / args.duration);
	                    element.setAttribute('transform', 'translate(' + centerX
	                        + ' ' + centerY + ') scale(' + height + ') translate(' + (-centerX) + ' ' + (-centerY) + ')');
	                }
	            },
	            end: function (model) {
	                element.style.visibility = 'visible';
	                element.removeAttribute('transform');
	                if ((series.type === 'Scatter' || series.type === 'Bubble') && !isLabel && (pointIndex === series.points.length - 1)) {
	                    series.chart.trigger('animationComplete', { series: series });
	                }
	            }
	        });
	    }
	    exports.markerAnimate = markerAnimate;
	    function templateAnimate(element, delay, duration) {
	        element.style.visibility = 'hidden';
	        new ej2_base_1.Animation({}).animate(element, {
	            duration: duration,
	            delay: delay,
	            name: 'ZoomIn',
	            progress: function (args) {
	                args.element.style.visibility = 'visible';
	            }
	        });
	    }
	    exports.templateAnimate = templateAnimate;
	    function getTemplateFunction(template) {
	        var templateFn = null;
	        var e;
	        try {
	            if (document.querySelectorAll(template).length) {
	                templateFn = ej2_base_1.compile(document.querySelector(template).innerHTML.trim());
	            }
	        }
	        catch (e) {
	            templateFn = ej2_base_1.compile(template);
	        }
	        return templateFn;
	    }
	    exports.getTemplateFunction = getTemplateFunction;
	    function createTemplate(childElement, pointIndex, content, chart, point, series) {
	        var templateFn;
	        var templateElement;
	        templateFn = getTemplateFunction(content);
	        try {
	            if (templateFn && templateFn({ chart: chart, series: series, point: point }).length) {
	                templateElement = templateFn({ chart: chart, series: series, point: point });
	                while (templateElement.length > 0) {
	                    childElement.appendChild(templateElement[0]);
	                }
	            }
	        }
	        catch (e) {
	            return childElement;
	        }
	        return childElement;
	    }
	    exports.createTemplate = createTemplate;
	    function getFontStyle(font) {
	        var style = '';
	        style = 'font-size:' + font.size +
	            '; font-style:' + font.fontStyle + '; font-weight:' + font.fontWeight +
	            '; font-family:' + font.fontFamily + ';opacity:' + font.opacity +
	            '; color:' + font.color + ';';
	        return style;
	    }
	    exports.getFontStyle = getFontStyle;
	    function measureElementRect(element) {
	        var bounds;
	        document.body.appendChild(element);
	        bounds = element.getBoundingClientRect();
	        removeElement(element.id);
	        return bounds;
	    }
	    exports.measureElementRect = measureElementRect;
	    function appendElement(child, parent) {
	        if (child && child.hasChildNodes() && parent) {
	            parent.appendChild(child);
	        }
	        else {
	            return null;
	        }
	    }
	    exports.appendElement = appendElement;
	    function drawSymbol(location, shape, size, url, options, label) {
	        var functionName = 'Path';
	        var renderer = new ej2_base_1.SvgRenderer('');
	        var temp = this.calculateShapes(location, size, shape, options, url);
	        var htmlObject = renderer['draw' + temp.functionName](temp.renderOption);
	        htmlObject.setAttribute('aria-label', label);
	        return htmlObject;
	    }
	    exports.drawSymbol = drawSymbol;
	    function calculateShapes(location, size, shape, options, url) {
	        var path;
	        var functionName = 'Path';
	        var width = size.width;
	        var height = size.height;
	        var locX = location.x;
	        var locY = location.y;
	        var x = location.x + (-width / 2);
	        var y = location.y + (-height / 2);
	        switch (shape) {
	            case 'Circle':
	            case 'Bubble':
	                functionName = 'Ellipse';
	                ej2_base_2.merge(options, { 'rx': width / 2, 'ry': height / 2, 'cx': locX, 'cy': locY });
	                break;
	            case 'Cross':
	                path = 'M' + ' ' + x + ' ' + locY + ' ' + 'L' + ' ' + (locX + (width / 2)) + ' ' + locY + ' ' +
	                    'M' + ' ' + locX + ' ' + (locY + (height / 2)) + ' ' + 'L' + ' ' + locX + ' ' +
	                    (locY + (-height / 2));
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'HorizontalLine':
	                path = 'M' + ' ' + x + ' ' + locY + ' ' + 'L' + ' ' + (locX + (width / 2)) + ' ' + locY;
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'VerticalLine':
	                path = 'M' + ' ' + locX + ' ' + (locY + (height / 2)) + ' ' + 'L' + ' ' + locX + ' ' + (locY + (-height / 2));
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'Diamond':
	                path = 'M' + ' ' + x + ' ' + locY + ' ' +
	                    'L' + ' ' + locX + ' ' + (locY + (-height / 2)) + ' ' +
	                    'L' + ' ' + (locX + (width / 2)) + ' ' + locY + ' ' +
	                    'L' + ' ' + locX + ' ' + (locY + (height / 2)) + ' ' +
	                    'L' + ' ' + x + ' ' + locY + ' z';
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'Rectangle':
	            case 'StepArea':
	                path = 'M' + ' ' + x + ' ' + (locY + (-height / 2)) + ' ' +
	                    'L' + ' ' + (locX + (width / 2)) + ' ' + (locY + (-height / 2)) + ' ' +
	                    'L' + ' ' + (locX + (width / 2)) + ' ' + (locY + (height / 2)) + ' ' +
	                    'L' + ' ' + x + ' ' + (locY + (height / 2)) + ' ' +
	                    'L' + ' ' + x + ' ' + (locY + (-height / 2)) + ' z';
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'Triangle':
	                path = 'M' + ' ' + x + ' ' + (locY + (height / 2)) + ' ' +
	                    'L' + ' ' + locX + ' ' + (locY + (-height / 2)) + ' ' +
	                    'L' + ' ' + (locX + (width / 2)) + ' ' + (locY + (height / 2)) + ' ' +
	                    'L' + ' ' + x + ' ' + (locY + (height / 2)) + ' z';
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'InvertedTriangle':
	                path = 'M' + ' ' + (locX + (width / 2)) + ' ' + (locY - (height / 2)) + ' ' +
	                    'L' + ' ' + locX + ' ' + (locY + (height / 2)) + ' ' +
	                    'L' + ' ' + (locX - (width / 2)) + ' ' + (locY - (height / 2)) + ' ' +
	                    'L' + ' ' + (locX + (width / 2)) + ' ' + (locY - (height / 2)) + ' z';
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'Pentagon':
	                var eq = 72;
	                var xValue = void 0;
	                var yValue = void 0;
	                for (var i = 0; i <= 5; i++) {
	                    xValue = (width / 2) * Math.cos((Math.PI / 180) * (i * eq));
	                    yValue = (height / 2) * Math.sin((Math.PI / 180) * (i * eq));
	                    if (i === 0) {
	                        path = 'M' + ' ' + (locX + xValue) + ' ' + (locY + yValue) + ' ';
	                    }
	                    else {
	                        path = path.concat('L' + ' ' + (locX + xValue) + ' ' + (locY + yValue) + ' ');
	                    }
	                }
	                path = path.concat('Z');
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'Image':
	                functionName = 'Image';
	                ej2_base_2.merge(options, { 'href': url, 'height': height, 'width': width, x: x, y: y });
	                break;
	        }
	        options = this.calculateLegendShapes(location, new Size(width, height), shape, options).renderOption;
	        return { renderOption: options, functionName: functionName };
	    }
	    exports.calculateShapes = calculateShapes;
	    function getRectLocation(startLocation, endLocation, outerRect) {
	        var x;
	        var y;
	        x = (endLocation.x < outerRect.x) ? outerRect.x :
	            (endLocation.x > (outerRect.x + outerRect.width)) ? outerRect.x + outerRect.width : endLocation.x;
	        y = (endLocation.y < outerRect.y) ? outerRect.y :
	            (endLocation.y > (outerRect.y + outerRect.height)) ? outerRect.y + outerRect.height : endLocation.y;
	        return new Rect((x > startLocation.x ? startLocation.x : x), (y > startLocation.y ? startLocation.y : y), Math.abs(x - startLocation.x), Math.abs(y - startLocation.y));
	    }
	    exports.getRectLocation = getRectLocation;
	    function minMax(value, min, max) {
	        return value > max ? max : (value < min ? min : value);
	    }
	    exports.minMax = minMax;
	    function getElement(id) {
	        return document.getElementById(id);
	    }
	    exports.getElement = getElement;
	    function getDraggedRectLocation(x1, y1, x2, y2, outerRect) {
	        var width = Math.abs(x1 - x2);
	        var height = Math.abs(y1 - y2);
	        var x = Math.max(this.checkBounds(Math.min(x1, x2), width, outerRect.x, outerRect.width), outerRect.x);
	        var y = Math.max(this.checkBounds(Math.min(y1, y2), height, outerRect.y, outerRect.height), outerRect.y);
	        return new Rect(x, y, Math.min(width, outerRect.width), Math.min(height, outerRect.height));
	    }
	    exports.getDraggedRectLocation = getDraggedRectLocation;
	    function checkBounds(start, size, min, max) {
	        if (start < min) {
	            start = min;
	        }
	        else if ((start + size) > (max + min)) {
	            start = (max + min) - size;
	        }
	        return start;
	    }
	    exports.checkBounds = checkBounds;
	    function getLabelText(currentPoint, series, chart) {
	        var labelFormat = series.yAxis.labelFormat;
	        var text = [];
	        var customLabelFormat = labelFormat.match('{value}') !== null;
	        switch (series.seriesType) {
	            case 'XY':
	                text.push(currentPoint.text || currentPoint.yValue.toString());
	                break;
	            case 'HighLow':
	                text.push(currentPoint.text || Math.max(currentPoint.high, currentPoint.low).toString());
	                text.push(currentPoint.text || Math.min(currentPoint.high, currentPoint.low).toString());
	                break;
	        }
	        if (labelFormat && !currentPoint.text) {
	            for (var i = 0; i < text.length; i++) {
	                text[i] = customLabelFormat ? labelFormat.replace('{value}', series.yAxis.format(parseFloat(text[i]))) :
	                    series.yAxis.format(parseFloat(text[i]));
	            }
	        }
	        return text;
	    }
	    exports.getLabelText = getLabelText;
	    function stopTimer(timer) {
	        window.clearInterval(timer);
	    }
	    exports.stopTimer = stopTimer;
	    function isCollide(currentRect, collections) {
	        var isCollide;
	        isCollide = collections.some(function (rect) {
	            return (currentRect.x < rect.x + rect.width && currentRect.x + currentRect.width > rect.x &&
	                currentRect.y < rect.y + rect.height && currentRect.height + currentRect.y > rect.y);
	        });
	        return isCollide;
	    }
	    exports.isCollide = isCollide;
	    function isOverlap(currentRect, rect) {
	        return (currentRect.x < rect.x + rect.width && currentRect.x + currentRect.width > rect.x &&
	            currentRect.y < rect.y + rect.height && currentRect.height + currentRect.y > rect.y);
	    }
	    exports.isOverlap = isOverlap;
	    function calculateRect(location, textSize, margin) {
	        return new Rect((location.x - (textSize.width / 2) - margin.left), (location.y - (textSize.height / 2) - margin.top), textSize.width + margin.left + margin.right, textSize.height + margin.top + margin.bottom);
	    }
	    exports.calculateRect = calculateRect;
	    function convertToHexCode(value) {
	        return '#' + this.componentToHex(value.r) + this.componentToHex(value.g) + this.componentToHex(value.b);
	    }
	    exports.convertToHexCode = convertToHexCode;
	    function componentToHex(value) {
	        var hex = value.toString(16);
	        return hex.length === 1 ? '0' + hex : hex;
	    }
	    exports.componentToHex = componentToHex;
	    function convertHexToColor(hex) {
	        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	        return result ? new ColorValue(parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)) :
	            new ColorValue(255, 255, 255);
	    }
	    exports.convertHexToColor = convertHexToColor;
	    function colorNameToHex(color) {
	        var element;
	        color = color === 'transparent' ? 'white' : color;
	        element = document.getElementById('chartmeasuretext');
	        element.style.color = color;
	        color = window.getComputedStyle(element).color;
	        var exp = /^(rgb|hsl)(a?)[(]\s*([\d.]+\s*%?)\s*,\s*([\d.]+\s*%?)\s*,\s*([\d.]+\s*%?)\s*(?:,\s*([\d.]+)\s*)?[)]$/;
	        var isRGBValue = exp.exec(color);
	        return this.convertToHexCode(new ColorValue(parseInt(isRGBValue[3], 10), parseInt(isRGBValue[4], 10), parseInt(isRGBValue[5], 10)));
	    }
	    exports.colorNameToHex = colorNameToHex;
	    function calculateLegendShapes(location, size, shape, options) {
	        var padding = 10;
	        var path = '';
	        var height = size.height;
	        var width = size.width;
	        var locX = location.x;
	        var locY = location.y;
	        switch (shape) {
	            case 'Line':
	                path = 'M' + ' ' + (locX + (-width / 2)) + ' ' + (locY) + ' ' +
	                    'L' + ' ' + (locX + (width / 2)) + ' ' + (locY);
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'StepLine':
	                options.fill = 'transparent';
	                path = 'M' + ' ' + (locX + (-width / 2) - (padding / 4)) + ' ' + (locY + (height / 2)) + ' ' + 'L' + ' ' + (locX +
	                    (-width / 2) + (width / 10)) + ' ' + (locY + (height / 2)) + ' ' + 'L' + ' ' + (locX + (-width / 2) + (width / 10))
	                    + ' ' + (locY) + ' ' + 'L' + ' ' + (locX + (-width / 10)) + ' ' + (locY) + ' ' + 'L' + ' ' + (locX + (-width / 10))
	                    + ' ' + (locY + (height / 2)) + ' ' + 'L' + ' ' + (locX + (width / 5)) + ' ' + (locY + (height / 2)) + ' ' + 'L' +
	                    ' ' + (locX + (width / 5)) + ' ' + (locY + (-height / 2)) + ' ' + 'L' + ' ' + (locX + (width / 2)) + ' ' + (locY +
	                    (-height / 2)) + 'L' + ' ' + (locX + (width / 2)) + ' ' + (locY + (height / 2)) + ' ' + 'L' + '' + (locX + (width / 2)
	                    + (padding / 4)) + ' ' + (locY + (height / 2));
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'RightArrow':
	                path = 'M' + ' ' + (locX + (-width / 2)) + ' ' + (locY - (height / 2)) + ' ' +
	                    'L' + ' ' + (locX + (width / 2)) + ' ' + (locY) + ' ' + 'L' + ' ' +
	                    (locX + (-width / 2)) + ' ' + (locY + (height / 2));
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'LeftArrow':
	                path = 'M' + ' ' + (locX + (width / 2)) + ' ' + (locY - (height / 2)) + ' ' +
	                    'L' + ' ' + (locX + (-width / 2)) + ' ' + (locY) + ' ' + 'L' + ' ' +
	                    (locX + (width / 2)) + ' ' + (locY + (height / 2));
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'Column':
	            case 'StackingColumn':
	            case 'StackingColumn100':
	            case 'RangeColumn':
	                path = 'M' + ' ' + (locX - 3 * (width / 5)) + ' ' + (locY - (height / 5)) + ' ' + 'L' + ' ' +
	                    (locX + 3 * (-width / 10)) + ' ' + (locY - (height / 5)) + ' ' + 'L' + ' ' +
	                    (locX + 3 * (-width / 10)) + ' ' + (locY + (height / 2)) + ' ' + 'L' + ' ' + (locX - 3 *
	                    (width / 5)) + ' ' + (locY + (height / 2)) + ' ' + 'Z' + ' ' + 'M' + ' ' +
	                    (locX + (-width / 10) - (width / 20)) + ' ' + (locY - (height / 4) - (padding / 2))
	                    + ' ' + 'L' + ' ' + (locX + (width / 10) + (width / 20)) + ' ' + (locY - (height / 4) -
	                    (padding / 2)) + ' ' + 'L' + ' ' + (locX + (width / 10) + (width / 20)) + ' ' + (locY
	                    + (height / 2)) + ' ' + 'L' + ' ' + (locX + (-width / 10) - (width / 20)) + ' ' + (locY +
	                    (height / 2)) + ' ' + 'Z' + ' ' + 'M' + ' ' + (locX + 3 * (width / 10)) + ' ' + (locY) + ' ' +
	                    'L' + ' ' + (locX + 3 * (width / 5)) + ' ' + (locY) + ' ' + 'L' + ' '
	                    + (locX + 3 * (width / 5)) + ' ' + (locY + (height / 2)) + ' ' + 'L' + ' '
	                    + (locX + 3 * (width / 10)) + ' ' + (locY + (height / 2)) + ' ' + 'Z';
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'Bar':
	            case 'StackingBar':
	            case 'StackingBar100':
	                path = 'M' + ' ' + (locX + (-width / 2) + (-padding / 4)) + ' ' + (locY - 3 * (height / 5)) + ' '
	                    + 'L' + ' ' + (locX + 3 * (width / 10)) + ' ' + (locY - 3 * (height / 5)) + ' ' + 'L' + ' ' +
	                    (locX + 3 * (width / 10)) + ' ' + (locY - 3 * (height / 10)) + ' ' + 'L' + ' ' +
	                    (locX - (width / 2) + (-padding / 4)) + ' ' + (locY - 3 * (height / 10)) + ' ' + 'Z' + ' '
	                    + 'M' + ' ' + (locX + (-width / 2) + (-padding / 4)) + ' ' + (locY - (height / 5)
	                    + (padding / 20)) + ' ' + 'L' + ' ' + (locX + (width / 2) + (padding / 4)) + ' ' + (locY
	                    - (height / 5) + (padding / 20)) + ' ' + 'L' + ' ' + (locX + (width / 2) + (padding / 4))
	                    + ' ' + (locY + (height / 10) + (padding / 20)) + ' ' + 'L' + ' ' + (locX - (width / 2)
	                    + (-padding / 4)) + ' ' + (locY + (height / 10) + (padding / 20)) + ' ' + 'Z' + ' ' + 'M'
	                    + ' ' + (locX - (width / 2) + (-padding / 4)) + ' ' + (locY + (height / 5)
	                    + (padding / 10)) + ' ' + 'L' + ' ' + (locX + (-width / 4)) + ' ' + (locY + (height / 5)
	                    + (padding / 10)) + ' ' + 'L' + ' ' + (locX + (-width / 4)) + ' ' + (locY + (height / 2)
	                    + (padding / 10)) + ' ' + 'L' + ' ' + (locX - (width / 2) + (-padding / 4))
	                    + ' ' + (locY + (height / 2) + (padding / 10)) + ' ' + 'Z';
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'Spline':
	                options.fill = 'transparent';
	                path = 'M' + ' ' + (locX - (width / 2)) + ' ' + (locY + (height / 5)) + ' ' + 'Q' + ' '
	                    + locX + ' ' + (locY - height) + ' ' + locX + ' ' + (locY + (height / 5))
	                    + ' ' + 'M' + ' ' + locX + ' ' + (locY + (height / 5)) + ' ' + 'Q' + ' ' + (locX
	                    + (width / 2)) + ' ' + (locY + (height / 2)) + ' ' + (locX + (width / 2)) + ' '
	                    + (locY - (height / 2));
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'Area':
	            case 'StackingArea':
	            case 'StackingArea100':
	                path = 'M' + ' ' + (locX - (width / 2) - (padding / 4)) + ' ' + (locY + (height / 2))
	                    + ' ' + 'L' + ' ' + (locX + (-width / 4) + (-padding / 8)) + ' ' + (locY - (height / 2))
	                    + ' ' + 'L' + ' ' + (locX) + ' ' + (locY + (height / 4)) + ' ' + 'L' + ' ' + (locX
	                    + (width / 4) + (padding / 8)) + ' ' + (locY + (-height / 2) + (height / 4)) + ' '
	                    + 'L' + ' ' + (locX + (height / 2) + (padding / 4)) + ' ' + (locY + (height / 2)) + ' ' + 'Z';
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'SplineArea':
	                path = 'M' + ' ' + (locX - (width / 2)) + ' ' + (locY + (height / 5)) + ' ' + 'Q' + ' ' + locX
	                    + ' ' + (locY - height) + ' ' + locX + ' ' + (locY + (height / 5)) + ' ' + 'Z' + ' ' + 'M'
	                    + ' ' + locX + ' ' + (locY + (height / 5)) + ' ' + 'Q' + ' ' + (locX + (width / 2)) + ' '
	                    + (locY + (height / 2)) + ' ' + (locX + (width / 2)) + ' '
	                    + (locY - (height / 2)) + ' ' + ' Z';
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	            case 'Pie':
	            case 'Doughnut':
	                options.stroke = 'transparent';
	                var r = Math.min(height, width) / 2;
	                path = getAccumulationLegend(locX, locY, r, height, width, shape);
	                ej2_base_2.merge(options, { 'd': path });
	                break;
	        }
	        return { renderOption: options };
	    }
	    exports.calculateLegendShapes = calculateLegendShapes;
	    function textTrim(maxWidth, text, font) {
	        var label = text;
	        var size = this.measureText(text, font).width;
	        if (size > maxWidth) {
	            var textLength = text.length;
	            for (var i = textLength - 1; i >= 0; --i) {
	                label = text.substring(0, i) + '...';
	                size = this.measureText(label, font).width;
	                if (size <= maxWidth) {
	                    return label;
	                }
	            }
	        }
	        return label;
	    }
	    exports.textTrim = textTrim;
	    function stringToNumber(value, containerSize) {
	        if (value !== null && value !== undefined) {
	            return value.indexOf('%') !== -1 ? (containerSize / 100) * parseInt(value, 10) : parseInt(value, 10);
	        }
	        return null;
	    }
	    exports.stringToNumber = stringToNumber;
	    function findDirection(rX, rY, rect, arrowLocation, arrowPadding, top, bottom, left, tipX, tipY) {
	        var direction = '';
	        var startX = rect.x;
	        var startY = rect.y;
	        var width = rect.x + rect.width;
	        var height = rect.y + rect.height;
	        if (top) {
	            direction = direction.concat('M' + ' ' + (startX) + ' ' + (startY + rY) + ' Q ' + startX + ' '
	                + startY + ' ' + (startX + rX) + ' ' + startY + ' ' +
	                ' L' + ' ' + (width - rX) + ' ' + (startY) + ' Q ' + width + ' '
	                + startY + ' ' + (width) + ' ' + (startY + rY));
	            direction = direction.concat(' L' + ' ' + (width) + ' ' + (height - rY) + ' Q ' + width + ' '
	                + (height) + ' ' + (width - rX) + ' ' + (height));
	            if (arrowPadding !== 0) {
	                direction = direction.concat(' L' + ' ' + (arrowLocation.x + arrowPadding / 2) + ' ' + (height));
	                direction = direction.concat(' L' + ' ' + (tipX) + ' ' + (height + arrowPadding));
	            }
	            if ((arrowLocation.x - arrowPadding / 2) > startX) {
	                direction = direction.concat(' L' + ' ' + (arrowLocation.x - arrowPadding / 2) + ' ' + height +
	                    ' L' + ' ' + (startX + rX) + ' ' + height + ' Q ' + startX + ' '
	                    + height + ' ' + (startX) + ' ' + (height - rY) + ' z');
	            }
	            else {
	                if (arrowPadding === 0) {
	                    direction = direction.concat(' L' + ' ' + (startX + rX) + ' ' + height + ' Q ' + startX + ' '
	                        + height + ' ' + (startX) + ' ' + (height - rY) + ' z');
	                }
	                else {
	                    direction = direction.concat(' L' + ' ' + (startX) + ' ' + (height + rY) + ' z');
	                }
	            }
	        }
	        else if (bottom) {
	            direction = direction.concat('M' + ' ' + (startX) + ' ' + (startY + rY) + ' Q ' + startX + ' '
	                + (startY) + ' ' + (startX + rX) + ' ' + (startY) + ' L' + ' ' + (arrowLocation.x - arrowPadding / 2) + ' ' + (startY));
	            direction = direction.concat(' L' + ' ' + (tipX) + ' ' + (arrowLocation.y));
	            direction = direction.concat(' L' + ' ' + (arrowLocation.x + arrowPadding / 2) + ' ' + (startY) + ' L' + ' '
	                + (width - rX) + ' ' + (startY) + ' Q ' + (width) + ' ' + (startY) + ' ' + (width) + ' ' + (startY + rY));
	            direction = direction.concat(' L' + ' ' + (width) + ' ' + (height - rY) + ' Q ' + (width) + ' '
	                + (height) + ' ' + (width - rX) + ' ' + (height) +
	                ' L' + ' ' + (startX + rX) + ' ' + (height) + ' Q ' + (startX) + ' '
	                + (height) + ' ' + (startX) + ' ' + (height - rY) + ' z');
	        }
	        else if (left) {
	            direction = direction.concat('M' + ' ' + (startX) + ' ' + (startY + rY) + ' Q ' + startX + ' '
	                + (startY) + ' ' + (startX + rX) + ' ' + (startY));
	            direction = direction.concat(' L' + ' ' + (width - rX) + ' ' + (startY) + ' Q ' + (width) + ' '
	                + (startY) + ' ' + (width) + ' ' + (startY + rY) + ' L' + ' ' + (width) + ' ' + (arrowLocation.y - arrowPadding / 2));
	            direction = direction.concat(' L' + ' ' + (width + arrowPadding) + ' ' + (tipY));
	            direction = direction.concat(' L' + ' ' + (width) + ' ' + (arrowLocation.y + arrowPadding / 2) +
	                ' L' + ' ' + (width) + ' ' + (height - rY) + ' Q ' + width + ' ' + (height) + ' ' + (width - rX) + ' ' + (height));
	            direction = direction.concat(' L' + ' ' + (startX + rX) + ' ' + (height) + ' Q ' + startX + ' '
	                + (height) + ' ' + (startX) + ' ' + (height - rY) + ' z');
	        }
	        else {
	            direction = direction.concat('M' + ' ' + (startX + rX) + ' ' + (startY) + ' Q ' + (startX) + ' '
	                + (startY) + ' ' + (startX) + ' ' + (startY + rY) + ' L' + ' ' + (startX) + ' ' + (arrowLocation.y - arrowPadding / 2));
	            direction = direction.concat(' L' + ' ' + (startX - arrowPadding) + ' ' + (tipY));
	            direction = direction.concat(' L' + ' ' + (startX) + ' ' + (arrowLocation.y + arrowPadding / 2) +
	                ' L' + ' ' + (startX) + ' ' + (height - rY) + ' Q ' + startX + ' '
	                + (height) + ' ' + (startX + rX) + ' ' + (height));
	            direction = direction.concat(' L' + ' ' + (width - rX) + ' ' + (height) + ' Q ' + width + ' '
	                + (height) + ' ' + (width) + ' ' + (height - rY) +
	                ' L' + ' ' + (width) + ' ' + (startY + rY) + ' Q ' + width + ' '
	                + (startY) + ' ' + (width - rX) + ' ' + (startY) + ' z');
	        }
	        return direction;
	    }
	    exports.findDirection = findDirection;
	    function textElement(options, font, color, parent) {
	        var renderOptions = {};
	        var htmlObject;
	        var renderer = new ej2_base_1.SvgRenderer('');
	        renderOptions = {
	            'id': options.id,
	            'x': options.x,
	            'y': options.y,
	            'fill': color,
	            'font-size': font.size,
	            'font-style': font.fontStyle,
	            'font-family': font.fontFamily,
	            'font-weight': font.fontWeight,
	            'text-anchor': options.anchor,
	            'transform': options.transform,
	            'opacity': font.opacity,
	            'dominant-baseline': options.baseLine,
	        };
	        htmlObject = renderer.createText(renderOptions, options.text);
	        parent.appendChild(htmlObject);
	        return htmlObject;
	    }
	    exports.textElement = textElement;
	    function findPosition(element) {
	        var curleft = 0;
	        var curtop = 0;
	        if (element.offsetParent) {
	            do {
	                curleft += element.offsetLeft;
	                curtop += element.offsetTop;
	                element = element.offsetParent;
	            } while (element);
	            return new ChartLocation(curleft, curtop);
	        }
	        return null;
	    }
	    exports.findPosition = findPosition;
	    function calculateSize(chart) {
	        var containerWidth = chart.element.offsetWidth;
	        var containerHeight = chart.element.offsetHeight;
	        chart.availableSize = new Size(stringToNumber(chart.width, containerWidth) || containerWidth || 600, stringToNumber(chart.height, containerHeight) || containerHeight || 450);
	    }
	    exports.calculateSize = calculateSize;
	    function createSvg(chart) {
	        chart.renderer = new ej2_base_1.SvgRenderer(chart.element.id);
	        calculateSize(chart);
	        chart.svgObject = chart.renderer.createSvg({
	            id: chart.element.id + '_svg',
	            width: chart.availableSize.width,
	            height: chart.availableSize.height
	        });
	    }
	    exports.createSvg = createSvg;
	    var CustomizeOption = (function () {
	        function CustomizeOption(id) {
	            this.id = id;
	        }
	        return CustomizeOption;
	    }());
	    exports.CustomizeOption = CustomizeOption;
	    var StackValues = (function () {
	        function StackValues(startValue, endValue) {
	            this.startValues = startValue;
	            this.endValues = endValue;
	        }
	        return StackValues;
	    }());
	    exports.StackValues = StackValues;
	    var TextOption = (function (_super) {
	        __extends(TextOption, _super);
	        function TextOption(id, x, y, anchor, text, transform, baseLine) {
	            if (transform === void 0) { transform = ''; }
	            var _this = _super.call(this, id) || this;
	            _this.transform = '';
	            _this.baseLine = 'auto';
	            _this.x = x;
	            _this.y = y;
	            _this.anchor = anchor;
	            _this.text = text;
	            _this.transform = transform;
	            _this.baseLine = baseLine;
	            return _this;
	        }
	        return TextOption;
	    }(CustomizeOption));
	    exports.TextOption = TextOption;
	    var PathOption = (function (_super) {
	        __extends(PathOption, _super);
	        function PathOption(id, fill, width, color, opacity, dashArray, d) {
	            var _this = _super.call(this, id) || this;
	            _this.opacity = opacity;
	            _this.fill = fill;
	            _this.stroke = color;
	            _this['stroke-width'] = width;
	            _this['stroke-dasharray'] = dashArray;
	            _this.d = d;
	            return _this;
	        }
	        return PathOption;
	    }(CustomizeOption));
	    exports.PathOption = PathOption;
	    var RectOption = (function (_super) {
	        __extends(RectOption, _super);
	        function RectOption(id, fill, border, opacity, rect, rx, ry, transform, dashArray) {
	            var _this = _super.call(this, id, fill, border.width, border.color, opacity, dashArray) || this;
	            _this.y = rect.y;
	            _this.x = rect.x;
	            _this.height = rect.height;
	            _this.width = rect.width;
	            _this.rx = rx ? rx : 0;
	            _this.ry = ry ? ry : 0;
	            _this.transform = transform ? transform : '';
	            return _this;
	        }
	        return RectOption;
	    }(PathOption));
	    exports.RectOption = RectOption;
	    var CircleOption = (function (_super) {
	        __extends(CircleOption, _super);
	        function CircleOption(id, fill, border, opacity, cx, cy, r) {
	            var _this = _super.call(this, id, fill, border.width, border.color, opacity) || this;
	            _this.cy = cy;
	            _this.cx = cx;
	            _this.r = r;
	            return _this;
	        }
	        return CircleOption;
	    }(PathOption));
	    exports.CircleOption = CircleOption;
	    var PolygonOption = (function () {
	        function PolygonOption(id, points, fill) {
	            this.id = id;
	            this.points = points;
	            this.fill = fill;
	        }
	        return PolygonOption;
	    }());
	    exports.PolygonOption = PolygonOption;
	    var Size = (function () {
	        function Size(width, height) {
	            this.width = width;
	            this.height = height;
	        }
	        return Size;
	    }());
	    exports.Size = Size;
	    var Rect = (function () {
	        function Rect(x, y, width, height) {
	            this.x = x;
	            this.y = y;
	            this.width = width;
	            this.height = height;
	        }
	        return Rect;
	    }());
	    exports.Rect = Rect;
	    var ChartLocation = (function () {
	        function ChartLocation(x, y) {
	            this.x = x;
	            this.y = y;
	        }
	        return ChartLocation;
	    }());
	    exports.ChartLocation = ChartLocation;
	    var Thickness = (function () {
	        function Thickness(left, right, top, bottom) {
	            this.left = left;
	            this.right = right;
	            this.top = top;
	            this.bottom = bottom;
	        }
	        return Thickness;
	    }());
	    exports.Thickness = Thickness;
	    var ColorValue = (function () {
	        function ColorValue(r, g, b) {
	            this.r = r;
	            this.g = g;
	            this.b = b;
	        }
	        return ColorValue;
	    }());
	    exports.ColorValue = ColorValue;
	    var PointData = (function () {
	        function PointData(point, series, isRemove) {
	            if (isRemove === void 0) { isRemove = true; }
	            this.point = point;
	            this.series = series;
	            this.isRemove = isRemove;
	        }
	        return PointData;
	    }());
	    exports.PointData = PointData;
	    var TextCollection = (function () {
	        function TextCollection(text, width, height) {
	            this.text = text;
	            this.width = width;
	            this.height = height;
	        }
	        return TextCollection;
	    }());
	    exports.TextCollection = TextCollection;
	    var ControlPoints = (function () {
	        function ControlPoints(controlPoint1, controlPoint2) {
	            this.controlPoint1 = controlPoint1;
	            this.controlPoint2 = controlPoint2;
	        }
	        return ControlPoints;
	    }());
	    exports.ControlPoints = ControlPoints;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 4 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var LineBase = (function () {
	        function LineBase() {
	        }
	        LineBase.prototype.improveChartPerformance = function (series) {
	            var tempPoints = [];
	            var xVisibleRange = series.xAxis.visibleRange;
	            var yVisibleRange = series.yAxis.visibleRange;
	            var seriesPoints = series.points;
	            var areaBounds = series.clipRect;
	            var xTolerance = Math.abs(xVisibleRange.delta / areaBounds.width);
	            var yTolerance = Math.abs(yVisibleRange.delta / areaBounds.height);
	            var prevXValue = (seriesPoints[0] && seriesPoints[0].x > xTolerance) ? 0 : xTolerance;
	            var prevYValue = (seriesPoints[0] && seriesPoints[0].y > yTolerance) ? 0 : yTolerance;
	            var xVal = 0;
	            var yVal = 0;
	            var currentPoint;
	            for (var _i = 0, seriesPoints_1 = seriesPoints; _i < seriesPoints_1.length; _i++) {
	                var currentPoint_1 = seriesPoints_1[_i];
	                currentPoint_1.symbolLocation = null;
	                xVal = currentPoint_1.xValue ? currentPoint_1.xValue : xVisibleRange.min;
	                yVal = currentPoint_1.yValue ? currentPoint_1.yValue : yVisibleRange.min;
	                if (Math.abs(prevXValue - xVal) >= xTolerance || Math.abs(prevYValue - yVal) >= yTolerance) {
	                    tempPoints.push(currentPoint_1);
	                    prevXValue = xVal;
	                    prevYValue = yVal;
	                }
	            }
	            return tempPoints;
	        };
	        LineBase.prototype.appendLinePath = function (options, series) {
	            var htmlObject = series.chart.renderer.drawPath(options);
	            series.pathElement = htmlObject;
	            series.seriesElement.appendChild(htmlObject);
	            series.isRectSeries = false;
	        };
	        LineBase.prototype.renderMarker = function (series) {
	            if (series.marker.visible) {
	                series.chart.markerModule.render(series);
	            }
	        };
	        LineBase.prototype.doProgressiveAnimation = function (series, option) {
	            var animation = new ej2_base_1.Animation({});
	            var path = series.pathElement;
	            var strokeDashArray = path.getAttribute('stroke-dasharray');
	            var pathLength = series.pathElement.getTotalLength();
	            var currentTime;
	            path.style.visibility = 'hidden';
	            animation.animate(path, {
	                duration: option.duration,
	                delay: option.delay,
	                progress: function (args) {
	                    if (args.timeStamp >= args.delay) {
	                        path.style.visibility = 'visible';
	                        currentTime = Math.abs(Math.round(((args.timeStamp - args.delay) * pathLength) / args.duration));
	                        path.setAttribute('stroke-dasharray', currentTime + ',' + pathLength);
	                    }
	                },
	                end: function (model) {
	                    path.setAttribute('stroke-dasharray', strokeDashArray);
	                    series.chart.trigger('animationComplete', { series: series });
	                }
	            });
	        };
	        LineBase.prototype.doLinearAnimation = function (series, animation) {
	            var clipRect = series.clipRectElement.childNodes[0].childNodes[0];
	            var eleWidth = +clipRect.getAttribute('width');
	            var width = 0;
	            clipRect.setAttribute('width', '0');
	            new ej2_base_1.Animation({}).animate(clipRect, {
	                delay: animation.delay,
	                duration: animation.duration,
	                progress: function (args) {
	                    if (args.timeStamp >= args.delay) {
	                        width = ((args.timeStamp - args.delay) / args.duration) * eleWidth;
	                        clipRect.setAttribute('width', width.toString());
	                    }
	                },
	                end: function (model) {
	                    clipRect.setAttribute('width', eleWidth.toString());
	                    series.chart.trigger('animationComplete', { series: series });
	                }
	            });
	        };
	        return LineBase;
	    }());
	    exports.LineBase = LineBase;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(4), __webpack_require__(4), __webpack_require__(4), __webpack_require__(4), __webpack_require__(4), __webpack_require__(3), __webpack_require__(3), __webpack_require__(8), __webpack_require__(7), __webpack_require__(9), __webpack_require__(13), __webpack_require__(3), __webpack_require__(14), __webpack_require__(15), __webpack_require__(17), __webpack_require__(12), __webpack_require__(18), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, ej2_base_4, ej2_base_5, ej2_base_6, helper_1, helper_2, theme_1, base_1, axis_1, cartesian_panel_1, helper_3, chart_series_1, data_1, legend_1, constants_1, chart_base_1, helper_4) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var TooltipSettings = (function (_super) {
	        __extends(TooltipSettings, _super);
	        function TooltipSettings() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return TooltipSettings;
	    }(ej2_base_2.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(false)
	    ], TooltipSettings.prototype, "enable", void 0);
	    __decorate([
	        ej2_base_1.Property(false)
	    ], TooltipSettings.prototype, "shared", void 0);
	    __decorate([
	        ej2_base_1.Property('#FFFFFF')
	    ], TooltipSettings.prototype, "fill", void 0);
	    __decorate([
	        ej2_base_6.Complex(theme_1.Theme.tooltipLabelFont, base_1.Font)
	    ], TooltipSettings.prototype, "textStyle", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], TooltipSettings.prototype, "format", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], TooltipSettings.prototype, "template", void 0);
	    __decorate([
	        ej2_base_1.Property(true)
	    ], TooltipSettings.prototype, "enableAnimation", void 0);
	    __decorate([
	        ej2_base_6.Complex({ color: null, width: 1 }, base_1.Border)
	    ], TooltipSettings.prototype, "border", void 0);
	    exports.TooltipSettings = TooltipSettings;
	    var CrosshairSettings = (function (_super) {
	        __extends(CrosshairSettings, _super);
	        function CrosshairSettings() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return CrosshairSettings;
	    }(ej2_base_2.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(false)
	    ], CrosshairSettings.prototype, "enable", void 0);
	    __decorate([
	        ej2_base_6.Complex({ color: '#4f4f4f', width: 1 }, base_1.Border)
	    ], CrosshairSettings.prototype, "line", void 0);
	    __decorate([
	        ej2_base_1.Property('Both')
	    ], CrosshairSettings.prototype, "lineType", void 0);
	    exports.CrosshairSettings = CrosshairSettings;
	    var ZoomSettings = (function (_super) {
	        __extends(ZoomSettings, _super);
	        function ZoomSettings() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return ZoomSettings;
	    }(ej2_base_2.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(false)
	    ], ZoomSettings.prototype, "enableSelectionZooming", void 0);
	    __decorate([
	        ej2_base_1.Property(false)
	    ], ZoomSettings.prototype, "enablePinchZooming", void 0);
	    __decorate([
	        ej2_base_1.Property(false)
	    ], ZoomSettings.prototype, "enableMouseWheelZooming", void 0);
	    __decorate([
	        ej2_base_1.Property(true)
	    ], ZoomSettings.prototype, "enableDeferredZooming", void 0);
	    __decorate([
	        ej2_base_1.Property('XY')
	    ], ZoomSettings.prototype, "mode", void 0);
	    __decorate([
	        ej2_base_1.Property(['Zoom', 'ZoomIn', 'ZoomOut', 'Pan', 'Reset'])
	    ], ZoomSettings.prototype, "toolbarItems", void 0);
	    exports.ZoomSettings = ZoomSettings;
	    var Chart = (function (_super) {
	        __extends(Chart, _super);
	        function Chart(options, element) {
	            return _super.call(this, options, element) || this;
	        }
	        Chart.prototype.preRender = function () {
	            this.unWireEvents();
	            this.initPrivateVariable();
	            this.setCulture();
	            this.setTheme();
	            this.createChartSvg();
	            this.wireEvents();
	        };
	        Chart.prototype.initPrivateVariable = function () {
	            this.animateSeries = true;
	            this.horizontalAxes = [];
	            this.verticalAxes = [];
	            this.refreshAxis();
	            this.refreshDefinition(this.rows);
	            this.refreshDefinition(this.columns);
	            this.storedPoints = [];
	        };
	        Chart.prototype.render = function () {
	            this.trigger(constants_1.load, { chart: this });
	            this.calculateAreaType();
	            this.calculateVisibleSeries();
	            this.calculateVisibleAxis();
	            this.processData();
	        };
	        Chart.prototype.refreshBound = function () {
	            if (this.legendModule && this.legendSettings.visible) {
	                this.legendModule.getLegendOptions(this.visibleSeries);
	            }
	            var isCalculateStacking = false;
	            var series;
	            for (var i = 0, len = this.visibleSeries.length; i < len; i++) {
	                series = this.visibleSeries[i];
	                if ((series.type.indexOf('Stacking') !== -1) && !isCalculateStacking) {
	                    series.calculateStackedValue(series.type.indexOf('100') > -1);
	                    isCalculateStacking = true;
	                }
	            }
	            this.calculateBounds();
	            this.renderElements();
	        };
	        Chart.prototype.renderElements = function () {
	            this.dataLabelCollections = [];
	            this.renderBorder();
	            this.renderTitle();
	            this.renderAreaBorder();
	            this.seriesElements = this.renderer.createGroup({ id: this.element.id + 'SeriesCollection' });
	            this.dataLabelElements = this.renderer.createGroup({ id: this.element.id + 'DataLabelCollection' });
	            if (this.rows.length > 0 && this.columns.length > 0) {
	                this.chartAxisLayoutPanel.renderAxes();
	                var tooltipDiv = document.createElement('div');
	                tooltipDiv.id = this.element.id + '_Secondary_Element';
	                tooltipDiv.setAttribute('style', 'position: relative');
	                this.element.appendChild(tooltipDiv);
	                if (this.tooltip.enable) {
	                    this.svgObject.appendChild(this.renderer.createGroup({ id: this.element.id + '_UserInteraction' }));
	                }
	                for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {
	                    var item = _a[_i];
	                    if (item.visible) {
	                        helper_1.findClipRect(item);
	                        item.renderSeries(this, item.index);
	                    }
	                }
	            }
	            var clipRect = this.renderer.drawClipPath({
	                'id': this.element.id + '_ChartAreaClipRect_',
	                'x': this.chartAxisLayoutPanel.seriesClipRect.x,
	                'y': this.chartAxisLayoutPanel.seriesClipRect.y,
	                'width': this.chartAxisLayoutPanel.seriesClipRect.width,
	                'height': this.chartAxisLayoutPanel.seriesClipRect.height,
	                'fill': 'transparent',
	                'stroke-width': 1,
	                'stroke': 'Gray'
	            });
	            this.seriesElements.appendChild(clipRect);
	            if (this.dataLabelElements.hasChildNodes()) {
	                this.seriesElements.appendChild(this.dataLabelElements);
	            }
	            this.svgObject.appendChild(this.seriesElements);
	            if (this.legendModule) {
	                this.legendModule.renderLegend(this, this.legendSettings, this.legendModule.legendBounds);
	            }
	            if (!this.tooltip.enable) {
	                this.svgObject.appendChild(this.renderer.createGroup({ id: this.element.id + '_UserInteraction' }));
	            }
	            this.element.appendChild(this.svgObject);
	            if (this.zoomModule && this.zoomModule.isZoomed) {
	                this.zoomModule.applyZoomToolkit(this, this.axisCollections);
	            }
	            var selectedDataIndexes = [];
	            if (this.selectionModule) {
	                selectedDataIndexes = ej2_base_4.extend([], this.selectionModule.selectedDataIndexes, null, true);
	                this.selectionModule.invokeSelection(this);
	            }
	            if (selectedDataIndexes.length > 0) {
	                this.selectionModule.selectedDataIndexes = selectedDataIndexes;
	                this.selectionModule.redrawSelection(this, this.selectionMode);
	            }
	            this.renderAnnotation();
	            this.trigger('loaded', { chart: this });
	        };
	        Chart.prototype.renderAnnotation = function () {
	            if (this.annotationModule) {
	                this.annotationModule.renderAnnotations(helper_4.getElement(this.element.id + '_Secondary_Element'));
	            }
	        };
	        Chart.prototype.processData = function () {
	            var series;
	            this.visibleSeriesCount = 0;
	            for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {
	                var series_1 = _a[_i];
	                if (!series_1.visible) {
	                    this.visibleSeriesCount++;
	                    continue;
	                }
	                series_1.xData = [];
	                series_1.yData = [];
	                series_1.dataModule = new data_1.Data(series_1.dataSource, series_1.query);
	                series_1.points = [];
	                series_1.refreshDataManager(this);
	            }
	            if (!this.visibleSeries.length || this.visibleSeriesCount === this.visibleSeries.length) {
	                this.refreshBound();
	            }
	        };
	        Chart.prototype.calculateBounds = function () {
	            var padding = 5;
	            var margin = this.margin;
	            var titleHeight = 0;
	            if (this.title) {
	                titleHeight = helper_1.measureText(this.title, this.titleStyle).height + padding;
	            }
	            var top = margin.top + titleHeight + this.chartArea.border.width / 2;
	            var left = margin.left;
	            var width = this.availableSize.width - left - margin.right - this.border.width;
	            var height = this.availableSize.height - top - this.border.width - margin.bottom;
	            this.initialClipRect = new helper_3.Rect(left, top, width, height);
	            if (this.legendModule) {
	                this.legendModule.calculateLegendBounds(this.initialClipRect, this.availableSize);
	            }
	            this.chartAxisLayoutPanel.measureAxis(this.initialClipRect);
	        };
	        Chart.prototype.calculateAreaType = function () {
	            var series = this.series[0];
	            if (series) {
	                this.requireInvertedAxis = (series.type.indexOf('Bar') !== -1);
	            }
	            this.chartAxisLayoutPanel = new cartesian_panel_1.CartesianAxisLayoutPanel(this);
	        };
	        Chart.prototype.calculateVisibleAxis = function () {
	            var axis;
	            var series;
	            var axes = [this.primaryXAxis, this.primaryYAxis];
	            axes = axes.concat(this.axes);
	            this.axisCollections = [];
	            for (var i = 0, len = axes.length; i < len; i++) {
	                axis = axes[i];
	                axis.series = [];
	                axis.labels = [];
	                for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {
	                    var series_2 = _a[_i];
	                    if (series_2.xAxisName === axis.name || (series_2.xAxisName == null && axis.name === 'primaryXAxis')) {
	                        axis.orientation = this.requireInvertedAxis ? 'Vertical' : 'Horizontal';
	                        series_2.xAxis = axis;
	                        axis.series.push(series_2);
	                    }
	                    else if (series_2.yAxisName === axis.name || (series_2.yAxisName == null && axis.name === 'primaryYAxis')) {
	                        axis.orientation = this.requireInvertedAxis ? 'Horizontal' : 'Vertical';
	                        series_2.yAxis = axis;
	                        axis.series.push(series_2);
	                    }
	                }
	                if (axis.orientation != null) {
	                    this.axisCollections.push(axis);
	                }
	            }
	            if (this.rows.length > 0 && this.columns.length > 0) {
	                this.chartAxisLayoutPanel.measure();
	            }
	        };
	        Chart.prototype.calculateVisibleSeries = function () {
	            var series;
	            this.visibleSeries = [];
	            var colors = this.palettes.length ? this.palettes : theme_1.getSeriesColor(this.theme);
	            var count = colors.length;
	            for (var i = 0, len = this.series.length; i < len; i++) {
	                series = this.series[i];
	                series.index = i;
	                series.interior = series.fill || colors[i % count];
	                if (this.requireInvertedAxis && series.type.indexOf('Bar') === -1) {
	                    continue;
	                }
	                if (!this.requireInvertedAxis && (series.type.indexOf('Bar') !== -1)) {
	                    continue;
	                }
	                this.visibleSeries.push(series);
	                this.series[i] = series;
	            }
	        };
	        Chart.prototype.renderTitle = function () {
	            if (this.title) {
	                var areaBounds = this.chartAxisLayoutPanel.seriesClipRect;
	                this.elementSize = helper_1.measureText(this.title, this.titleStyle);
	                var options = new helper_1.TextOption(this.element.id + '_ChartTitle', this.availableSize.width / 2, this.margin.top + 3 * (this.elementSize.height / 4), 'middle', helper_1.textTrim(this.availableSize.width, this.title, this.titleStyle));
	                var element = helper_2.textElement(options, this.titleStyle, this.titleStyle.color, this.svgObject);
	                element.setAttribute('aria-label', this.description || this.title);
	                element.setAttribute('tabindex', this.tabIndex.toString());
	            }
	        };
	        Chart.prototype.renderBorder = function () {
	            var width = this.border.width;
	            var rect = new helper_2.RectOption(this.element.id + '_ChartBorder', this.background, this.border, 1, new helper_3.Rect(width / 2, width / 2, this.availableSize.width - width, this.availableSize.height - width));
	            this.htmlObject = this.renderer.drawRectangle(rect);
	            this.svgObject.appendChild(this.htmlObject);
	        };
	        Chart.prototype.renderAreaBorder = function () {
	            var rect = new helper_2.RectOption(this.element.id + '_ChartAreaBorder', this.chartArea.background, this.chartArea.border, this.chartArea.opacity, this.chartAxisLayoutPanel.seriesClipRect);
	            this.htmlObject = this.renderer.drawRectangle(rect);
	            this.svgObject.appendChild(this.htmlObject);
	        };
	        Chart.prototype.destroy = function () {
	            this.unWireEvents();
	            _super.prototype.destroy.call(this);
	            this.element.classList.remove('e-chart');
	        };
	        Chart.prototype.getModuleName = function () {
	            return 'chart';
	        };
	        Chart.prototype.getPersistData = function () {
	            var keyEntity = ['loaded', 'animationComplete'];
	            return this.addOnPersist(keyEntity);
	        };
	        Chart.prototype.createChartSvg = function () {
	            this.removeSvg();
	            this.offset = helper_1.findPosition(this.element);
	            helper_2.createSvg(this);
	        };
	        Chart.prototype.unWireEvents = function () {
	            var isIE11Pointer = ej2_base_5.Browser.isPointer;
	            var startEvent = ej2_base_5.Browser.touchStartEvent;
	            var moveEvent = ej2_base_5.Browser.touchMoveEvent;
	            var stopEvent = ej2_base_5.Browser.touchEndEvent;
	            var wheelEvent = ej2_base_5.Browser.info.name === 'mozilla' ? (isIE11Pointer ? 'mousewheel' : 'DOMMouseScroll') : 'mousewheel';
	            var cancelEvent = isIE11Pointer ? 'pointerleave' : 'mouseleave';
	            ej2_base_6.EventHandler.remove(this.element, startEvent, this.chartOnMouseDown);
	            ej2_base_6.EventHandler.remove(this.element, moveEvent, this.mouseMove);
	            ej2_base_6.EventHandler.remove(this.element, stopEvent, this.mouseEnd);
	            ej2_base_6.EventHandler.remove(this.element, 'click', this.chartOnMouseClick);
	            ej2_base_6.EventHandler.remove(this.element, 'contextmenu', this.chartRightClick);
	            ej2_base_6.EventHandler.remove(this.element, cancelEvent, this.mouseLeave);
	            ej2_base_6.EventHandler.remove(this.element, wheelEvent, this.chartMouseWheel);
	            if (this.isOrientation() && ej2_base_5.Browser.isTouch) {
	                ej2_base_6.EventHandler.remove(window, 'orientationchange', this.chartResize);
	            }
	            else {
	                ej2_base_6.EventHandler.remove(window, 'resize', this.chartResize);
	            }
	        };
	        Chart.prototype.wireEvents = function () {
	            var isIE11Pointer = ej2_base_5.Browser.isPointer;
	            var wheelEvent = ej2_base_5.Browser.info.name === 'mozilla' ? (isIE11Pointer ? 'mousewheel' : 'DOMMouseScroll') : 'mousewheel';
	            var startEvent = ej2_base_5.Browser.touchStartEvent;
	            var stopEvent = ej2_base_5.Browser.touchEndEvent;
	            var moveEvent = ej2_base_5.Browser.touchMoveEvent;
	            var cancelEvent = isIE11Pointer ? 'pointerleave' : 'mouseleave';
	            ej2_base_6.EventHandler.add(this.element, startEvent, this.chartOnMouseDown, this);
	            ej2_base_6.EventHandler.add(this.element, moveEvent, this.mouseMove, this);
	            ej2_base_6.EventHandler.add(this.element, stopEvent, this.mouseEnd, this);
	            ej2_base_6.EventHandler.add(this.element, 'click', this.chartOnMouseClick, this);
	            ej2_base_6.EventHandler.add(this.element, 'contextmenu', this.chartRightClick, this);
	            ej2_base_6.EventHandler.add(this.element, cancelEvent, this.mouseLeave, this);
	            ej2_base_6.EventHandler.add(this.element, wheelEvent, this.chartMouseWheel, this);
	            if (ej2_base_5.Browser.isTouch && this.isOrientation()) {
	                ej2_base_6.EventHandler.add(window, 'orientationchange', this.chartResize, this);
	            }
	            else {
	                ej2_base_6.EventHandler.add(window, 'resize', this.chartResize, this);
	            }
	            this.longPress = this.longPress.bind(this);
	            new ej2_base_5.Touch(this.element, { tapHold: this.longPress, tapHoldThreshold: 500 });
	            this.setStyle(this.element);
	        };
	        Chart.prototype.chartRightClick = function (event) {
	            if (event.buttons === 2 || event.pointerType === 'touch') {
	                event.preventDefault();
	                event.stopPropagation();
	                return false;
	            }
	            return true;
	        };
	        Chart.prototype.setStyle = function (element) {
	            var zooming = this.zoomSettings;
	            var disableScroll = zooming.enableSelectionZooming || zooming.enableMouseWheelZooming || zooming.enablePinchZooming ||
	                this.selectionMode !== 'None' || this.crosshair.enable;
	            element.style.touchAction = disableScroll ? 'none' : 'element';
	            element.style.msTouchAction = disableScroll ? 'none' : 'element';
	            element.style.msContentZooming = 'none';
	            element.style.msUserSelect = 'none';
	            element.style.webkitUserSelect = 'none';
	            element.style.position = 'relative';
	            element.style.display = 'block';
	        };
	        Chart.prototype.isOrientation = function () {
	            return ('orientation' in window && 'onorientationchange' in window);
	        };
	        Chart.prototype.longPress = function (e) {
	            this.mouseX = (e && e.originalEvent.changedTouches) ? (e.originalEvent.changedTouches[0].clientX - this.offset.x) : 0;
	            this.mouseY = (e && e.originalEvent.changedTouches) ? (e.originalEvent.changedTouches[0].clientY - this.offset.y) : 0;
	            this.startMove = true;
	            if (this.crosshairModule && helper_2.withInBounds(this.mouseX, this.mouseY, this.chartAxisLayoutPanel.seriesClipRect)) {
	                if (this.tooltipModule) {
	                    this.tooltipModule.tooltip();
	                }
	                this.crosshairModule.crosshair();
	            }
	            return false;
	        };
	        Chart.prototype.chartResize = function (e) {
	            var _this = this;
	            this.animateSeries = false;
	            if (this.resizeTo) {
	                clearTimeout(this.resizeTo);
	            }
	            this.resizeTo = setTimeout(function () {
	                _this.createChartSvg();
	                _this.refreshAxis();
	                _this.refreshBound();
	            }, 500);
	            return false;
	        };
	        Chart.prototype.mouseMove = function (e) {
	            var pageX;
	            var pageY;
	            var touchArg;
	            var touches = null;
	            var rect = this.element.getBoundingClientRect();
	            if (e.type === 'touchmove') {
	                this.isTouch = true;
	                touchArg = e;
	                pageX = touchArg.changedTouches[0].clientX;
	                pageY = touchArg.changedTouches[0].clientY;
	                touches = touchArg.touches;
	            }
	            else {
	                this.isTouch = e.pointerType === 'touch' || e.pointerType === '2' || this.isTouch;
	                pageX = e.clientX;
	                pageY = e.clientY;
	            }
	            this.mouseX = pageX - rect.left;
	            this.mouseY = pageY - rect.top;
	            this.chartOnMouseMove(e, touches);
	            return false;
	        };
	        Chart.prototype.mouseLeave = function (e) {
	            var pageX;
	            var pageY;
	            var touchArg;
	            var rect = this.element.getBoundingClientRect();
	            if (e.type === 'touchleave') {
	                this.isTouch = true;
	                touchArg = e;
	                pageX = touchArg.changedTouches[0].clientX;
	                pageY = touchArg.changedTouches[0].clientY;
	            }
	            else {
	                this.isTouch = e.pointerType === 'touch' || e.pointerType === '2';
	                pageX = e.clientX;
	                pageY = e.clientY;
	            }
	            this.mouseX = pageX - rect.left;
	            this.mouseY = pageY - rect.top;
	            this.chartOnMouseLeave(e);
	            return false;
	        };
	        Chart.prototype.chartOnMouseLeave = function (e) {
	            var element = e.target;
	            this.trigger(constants_1.chartMouseLeave, { target: element.id, x: this.mouseX, y: this.mouseY });
	            if (this.zoomModule) {
	                if (this.zoomModule.isZoomed) {
	                    this.zoomModule.performZoomRedraw(this);
	                }
	                this.zoomModule.pinchTarget = null;
	                this.zoomModule.touchStartList = [];
	                this.zoomModule.touchMoveList = [];
	            }
	            if (this.tooltip.enable && this.tooltipModule) {
	                this.tooltipModule.removeTooltip(true);
	            }
	            if (this.crosshair.enable && this.crosshairModule) {
	                this.crosshairModule.removeCrosshair();
	            }
	            if (this.selectionMode !== 'None' && this.selectionModule) {
	                this.selectionModule.completeSelection(this, e);
	            }
	            this.isChartDrag = false;
	            return false;
	        };
	        Chart.prototype.chartOnMouseClick = function (e) {
	            var element = e.target;
	            this.trigger(constants_1.chartMouseClick, { target: element.id, x: this.mouseX, y: this.mouseY });
	            if (this.legendSettings.visible && this.legendModule) {
	                this.legendModule.click(e);
	            }
	            if (this.selectionMode !== 'None' && this.selectionModule) {
	                this.selectionModule.calculateSelectedElements(this, e);
	            }
	            return false;
	        };
	        Chart.prototype.chartOnMouseMove = function (e, touches) {
	            var element = e.target;
	            this.trigger(constants_1.chartMouseMove, { target: element.id, x: this.mouseX, y: this.mouseY });
	            var zooming = this.zoomModule;
	            if (this.isChartDrag && zooming) {
	                if (this.isTouch) {
	                    zooming.touchMoveList = this.addTouchPointer(zooming.touchMoveList, e, touches);
	                    if (this.zoomSettings.enablePinchZooming && zooming.touchMoveList.length > 1
	                        && zooming.touchStartList.length > 1) {
	                        this.zoomModule.performPinchZooming(e, this);
	                    }
	                }
	                zooming.renderZooming(e, this, this.isTouch);
	            }
	            if (!this.disableTrackTooltip) {
	                if (this.tooltip.enable && this.tooltipModule && !this.tooltip.shared && (!this.isTouch || (this.startMove))) {
	                    this.tooltipModule.tooltip();
	                }
	                if (helper_2.withInBounds(this.mouseX, this.mouseY, this.chartAxisLayoutPanel.seriesClipRect)) {
	                    if (this.tooltip.enable && this.tooltipModule && this.tooltip.shared && (!this.isTouch || (this.startMove))) {
	                        this.tooltipModule.tooltip();
	                    }
	                    if (this.crosshair.enable && this.crosshairModule && (!this.isTouch || this.startMove)) {
	                        this.crosshairModule.crosshair();
	                    }
	                }
	                else {
	                    if (this.tooltip.enable && this.tooltipModule && this.tooltip.shared) {
	                        this.tooltipModule.removeTooltip();
	                    }
	                    if (this.crosshair.enable && this.crosshairModule) {
	                        this.crosshairModule.removeCrosshair();
	                    }
	                }
	                if (this.selectionMode !== 'None' && this.selectionModule) {
	                    this.selectionModule.mouseMove(this, e);
	                }
	            }
	            if (!this.isTouch) {
	                this.titleTooltip(e, this.mouseX, this.mouseY);
	                if (this.legendSettings.visible && this.legendModule) {
	                    this.legendModule.move(e, this.mouseX, this.mouseY);
	                }
	            }
	            this.isTouch = false;
	            return false;
	        };
	        Chart.prototype.titleTooltip = function (event, x, y, isTouch) {
	            var targetId = event.target.id;
	            if ((targetId === (this.element.id + '_ChartTitle')) && (event.target.textContent.indexOf('...') > -1)) {
	                helper_1.showTooltip(this.title, x, y, this.element.offsetWidth, this.element.id + '_EJ2_Title_Tooltip', isTouch);
	            }
	            else {
	                helper_1.removeElement(this.element.id + '_EJ2_Title_Tooltip');
	            }
	        };
	        Chart.prototype.chartOnMouseDown = function (e) {
	            var pageX;
	            var pageY;
	            var target;
	            var touchArg;
	            var touches = null;
	            var offset = ej2_base_5.Browser.isDevice ? 20 : 30;
	            var rect = this.element.getBoundingClientRect();
	            var element = e.target;
	            this.trigger(constants_1.chartMouseDown, { target: element.id, x: this.mouseX, y: this.mouseY });
	            if (e.type === 'touchstart') {
	                this.isTouch = true;
	                touchArg = e;
	                pageX = touchArg.changedTouches[0].clientX;
	                pageY = touchArg.changedTouches[0].clientY;
	                target = touchArg.target;
	                touches = touchArg.touches;
	            }
	            else {
	                this.isTouch = e.pointerType === 'touch';
	                pageX = e.clientX;
	                pageY = e.clientY;
	                target = e.target;
	            }
	            this.mouseDownX = this.previousMouseMoveX = pageX - rect.left;
	            this.mouseDownY = this.previousMouseMoveY = pageY - rect.top;
	            if (target.id.indexOf(this.element.id + '_Zooming_') === -1 &&
	                helper_2.withInBounds(this.previousMouseMoveX, this.previousMouseMoveY, this.chartAxisLayoutPanel.seriesClipRect)) {
	                this.isChartDrag = true;
	            }
	            if (this.isTouch) {
	                if (this.zoomModule) {
	                    this.zoomModule.touchStartList = this.addTouchPointer(this.zoomModule.touchStartList, e, touches);
	                }
	                this.isDoubleTap = (new Date().getTime() < this.threshold && target.id.indexOf(this.element.id + '_Zooming_') === -1 &&
	                    (this.mouseDownX - offset >= this.mouseX || this.mouseDownX + offset >= this.mouseX) &&
	                    (this.mouseDownY - offset >= this.mouseY || this.mouseDownY + offset >= this.mouseY) &&
	                    (this.mouseX - offset >= this.mouseDownX || this.mouseX + offset >= this.mouseDownX) &&
	                    (this.mouseY - offset >= this.mouseDownY || this.mouseY + offset >= this.mouseDownY));
	            }
	            if (this.selectionMode !== 'None' && this.selectionModule) {
	                if (this.isDoubleTap || !this.isTouch || this.selectionModule.rectPoints) {
	                    this.selectionModule.dragStart(this, this.chartAxisLayoutPanel.seriesClipRect, this.mouseDownX, this.mouseDownY, e);
	                }
	            }
	            return false;
	        };
	        Chart.prototype.mouseEnd = function (e) {
	            var pageY;
	            var pageX;
	            var touchArg;
	            var rect = this.element.getBoundingClientRect();
	            if (e.type === 'touchend') {
	                touchArg = e;
	                pageX = touchArg.changedTouches[0].clientX;
	                this.isTouch = true;
	                pageY = touchArg.changedTouches[0].clientY;
	            }
	            else {
	                pageY = e.clientY;
	                pageX = e.clientX;
	                this.isTouch = e.pointerType === 'touch' || e.pointerType === '2';
	            }
	            this.mouseX = pageX - rect.left;
	            this.mouseY = pageY - rect.top;
	            this.chartOnMouseUp(e);
	            return false;
	        };
	        Chart.prototype.chartOnMouseUp = function (e) {
	            var element = e.target;
	            this.trigger(constants_1.chartMouseUp, { target: element.id, x: this.mouseX, y: this.mouseY });
	            if (this.tooltip.enable && this.isTouch && (!this.crosshair.enable)) {
	                this.tooltipModule.tooltip();
	                this.tooltipModule.removeTooltip();
	            }
	            if (this.startMove && this.crosshair.enable && this.isTouch) {
	                this.crosshairModule.removeCrosshair();
	                if (this.tooltip.enable) {
	                    this.tooltipModule.removeTooltip();
	                }
	            }
	            var performZoomRedraw = e.target.id.indexOf(this.element.id + '_ZoomOut_') === -1 ||
	                e.target.id.indexOf(this.element.id + '_ZoomIn_') === -1;
	            if (this.zoomModule && (this.isChartDrag || performZoomRedraw)) {
	                this.zoomModule.performZoomRedraw(this);
	            }
	            this.isChartDrag = false;
	            if (this.isTouch) {
	                this.titleTooltip(e, this.mouseX, this.mouseY, this.isTouch);
	                if (this.legendSettings.visible && this.legendModule) {
	                    this.legendModule.move(e, this.mouseX, this.mouseY, this.isTouch);
	                }
	                this.threshold = new Date().getTime() + 300;
	                if (this.isDoubleTap && helper_2.withInBounds(this.mouseX, this.mouseY, this.chartAxisLayoutPanel.seriesClipRect)
	                    && this.zoomModule && this.zoomModule.touchStartList.length === 1 && this.zoomModule.isZoomed) {
	                    this.zoomModule.toolkit.reset();
	                }
	                this.isDoubleTap = false;
	            }
	            if (this.selectionMode !== 'None' && this.selectionModule) {
	                this.selectionModule.completeSelection(this, e);
	            }
	            this.seriesElements.removeAttribute('clip-path');
	            return false;
	        };
	        Chart.prototype.chartMouseWheel = function (e) {
	            var offset = this.element.getBoundingClientRect();
	            var mouseX = e.clientX - offset.left;
	            var mouseY = e.clientY - offset.top;
	            if (this.zoomModule && this.zoomSettings.enableMouseWheelZooming &&
	                helper_2.withInBounds(mouseX, mouseY, this.chartAxisLayoutPanel.seriesClipRect)) {
	                e.preventDefault();
	                this.zoomModule.performMouseWheelZooming(e, mouseX, mouseY, this, this.axisCollections);
	            }
	            return false;
	        };
	        Chart.prototype.addTouchPointer = function (touchList, e, touches) {
	            if (touches) {
	                touchList = [];
	                for (var i = 0, length_1 = touches.length; i < length_1; i++) {
	                    touchList.push({ pageX: touches[i].clientX, pageY: touches[i].clientY, pointerId: null });
	                }
	            }
	            else {
	                touchList = touchList ? touchList : [];
	                if (touchList.length === 0) {
	                    touchList.push({ pageX: e.clientX, pageY: e.clientY, pointerId: e.pointerId });
	                }
	                else {
	                    for (var i = 0, length_2 = touchList.length; i < length_2; i++) {
	                        if (touchList[i].pointerId === e.pointerId) {
	                            touchList[i] = { pageX: e.clientX, pageY: e.clientY, pointerId: e.pointerId };
	                        }
	                        else {
	                            touchList.push({ pageX: e.clientX, pageY: e.clientY, pointerId: e.pointerId });
	                        }
	                    }
	                }
	            }
	            return touchList;
	        };
	        Chart.prototype.setCulture = function () {
	            this.intl = new ej2_base_1.Internationalization();
	        };
	        Chart.prototype.setTheme = function () {
	        };
	        Chart.prototype.requiredModules = function () {
	            var _this = this;
	            var modules = [];
	            var series = this.series;
	            var moduleName;
	            var markerEnable = false;
	            var dataLabelEnable = false;
	            var zooming = this.zoomSettings;
	            var enableAnnotation = false;
	            series.map(function (value) {
	                _this.isLegend = (_this.legendSettings.visible && ((value.name !== '') || !!_this.isLegend));
	                moduleName = value.type.indexOf('100') !== -1 ? value.type.replace('100', '') + 'Series' : value.type + 'Series';
	                markerEnable = value.marker.visible || markerEnable;
	                dataLabelEnable = value.marker.dataLabel.visible || dataLabelEnable;
	                modules.push({
	                    member: moduleName,
	                    args: [_this, series]
	                });
	            });
	            modules = this.findAxisModule(modules);
	            if (markerEnable) {
	                modules.push({
	                    member: 'Marker',
	                    args: [this, series]
	                });
	            }
	            if (this.crosshair.enable) {
	                modules.push({
	                    member: 'Crosshair',
	                    args: [this]
	                });
	            }
	            if (this.tooltip.enable) {
	                modules.push({
	                    member: 'Tooltip',
	                    args: [this]
	                });
	            }
	            if (this.isLegend) {
	                modules.push({
	                    member: 'Legend',
	                    args: [this]
	                });
	            }
	            if (zooming.enableSelectionZooming || zooming.enableMouseWheelZooming || zooming.enablePinchZooming) {
	                modules.push({
	                    member: 'Zoom',
	                    args: [this, this.zoomSettings]
	                });
	            }
	            if (this.selectionMode !== 'None') {
	                modules.push({
	                    member: 'Selection',
	                    args: [this]
	                });
	            }
	            if (dataLabelEnable) {
	                modules.push({
	                    member: 'DataLabel',
	                    args: [this, series]
	                });
	            }
	            enableAnnotation = this.annotations.some(function (value) {
	                return (value.content !== null);
	            });
	            if (enableAnnotation) {
	                modules.push({
	                    member: 'Annotation',
	                    args: [this, this.annotations]
	                });
	            }
	            return modules;
	        };
	        Chart.prototype.findAxisModule = function (modules) {
	            var axisCollections = [];
	            axisCollections.push(this.primaryXAxis);
	            axisCollections.push(this.primaryYAxis);
	            axisCollections = axisCollections.concat(this.axes);
	            var datetimeEnabled = false;
	            var categoryEnabled = false;
	            var logarithmicEnabled = false;
	            for (var _i = 0, axisCollections_1 = axisCollections; _i < axisCollections_1.length; _i++) {
	                var axis = axisCollections_1[_i];
	                datetimeEnabled = axis.valueType === 'DateTime' || datetimeEnabled;
	                categoryEnabled = axis.valueType === 'Category' || categoryEnabled;
	                logarithmicEnabled = axis.valueType === 'Logarithmic' || logarithmicEnabled;
	            }
	            if (datetimeEnabled) {
	                modules.push({
	                    member: 'DateTime',
	                    args: [this]
	                });
	            }
	            if (categoryEnabled) {
	                modules.push({
	                    member: 'Category',
	                    args: [this]
	                });
	            }
	            if (logarithmicEnabled) {
	                modules.push({
	                    member: 'Logarithmic',
	                    args: [this]
	                });
	            }
	            return modules;
	        };
	        Chart.prototype.removeSvg = function () {
	            if (document.getElementById(this.element.id + '_Secondary_Element')) {
	                ej2_base_3.remove(document.getElementById(this.element.id + '_Secondary_Element'));
	            }
	            var removeLength = 0;
	            if (this.zoomModule && this.zoomModule.pinchTarget) {
	                this.zoomModule.pinchTarget.id = '';
	                this.zoomModule.pinchTarget.setAttribute('opacity', '0');
	                this.svgObject.appendChild(this.zoomModule.pinchTarget);
	                removeLength = 1;
	            }
	            if (this.svgObject) {
	                while (this.svgObject.childNodes.length > removeLength) {
	                    this.svgObject.removeChild(this.svgObject.firstChild);
	                }
	                if (!this.svgObject.hasChildNodes() && this.svgObject.parentNode) {
	                    ej2_base_3.remove(this.svgObject);
	                }
	            }
	        };
	        Chart.prototype.refreshDefinition = function (definitions) {
	            for (var _i = 0, definitions_1 = definitions; _i < definitions_1.length; _i++) {
	                var item = definitions_1[_i];
	                item.axes = [];
	            }
	        };
	        Chart.prototype.refreshAxis = function () {
	            var axis = this.primaryXAxis;
	            axis.rect = new helper_3.Rect(undefined, undefined, 0, 0);
	            axis = this.primaryYAxis;
	            axis.rect = new helper_3.Rect(undefined, undefined, 0, 0);
	            for (var _i = 0, _a = this.axes; _i < _a.length; _i++) {
	                var item = _a[_i];
	                axis = item;
	                axis.rect = new helper_3.Rect(undefined, undefined, 0, 0);
	            }
	        };
	        Chart.prototype.axisChange = function (axis) {
	            if (!axis.name && !axis.valueType) {
	                return false;
	            }
	            this.refreshDefinition(this.columns);
	            this.refreshDefinition(this.rows);
	            this.calculateVisibleAxis();
	            this.processData();
	            return true;
	        };
	        Chart.prototype.onPropertyChanged = function (newProp, oldProp) {
	            var renderer = false;
	            var refreshBounds = false;
	            this.animateSeries = false;
	            if (!this.delayRedraw) {
	                for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
	                    var prop = _a[_i];
	                    switch (prop) {
	                        case 'primaryXAxis':
	                            refreshBounds = this.axisChange(newProp.primaryXAxis);
	                            if (newProp.primaryXAxis.edgeLabelPlacement) {
	                                renderer = true;
	                            }
	                            if (!newProp.primaryXAxis.crosshairTooltip) {
	                                refreshBounds = true;
	                            }
	                            break;
	                        case 'primaryYAxis':
	                            refreshBounds = this.axisChange(newProp.primaryYAxis);
	                            if (newProp.primaryYAxis.edgeLabelPlacement) {
	                                renderer = true;
	                            }
	                            if (!newProp.primaryYAxis.crosshairTooltip) {
	                                refreshBounds = true;
	                            }
	                            break;
	                        case 'height':
	                        case 'width':
	                            this.createChartSvg();
	                            refreshBounds = true;
	                            break;
	                        case 'title':
	                            if (newProp.title === '' || oldProp.title === '') {
	                                refreshBounds = true;
	                            }
	                            else {
	                                renderer = true;
	                            }
	                            break;
	                        case 'titleStyle':
	                            if (newProp.titleStyle && newProp.titleStyle.size) {
	                                refreshBounds = true;
	                            }
	                            else {
	                                renderer = true;
	                            }
	                            break;
	                        case 'border':
	                            renderer = true;
	                            break;
	                        case 'background':
	                            renderer = true;
	                            break;
	                        case 'chartArea':
	                            if (newProp.chartArea.border && newProp.chartArea.border.width) {
	                                refreshBounds = true;
	                            }
	                            renderer = true;
	                            break;
	                        case 'legendSettings':
	                            if (!newProp.legendSettings.background || !newProp.legendSettings.opacity) {
	                                refreshBounds = true;
	                            }
	                            renderer = true;
	                            break;
	                        case 'palettes':
	                            this.calculateVisibleSeries();
	                            renderer = true;
	                            break;
	                        case 'selectedDataIndexes':
	                        case 'selectionMode':
	                            if (this.selectionModule && newProp.selectionMode && newProp.selectionMode.indexOf('Drag') === -1) {
	                                this.selectionModule.redrawSelection(this, oldProp.selectionMode);
	                            }
	                            break;
	                        case 'isMultiSelect':
	                            if (this.selectionModule && !newProp.isMultiSelect && this.selectionModule.selectedDataIndexes.length > 1) {
	                                this.selectionModule.redrawSelection(this, oldProp.selectionMode);
	                            }
	                            break;
	                        case 'theme':
	                            this.animateSeries = true;
	                            break;
	                    }
	                }
	                if (!refreshBounds && renderer) {
	                    this.removeSvg();
	                    this.renderElements();
	                }
	                if (refreshBounds) {
	                    this.removeSvg();
	                    this.refreshAxis();
	                    this.refreshBound();
	                }
	            }
	        };
	        return Chart;
	    }(ej2_base_1.Component));
	    __decorate([
	        ej2_base_1.Property(null)
	    ], Chart.prototype, "width", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], Chart.prototype, "height", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], Chart.prototype, "title", void 0);
	    __decorate([
	        ej2_base_6.Complex(theme_1.Theme.chartTitleFont, base_1.Font)
	    ], Chart.prototype, "titleStyle", void 0);
	    __decorate([
	        ej2_base_6.Complex({}, base_1.Margin)
	    ], Chart.prototype, "margin", void 0);
	    __decorate([
	        ej2_base_6.Complex({ color: '#DDDDDD', width: 0 }, base_1.Border)
	    ], Chart.prototype, "border", void 0);
	    __decorate([
	        ej2_base_1.Property(theme_1.Theme.chartBackgroundColor)
	    ], Chart.prototype, "background", void 0);
	    __decorate([
	        ej2_base_6.Complex({ border: { color: 'Gray', width: 0.5 }, background: 'transparent' }, base_1.ChartArea)
	    ], Chart.prototype, "chartArea", void 0);
	    __decorate([
	        ej2_base_6.Complex({ name: 'primaryXAxis' }, axis_1.Axis)
	    ], Chart.prototype, "primaryXAxis", void 0);
	    __decorate([
	        ej2_base_6.Complex({ name: 'primaryYAxis' }, axis_1.Axis)
	    ], Chart.prototype, "primaryYAxis", void 0);
	    __decorate([
	        ej2_base_6.Collection([{}], axis_1.Row)
	    ], Chart.prototype, "rows", void 0);
	    __decorate([
	        ej2_base_6.Collection([{}], axis_1.Column)
	    ], Chart.prototype, "columns", void 0);
	    __decorate([
	        ej2_base_6.Collection([{}], axis_1.Axis)
	    ], Chart.prototype, "axes", void 0);
	    __decorate([
	        ej2_base_6.Collection([{}], chart_series_1.Series)
	    ], Chart.prototype, "series", void 0);
	    __decorate([
	        ej2_base_6.Collection([{}], chart_base_1.ChartAnnotationSettings)
	    ], Chart.prototype, "annotations", void 0);
	    __decorate([
	        ej2_base_1.Property([])
	    ], Chart.prototype, "palettes", void 0);
	    __decorate([
	        ej2_base_1.Property('Material')
	    ], Chart.prototype, "theme", void 0);
	    __decorate([
	        ej2_base_6.Complex({}, TooltipSettings)
	    ], Chart.prototype, "tooltip", void 0);
	    __decorate([
	        ej2_base_6.Complex({}, CrosshairSettings)
	    ], Chart.prototype, "crosshair", void 0);
	    __decorate([
	        ej2_base_6.Complex({}, legend_1.LegendSettings)
	    ], Chart.prototype, "legendSettings", void 0);
	    __decorate([
	        ej2_base_6.Complex({}, ZoomSettings)
	    ], Chart.prototype, "zoomSettings", void 0);
	    __decorate([
	        ej2_base_1.Property('None')
	    ], Chart.prototype, "selectionMode", void 0);
	    __decorate([
	        ej2_base_1.Property(false)
	    ], Chart.prototype, "isMultiSelect", void 0);
	    __decorate([
	        ej2_base_6.Collection([], base_1.Indexes)
	    ], Chart.prototype, "selectedDataIndexes", void 0);
	    __decorate([
	        ej2_base_1.Property(false)
	    ], Chart.prototype, "useGroupingSeparator", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], Chart.prototype, "description", void 0);
	    __decorate([
	        ej2_base_1.Property(1)
	    ], Chart.prototype, "tabIndex", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "annotationRender", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "loaded", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "load", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "animationComplete", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "legendRender", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "textRender", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "pointRender", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "seriesRender", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "axisLabelRender", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "tooltipRender", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "chartMouseMove", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "chartMouseClick", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "chartMouseLeave", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "chartMouseDown", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "chartMouseUp", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "dragComplete", void 0);
	    __decorate([
	        ej2_base_6.Event()
	    ], Chart.prototype, "zoomComplete", void 0);
	    Chart = __decorate([
	        ej2_base_1.NotifyPropertyChanges
	    ], Chart);
	    exports.Chart = Chart;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var Font = (function (_super) {
	        __extends(Font, _super);
	        function Font() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return Font;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property('16px')
	    ], Font.prototype, "size", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], Font.prototype, "color", void 0);
	    __decorate([
	        ej2_base_1.Property('Segoe UI')
	    ], Font.prototype, "fontFamily", void 0);
	    __decorate([
	        ej2_base_1.Property('Regular')
	    ], Font.prototype, "fontWeight", void 0);
	    __decorate([
	        ej2_base_1.Property('Normal')
	    ], Font.prototype, "fontStyle", void 0);
	    __decorate([
	        ej2_base_1.Property(1)
	    ], Font.prototype, "opacity", void 0);
	    exports.Font = Font;
	    var Border = (function (_super) {
	        __extends(Border, _super);
	        function Border() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return Border;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property('')
	    ], Border.prototype, "color", void 0);
	    __decorate([
	        ej2_base_1.Property(1)
	    ], Border.prototype, "width", void 0);
	    exports.Border = Border;
	    var ChartArea = (function (_super) {
	        __extends(ChartArea, _super);
	        function ChartArea() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return ChartArea;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Complex({}, Border)
	    ], ChartArea.prototype, "border", void 0);
	    __decorate([
	        ej2_base_1.Property('transparent')
	    ], ChartArea.prototype, "background", void 0);
	    __decorate([
	        ej2_base_1.Property(1)
	    ], ChartArea.prototype, "opacity", void 0);
	    exports.ChartArea = ChartArea;
	    var Margin = (function (_super) {
	        __extends(Margin, _super);
	        function Margin() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return Margin;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(10)
	    ], Margin.prototype, "left", void 0);
	    __decorate([
	        ej2_base_1.Property(10)
	    ], Margin.prototype, "right", void 0);
	    __decorate([
	        ej2_base_1.Property(10)
	    ], Margin.prototype, "top", void 0);
	    __decorate([
	        ej2_base_1.Property(10)
	    ], Margin.prototype, "bottom", void 0);
	    exports.Margin = Margin;
	    var Animation = (function (_super) {
	        __extends(Animation, _super);
	        function Animation() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return Animation;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(true)
	    ], Animation.prototype, "enable", void 0);
	    __decorate([
	        ej2_base_1.Property(1000)
	    ], Animation.prototype, "duration", void 0);
	    __decorate([
	        ej2_base_1.Property(0)
	    ], Animation.prototype, "delay", void 0);
	    exports.Animation = Animation;
	    var Indexes = (function (_super) {
	        __extends(Indexes, _super);
	        function Indexes() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return Indexes;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(0)
	    ], Indexes.prototype, "series", void 0);
	    __decorate([
	        ej2_base_1.Property(0)
	    ], Indexes.prototype, "point", void 0);
	    exports.Indexes = Indexes;
	    var Index = (function () {
	        function Index(seriesIndex, pointIndex) {
	            this.series = seriesIndex;
	            this.point = pointIndex;
	        }
	        return Index;
	    }());
	    exports.Index = Index;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var Theme;
	    (function (Theme) {
	        Theme.axisLabelFont = {
	            size: '12px',
	            fontWeight: 'Regular',
	            color: '#686868',
	            fontStyle: 'Normal',
	            fontFamily: 'Segoe UI'
	        };
	        Theme.axisTitleFont = {
	            size: '14px',
	            fontWeight: 'Regular',
	            color: '#424242',
	            fontStyle: 'Normal',
	            fontFamily: 'Segoe UI'
	        };
	        Theme.chartTitleFont = {
	            size: '15px',
	            fontWeight: '500',
	            color: '#424242',
	            fontStyle: 'Normal',
	            fontFamily: 'Segoe UI'
	        };
	        Theme.crosshairLabelFont = {
	            size: '13px',
	            fontWeight: 'Regular',
	            color: '#e5e5e5',
	            fontStyle: 'Normal',
	            fontFamily: 'Segoe UI'
	        };
	        Theme.tooltipLabelFont = {
	            size: '13px',
	            fontWeight: 'Regular',
	            color: null,
	            fontStyle: 'Normal',
	            fontFamily: 'Segoe UI'
	        };
	        Theme.legendLabelFont = {
	            size: '13px',
	            fontWeight: 'Regular',
	            color: '#353535',
	            fontStyle: 'Normal',
	            fontFamily: 'Segoe UI'
	        };
	        Theme.axisLineColor = '#b5b5b5';
	        Theme.axisMajorGridLineColor = '#dbdbdb';
	        Theme.axisMinorGridLineColor = '#eaeaea';
	        Theme.axisMajorTickLineColor = '#b5b5b5';
	        Theme.axisMinorTickLineColor = '#d6d6d6';
	        Theme.crossHairLabelColor = '#4f4f4f';
	        Theme.chartBackgroundColor = '#FFFFFF';
	        Theme.selectionRectFill = 'rgba(41, 171, 226, 0.1)';
	        Theme.selectionRectStroke = '#29abe2';
	    })(Theme = exports.Theme || (exports.Theme = {}));
	    function getSeriesColor(theme) {
	        var palette;
	        switch (theme) {
	            case 'Material':
	                palette = ['#00bdae', '#404041', '#357cd2', '#e56590', '#f8b883',
	                    '#70ad47', '#dd8abd', '#7f84e8', '#7bb4eb', '#ea7a57'];
	                break;
	            case 'Fabric':
	                palette = ['#4472c4', '#ed7d31', '#ffc000', '#70ad47', '#5b9bd5',
	                    '#c1c1c1', '#6f6fe2', '#e269ae', '#9e480e', '#997300'];
	                break;
	        }
	        return palette;
	    }
	    exports.getSeriesColor = getSeriesColor;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(7), __webpack_require__(3), __webpack_require__(10), __webpack_require__(11), __webpack_require__(8), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, base_1, helper_1, double_range_1, double_axis_1, theme_1, constants_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var axisPadding = 10;
	    var Row = (function (_super) {
	        __extends(Row, _super);
	        function Row() {
	            var _this = _super !== null && _super.apply(this, arguments) || this;
	            _this.axes = [];
	            _this.nearSizes = [];
	            _this.farSizes = [];
	            return _this;
	        }
	        Row.prototype.computeSize = function (axis, clipRect) {
	            var titleSize = 0;
	            var width = 0;
	            var innerPadding = 5;
	            if (axis.title) {
	                titleSize = helper_1.measureText(axis.title, axis.titleStyle).height + innerPadding;
	            }
	            width += (titleSize + axis.majorTickLines.height + axis.maxLabelSize.width + innerPadding + axisPadding + axis.lineStyle.width / 2);
	            if (axis.opposedPosition) {
	                this.farSizes.push(width);
	            }
	            else {
	                this.nearSizes.push(width);
	            }
	        };
	        return Row;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property('100%')
	    ], Row.prototype, "height", void 0);
	    __decorate([
	        ej2_base_1.Complex({}, base_1.Border)
	    ], Row.prototype, "border", void 0);
	    exports.Row = Row;
	    var Column = (function (_super) {
	        __extends(Column, _super);
	        function Column() {
	            var _this = _super !== null && _super.apply(this, arguments) || this;
	            _this.axes = [];
	            _this.nearSizes = [];
	            _this.farSizes = [];
	            _this.padding = 0;
	            return _this;
	        }
	        Column.prototype.computeSize = function (axis, clipRect) {
	            var titleSize = 0;
	            var height = 0;
	            var innerPadding = 5;
	            if (axis.title) {
	                titleSize = helper_1.measureText(axis.title, axis.titleStyle).height + innerPadding;
	            }
	            height += (titleSize + axis.majorTickLines.height + axis.maxLabelSize.height + innerPadding + axisPadding
	                + axis.lineStyle.width / 2);
	            if (axis.opposedPosition) {
	                this.farSizes.push(height);
	            }
	            else {
	                this.nearSizes.push(height);
	            }
	        };
	        return Column;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property('100%')
	    ], Column.prototype, "width", void 0);
	    __decorate([
	        ej2_base_1.Complex({}, base_1.Border)
	    ], Column.prototype, "border", void 0);
	    exports.Column = Column;
	    var MajorGridLines = (function (_super) {
	        __extends(MajorGridLines, _super);
	        function MajorGridLines() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return MajorGridLines;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(1)
	    ], MajorGridLines.prototype, "width", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], MajorGridLines.prototype, "dashArray", void 0);
	    __decorate([
	        ej2_base_1.Property(theme_1.Theme.axisMajorGridLineColor)
	    ], MajorGridLines.prototype, "color", void 0);
	    exports.MajorGridLines = MajorGridLines;
	    var MinorGridLines = (function (_super) {
	        __extends(MinorGridLines, _super);
	        function MinorGridLines() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return MinorGridLines;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(0.7)
	    ], MinorGridLines.prototype, "width", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], MinorGridLines.prototype, "dashArray", void 0);
	    __decorate([
	        ej2_base_1.Property(theme_1.Theme.axisMinorGridLineColor)
	    ], MinorGridLines.prototype, "color", void 0);
	    exports.MinorGridLines = MinorGridLines;
	    var AxisLine = (function (_super) {
	        __extends(AxisLine, _super);
	        function AxisLine() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return AxisLine;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(1)
	    ], AxisLine.prototype, "width", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], AxisLine.prototype, "dashArray", void 0);
	    __decorate([
	        ej2_base_1.Property(theme_1.Theme.axisLineColor)
	    ], AxisLine.prototype, "color", void 0);
	    exports.AxisLine = AxisLine;
	    var MajorTickLines = (function (_super) {
	        __extends(MajorTickLines, _super);
	        function MajorTickLines() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return MajorTickLines;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(1)
	    ], MajorTickLines.prototype, "width", void 0);
	    __decorate([
	        ej2_base_1.Property(5)
	    ], MajorTickLines.prototype, "height", void 0);
	    __decorate([
	        ej2_base_1.Property(theme_1.Theme.axisMajorTickLineColor)
	    ], MajorTickLines.prototype, "color", void 0);
	    exports.MajorTickLines = MajorTickLines;
	    var MinorTickLines = (function (_super) {
	        __extends(MinorTickLines, _super);
	        function MinorTickLines() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return MinorTickLines;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(0.7)
	    ], MinorTickLines.prototype, "width", void 0);
	    __decorate([
	        ej2_base_1.Property(5)
	    ], MinorTickLines.prototype, "height", void 0);
	    __decorate([
	        ej2_base_1.Property(theme_1.Theme.axisMinorTickLineColor)
	    ], MinorTickLines.prototype, "color", void 0);
	    exports.MinorTickLines = MinorTickLines;
	    var CrosshairTooltip = (function (_super) {
	        __extends(CrosshairTooltip, _super);
	        function CrosshairTooltip() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return CrosshairTooltip;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(false)
	    ], CrosshairTooltip.prototype, "enable", void 0);
	    __decorate([
	        ej2_base_1.Property(theme_1.Theme.crossHairLabelColor)
	    ], CrosshairTooltip.prototype, "fill", void 0);
	    __decorate([
	        ej2_base_1.Complex(theme_1.Theme.crosshairLabelFont, base_1.Font)
	    ], CrosshairTooltip.prototype, "textStyle", void 0);
	    exports.CrosshairTooltip = CrosshairTooltip;
	    var Axis = (function (_super) {
	        __extends(Axis, _super);
	        function Axis() {
	            var _this = _super !== null && _super.apply(this, arguments) || this;
	            _this.visibleLabels = [];
	            _this.series = [];
	            _this.rect = new helper_1.Rect(undefined, undefined, 0, 0);
	            _this.axisBottomLine = null;
	            _this.intervalDivs = [10, 5, 2, 1];
	            _this.angle = _this.labelRotation;
	            _this.isStack100 = false;
	            return _this;
	        }
	        Axis.prototype.setRange = function () {
	            if (this.minimum != null && this.maximum != null) {
	                return true;
	            }
	            return false;
	        };
	        Axis.prototype.calculateVisibleRange = function (size) {
	            if (this.zoomFactor < 1 || this.zoomPosition > 0) {
	                var baseRange = this.actualRange;
	                var start = this.actualRange.min + this.zoomPosition * this.actualRange.delta;
	                var end = start + this.zoomFactor * this.actualRange.delta;
	                if (start < baseRange.min) {
	                    end = end + (baseRange.min - start);
	                    start = baseRange.min;
	                }
	                if (end > baseRange.max) {
	                    start = start - (end - baseRange.max);
	                    end = baseRange.max;
	                }
	                this.doubleRange = new double_range_1.DoubleRange(start, end);
	                this.visibleRange.min = this.doubleRange.start;
	                this.visibleRange.max = this.doubleRange.end;
	                this.visibleRange.delta = this.doubleRange.delta;
	            }
	        };
	        Axis.prototype.getActualDesiredIntervalsCount = function (availableSize) {
	            var size = this.orientation === 'Horizontal' ? availableSize.width : availableSize.height;
	            if (this.desiredIntervals === null) {
	                var desiredIntervalsCount = (this.orientation === 'Horizontal' ? 0.533 : 1) * this.maximumLabels;
	                desiredIntervalsCount = Math.max((size * (desiredIntervalsCount / 100)), 1);
	                return desiredIntervalsCount;
	            }
	            else {
	                return this.desiredIntervals;
	            }
	        };
	        Axis.prototype.triggerLabelRender = function (chart, tempInterval, text) {
	            var argsData;
	            argsData = {
	                cancel: false, name: constants_1.axisLabelRender, axis: this,
	                text: text, value: tempInterval
	            };
	            chart.trigger(constants_1.axisLabelRender, argsData);
	            if (!argsData.cancel) {
	                this.visibleLabels.push(new VisibleLabels(argsData.text, argsData.value));
	            }
	        };
	        Axis.prototype.getRangePadding = function (chart) {
	            var padding = this.rangePadding;
	            if (padding !== 'Auto') {
	                return padding;
	            }
	            switch (this.orientation) {
	                case 'Horizontal':
	                    if (chart.requireInvertedAxis) {
	                        padding = (this.isStack100 ? 'Round' : 'Normal');
	                    }
	                    else {
	                        padding = 'None';
	                    }
	                    break;
	                case 'Vertical':
	                    if (!chart.requireInvertedAxis) {
	                        padding = (this.isStack100 ? 'Round' : 'Normal');
	                    }
	                    else {
	                        padding = 'None';
	                    }
	                    break;
	            }
	            return padding;
	        };
	        Axis.prototype.getMaxLabelWidth = function (chart) {
	            var prevSize = new helper_1.Size(0, 0);
	            var rotatedLabel;
	            var pointX;
	            var previousEnd = 0;
	            var isIntersect = false;
	            this.angle = this.labelRotation;
	            this.maxLabelSize = new helper_1.Size(0, 0);
	            var label;
	            for (var i = 0; i < this.visibleLabels.length; i++) {
	                label = this.visibleLabels[i];
	                label.size = helper_1.measureText(label.text, this.labelStyle);
	                if (label.size.width > this.maxLabelSize.width) {
	                    this.maxLabelSize.width = label.size.width;
	                    this.rotatedLabel = label.text;
	                }
	                if (label.size.height > this.maxLabelSize.height) {
	                    this.maxLabelSize.height = label.size.height;
	                }
	                if (this.angle % 360 === 0 && this.orientation === 'Horizontal' && this.rect.width > 0 && !isIntersect &&
	                    (this.labelIntersectAction === 'Rotate90' || this.labelIntersectAction === 'Rotate45')) {
	                    pointX = (helper_1.valueToCoefficient(label.value, this) * this.rect.width) + this.rect.x;
	                    pointX -= label.size.width / 2;
	                    if (this.edgeLabelPlacement === 'Shift') {
	                        if (i === 0 && pointX < this.rect.x) {
	                            pointX = this.rect.x;
	                        }
	                        if (i === this.visibleLabels.length - 1 && ((pointX + label.size.width) > (this.rect.x + this.rect.width))) {
	                            pointX = this.rect.x + this.rect.width - label.size.width;
	                        }
	                    }
	                    if (pointX <= previousEnd) {
	                        this.angle = (this.labelIntersectAction === 'Rotate45') ? 45 : 90;
	                        isIntersect = true;
	                    }
	                    previousEnd = pointX + label.size.width;
	                }
	            }
	            if (this.angle !== 0) {
	                this.maxLabelSize = helper_1.rotateTextSize(this.labelStyle, this.rotatedLabel, this.angle, chart);
	            }
	        };
	        Axis.prototype.getModule = function (chart) {
	            if (this.valueType === 'Double') {
	                this.baseModule = new double_axis_1.Double(chart);
	            }
	            else {
	                this.baseModule = chart[helper_1.firstToLowerCase(this.valueType) + 'Module'];
	            }
	        };
	        return Axis;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Complex(theme_1.Theme.axisLabelFont, base_1.Font)
	    ], Axis.prototype, "labelStyle", void 0);
	    __decorate([
	        ej2_base_1.Complex({}, CrosshairTooltip)
	    ], Axis.prototype, "crosshairTooltip", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], Axis.prototype, "title", void 0);
	    __decorate([
	        ej2_base_1.Complex(theme_1.Theme.axisTitleFont, base_1.Font)
	    ], Axis.prototype, "titleStyle", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], Axis.prototype, "labelFormat", void 0);
	    __decorate([
	        ej2_base_1.Property(0)
	    ], Axis.prototype, "plotOffset", void 0);
	    __decorate([
	        ej2_base_1.Property(10)
	    ], Axis.prototype, "logBase", void 0);
	    __decorate([
	        ej2_base_1.Property(0)
	    ], Axis.prototype, "columnIndex", void 0);
	    __decorate([
	        ej2_base_1.Property(0)
	    ], Axis.prototype, "rowIndex", void 0);
	    __decorate([
	        ej2_base_1.Property(1)
	    ], Axis.prototype, "span", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], Axis.prototype, "desiredIntervals", void 0);
	    __decorate([
	        ej2_base_1.Property(3)
	    ], Axis.prototype, "maximumLabels", void 0);
	    __decorate([
	        ej2_base_1.Property(1)
	    ], Axis.prototype, "zoomFactor", void 0);
	    __decorate([
	        ej2_base_1.Property(0)
	    ], Axis.prototype, "zoomPosition", void 0);
	    __decorate([
	        ej2_base_1.Property(false)
	    ], Axis.prototype, "opposedPosition", void 0);
	    __decorate([
	        ej2_base_1.Property(true)
	    ], Axis.prototype, "enableAutoIntervalOnZooming", void 0);
	    __decorate([
	        ej2_base_1.Property('Auto')
	    ], Axis.prototype, "rangePadding", void 0);
	    __decorate([
	        ej2_base_1.Property('Double')
	    ], Axis.prototype, "valueType", void 0);
	    __decorate([
	        ej2_base_1.Property('None')
	    ], Axis.prototype, "edgeLabelPlacement", void 0);
	    __decorate([
	        ej2_base_1.Property('Auto')
	    ], Axis.prototype, "intervalType", void 0);
	    __decorate([
	        ej2_base_1.Property('BetweenTicks')
	    ], Axis.prototype, "labelPlacement", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], Axis.prototype, "name", void 0);
	    __decorate([
	        ej2_base_1.Property(true)
	    ], Axis.prototype, "visible", void 0);
	    __decorate([
	        ej2_base_1.Property(0)
	    ], Axis.prototype, "minorTicksPerInterval", void 0);
	    __decorate([
	        ej2_base_1.Property(0)
	    ], Axis.prototype, "labelRotation", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], Axis.prototype, "minimum", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], Axis.prototype, "maximum", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], Axis.prototype, "interval", void 0);
	    __decorate([
	        ej2_base_1.Complex({}, MajorTickLines)
	    ], Axis.prototype, "majorTickLines", void 0);
	    __decorate([
	        ej2_base_1.Complex({}, MinorTickLines)
	    ], Axis.prototype, "minorTickLines", void 0);
	    __decorate([
	        ej2_base_1.Complex({}, MajorGridLines)
	    ], Axis.prototype, "majorGridLines", void 0);
	    __decorate([
	        ej2_base_1.Complex({}, MinorGridLines)
	    ], Axis.prototype, "minorGridLines", void 0);
	    __decorate([
	        ej2_base_1.Complex({}, AxisLine)
	    ], Axis.prototype, "lineStyle", void 0);
	    __decorate([
	        ej2_base_1.Property('Hide')
	    ], Axis.prototype, "labelIntersectAction", void 0);
	    __decorate([
	        ej2_base_1.Property(false)
	    ], Axis.prototype, "isInversed", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], Axis.prototype, "description", void 0);
	    __decorate([
	        ej2_base_1.Property(2)
	    ], Axis.prototype, "tabIndex", void 0);
	    exports.Axis = Axis;
	    var VisibleLabels = (function () {
	        function VisibleLabels(text, value, size) {
	            if (size === void 0) { size = new helper_1.Size(0, 0); }
	            this.text = text;
	            this.value = value;
	            this.size = size;
	        }
	        return VisibleLabels;
	    }());
	    exports.VisibleLabels = VisibleLabels;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var DoubleRange = (function () {
	        function DoubleRange(start, end) {
	            if (start < end) {
	                this.mStart = start;
	                this.mEnd = end;
	            }
	            else {
	                this.mStart = end;
	                this.mEnd = start;
	            }
	        }
	        Object.defineProperty(DoubleRange.prototype, "start", {
	            get: function () {
	                return this.mStart;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DoubleRange.prototype, "end", {
	            get: function () {
	                return this.mEnd;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DoubleRange.prototype, "delta", {
	            get: function () {
	                return (this.mEnd - this.mStart);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return DoubleRange;
	    }());
	    exports.DoubleRange = DoubleRange;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(10), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, double_range_1, helper_2) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var Double = (function () {
	        function Double(chart) {
	            this.chart = chart;
	        }
	        Double.prototype.calculateNumericNiceInterval = function (axis, delta, size) {
	            var actualDesiredIntervalsCount = axis.getActualDesiredIntervalsCount(size);
	            var niceInterval = delta / actualDesiredIntervalsCount;
	            if (axis.desiredIntervals != null) {
	                return niceInterval;
	            }
	            var minInterval = Math.pow(10, Math.floor(helper_2.logBase(niceInterval, 10)));
	            for (var _i = 0, _a = axis.intervalDivs; _i < _a.length; _i++) {
	                var interval = _a[_i];
	                var currentInterval = minInterval * interval;
	                if (actualDesiredIntervalsCount < (delta / currentInterval)) {
	                    break;
	                }
	                niceInterval = currentInterval;
	            }
	            return niceInterval;
	        };
	        Double.prototype.getActualRange = function (axis, size) {
	            this.initializeDoubleRange(axis);
	            axis.actualRange.interval = axis.interval || this.calculateNumericNiceInterval(axis, axis.doubleRange.delta, size);
	            axis.actualRange.min = axis.doubleRange.start;
	            axis.actualRange.max = axis.doubleRange.end;
	        };
	        Double.prototype.initializeDoubleRange = function (axis) {
	            if (axis.minimum !== null) {
	                this.min = axis.minimum;
	            }
	            else if (this.min === null || this.min === Number.POSITIVE_INFINITY) {
	                this.min = 0;
	            }
	            if (axis.maximum !== null) {
	                this.max = axis.maximum;
	            }
	            else if (this.max === null || this.max === Number.NEGATIVE_INFINITY) {
	                this.max = 5;
	            }
	            if (this.min === this.max) {
	                this.max = this.min + 1;
	            }
	            axis.doubleRange = new double_range_1.DoubleRange(this.min, this.max);
	            axis.actualRange = {};
	        };
	        Double.prototype.calculateRangeAndInterval = function (size, axis) {
	            this.calculateRange(axis, size);
	            this.getActualRange(axis, size);
	            this.applyRangePadding(axis, size);
	            this.calculateVisibleLabels(axis, this.chart);
	        };
	        Double.prototype.calculateRange = function (axis, size) {
	            var series;
	            this.min = null;
	            this.max = null;
	            if (!axis.setRange()) {
	                for (var _i = 0, _a = axis.series; _i < _a.length; _i++) {
	                    var series_1 = _a[_i];
	                    if (!series_1.visible) {
	                        continue;
	                    }
	                    this.paddingInterval = 0;
	                    if ((series_1.type.indexOf('Column') > -1 && axis.orientation === 'Horizontal')
	                        || (series_1.type.indexOf('Bar') > -1 && axis.orientation === 'Vertical')) {
	                        if ((series_1.xAxis.valueType === 'Double' || series_1.xAxis.valueType === 'DateTime')
	                            && series_1.xAxis.rangePadding === 'Auto') {
	                            this.paddingInterval = helper_1.getMinPointsDelta(series_1.xAxis, axis.series) / 2;
	                        }
	                    }
	                    if (axis.orientation === 'Horizontal') {
	                        if (this.chart.requireInvertedAxis) {
	                            this.findMinMax(series_1.yMin, series_1.yMax);
	                        }
	                        else {
	                            this.findMinMax(series_1.xMin - this.paddingInterval, series_1.xMax + this.paddingInterval);
	                        }
	                    }
	                    if (axis.orientation === 'Vertical') {
	                        if (this.chart.requireInvertedAxis) {
	                            this.findMinMax(series_1.xMin - this.paddingInterval, series_1.xMax + this.paddingInterval);
	                        }
	                        else {
	                            this.findMinMax(series_1.yMin, series_1.yMax);
	                        }
	                    }
	                }
	            }
	        };
	        Double.prototype.findMinMax = function (min, max) {
	            if (this.min === null || this.min > min) {
	                this.min = min;
	            }
	            if (this.max === null || this.max < max) {
	                this.max = max;
	            }
	        };
	        Double.prototype.applyRangePadding = function (axis, size) {
	            var range;
	            var start = axis.actualRange.min;
	            var end = axis.actualRange.max;
	            if (!axis.setRange()) {
	                var interval = axis.actualRange.interval;
	                var padding = axis.getRangePadding(this.chart);
	                if (padding === 'Additional' || padding === 'Round') {
	                    this.findAdditional(axis, start, end, interval);
	                }
	                else if (padding === 'Normal') {
	                    this.findNormal(axis, start, end, interval, size);
	                }
	                else {
	                    this.updateActualRange(axis, start, end, interval);
	                }
	            }
	            axis.actualRange.delta = axis.actualRange.max - axis.actualRange.min;
	            this.calculateVisibleRange(size, axis);
	        };
	        Double.prototype.updateActualRange = function (axis, minimum, maximum, interval) {
	            axis.actualRange.min = axis.minimum != null ? axis.minimum : minimum;
	            axis.actualRange.max = axis.maximum != null ? axis.maximum : maximum;
	            axis.actualRange.interval = axis.interval != null ? axis.interval : interval;
	        };
	        Double.prototype.findAdditional = function (axis, start, end, interval) {
	            var minimum;
	            var maximum;
	            minimum = Math.floor(start / interval) * interval;
	            maximum = Math.ceil(end / interval) * interval;
	            if (axis.rangePadding === 'Additional') {
	                minimum -= interval;
	                maximum += interval;
	            }
	            this.updateActualRange(axis, minimum, maximum, interval);
	        };
	        Double.prototype.findNormal = function (axis, start, end, interval, size) {
	            var remaining;
	            var minimum;
	            var maximum;
	            var startValue = start;
	            if (start < 0) {
	                startValue = 0;
	                minimum = start + (start / 20);
	                remaining = interval + (minimum % interval);
	                if ((0.365 * interval) >= remaining) {
	                    minimum -= interval;
	                }
	                if (minimum % interval < 0) {
	                    minimum = (minimum - interval) - (minimum % interval);
	                }
	            }
	            else {
	                minimum = start < ((5.0 / 6.0) * end) ? 0 : (start - (end - start) / 2);
	                if (minimum % interval > 0) {
	                    minimum -= (minimum % interval);
	                }
	            }
	            maximum = (end > 0) ? (end + (end - startValue) / 20) : (end - (end - startValue) / 20);
	            remaining = interval - (maximum % interval);
	            if ((0.365 * interval) >= remaining) {
	                maximum += interval;
	            }
	            if (maximum % interval > 0) {
	                maximum = (maximum + interval) - (maximum % interval);
	            }
	            axis.doubleRange = new double_range_1.DoubleRange(minimum, maximum);
	            if (minimum === 0) {
	                interval = this.calculateNumericNiceInterval(axis, axis.doubleRange.delta, size);
	                maximum = Math.ceil(maximum / interval) * interval;
	            }
	            this.updateActualRange(axis, minimum, maximum, interval);
	        };
	        Double.prototype.calculateVisibleRange = function (size, axis) {
	            axis.visibleRange = axis.actualRange;
	            if (axis.zoomFactor < 1 || axis.zoomPosition > 0) {
	                axis.calculateVisibleRange(size);
	                axis.visibleRange.interval = (axis.enableAutoIntervalOnZooming && axis.valueType !== 'Category') ?
	                    this.calculateNumericNiceInterval(axis, axis.doubleRange.delta, size)
	                    : axis.visibleRange.interval;
	            }
	        };
	        Double.prototype.calculateVisibleLabels = function (axis, chart) {
	            axis.visibleLabels = [];
	            var tempInterval = axis.visibleRange.min;
	            if (axis.zoomFactor < 1 || axis.zoomPosition > 0 || this.paddingInterval) {
	                tempInterval = axis.visibleRange.min - (axis.visibleRange.min % axis.visibleRange.interval);
	            }
	            var format = this.getFormat(axis);
	            var isCustom = format.match('{value}') !== null;
	            axis.format = chart.intl.getNumberFormat({ format: isCustom ? '' : format,
	                useGrouping: chart.useGroupingSeparator });
	            axis.startLabel = axis.format(axis.visibleRange.min);
	            axis.endLabel = axis.format(axis.visibleRange.max);
	            for (; tempInterval <= axis.visibleRange.max; tempInterval += axis.visibleRange.interval) {
	                if (helper_2.withIn(tempInterval, axis.visibleRange)) {
	                    axis.triggerLabelRender(chart, tempInterval, this.formatValue(axis, isCustom, format, tempInterval));
	                }
	            }
	            axis.getMaxLabelWidth(chart);
	        };
	        Double.prototype.getFormat = function (axis) {
	            if (axis.labelFormat) {
	                return axis.labelFormat;
	            }
	            return axis.isStack100 ? '{value}%' : '';
	        };
	        Double.prototype.formatValue = function (axis, isCustom, format, tempInterval) {
	            return isCustom ? format.replace('{value}', axis.format(tempInterval))
	                : axis.format(tempInterval);
	        };
	        return Double;
	    }());
	    exports.Double = Double;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    exports.loaded = 'loaded';
	    exports.load = 'load';
	    exports.animationComplete = 'animationComplete';
	    exports.legendRender = 'legendRender';
	    exports.textRender = 'textRender';
	    exports.pointRender = 'pointRender';
	    exports.seriesRender = 'seriesRender';
	    exports.axisLabelRender = 'axisLabelRender';
	    exports.tooltipRender = 'tooltipRender';
	    exports.chartMouseMove = 'chartMouseMove';
	    exports.chartMouseClick = 'chartMouseClick';
	    exports.chartMouseLeave = 'chartMouseLeave';
	    exports.chartMouseDown = 'chartMouseDown';
	    exports.chartMouseUp = 'chartMouseUp';
	    exports.zoomComplete = 'zoomComplete';
	    exports.dragComplete = 'dragComplete';
	    exports.resized = 'resized';
	    exports.annotationRender = 'annotationRender';
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(3), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, helper_2, helper_3) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var axisPadding = 10;
	    var CartesianAxisLayoutPanel = (function () {
	        function CartesianAxisLayoutPanel(chartModule) {
	            this.chart = chartModule;
	            this.padding = 5;
	        }
	        CartesianAxisLayoutPanel.prototype.measureAxis = function (rect) {
	            var chart = this.chart;
	            this.seriesClipRect = new helper_2.Rect(rect.x, rect.y, rect.width, rect.height);
	            this.initialClipRect = rect;
	            this.leftSize = 0;
	            this.rightSize = 0;
	            this.topSize = 0;
	            this.bottomSize = 0;
	            this.measureRowAxis(chart, this.initialClipRect);
	            this.initialClipRect = helper_1.subtractThickness(this.initialClipRect, new helper_2.Thickness(this.leftSize, this.rightSize, 0, 0));
	            this.measureColumnAxis(chart, this.initialClipRect);
	            this.initialClipRect = helper_1.subtractThickness(this.initialClipRect, new helper_2.Thickness(0, 0, this.topSize, this.bottomSize));
	            if (!this.chart.delayRedraw) {
	                this.calculateAxisSize(this.initialClipRect);
	            }
	            this.leftSize = 0;
	            this.rightSize = 0;
	            this.topSize = 0;
	            this.bottomSize = 0;
	            this.measureRowAxis(chart, this.initialClipRect);
	            this.seriesClipRect = helper_1.subtractThickness(this.seriesClipRect, new helper_2.Thickness(this.leftSize, this.rightSize, 0, 0));
	            this.measureColumnAxis(chart, this.initialClipRect);
	            this.seriesClipRect = helper_1.subtractThickness(this.seriesClipRect, new helper_2.Thickness(0, 0, this.topSize, this.bottomSize));
	            if (!this.chart.delayRedraw) {
	                chart.refreshAxis();
	                this.calculateAxisSize(this.seriesClipRect);
	            }
	        };
	        CartesianAxisLayoutPanel.prototype.measureRowAxis = function (chart, rect) {
	            var row;
	            this.calculateRowSize(rect);
	            for (var _i = 0, _a = chart.rows; _i < _a.length; _i++) {
	                var item = _a[_i];
	                row = item;
	                row.nearSizes = [];
	                row.farSizes = [];
	                this.arrangeAxis(row);
	                this.measureDefinition(row, chart, new helper_2.Size(chart.availableSize.width, row.computedHeight), rect);
	                if (this.leftSize < helper_1.sum(row.nearSizes)) {
	                    this.leftSize = helper_1.sum(row.nearSizes);
	                }
	                if (this.rightSize < helper_1.sum(row.farSizes)) {
	                    this.rightSize = helper_1.sum(row.farSizes);
	                }
	            }
	        };
	        CartesianAxisLayoutPanel.prototype.measureColumnAxis = function (chart, rect) {
	            var column;
	            this.calculateColumnSize(rect);
	            for (var _i = 0, _a = chart.columns; _i < _a.length; _i++) {
	                var item = _a[_i];
	                column = item;
	                column.farSizes = [];
	                column.nearSizes = [];
	                this.arrangeAxis(column);
	                this.measureDefinition(column, chart, new helper_2.Size(column.computedWidth, chart.availableSize.height), rect);
	                if (this.bottomSize < helper_1.sum(column.nearSizes)) {
	                    this.bottomSize = helper_1.sum(column.nearSizes);
	                }
	                if (this.topSize < helper_1.sum(column.farSizes)) {
	                    this.topSize = helper_1.sum(column.farSizes);
	                }
	            }
	        };
	        CartesianAxisLayoutPanel.prototype.measureDefinition = function (definition, chart, size, clipRect) {
	            var axis;
	            var axisType;
	            for (var _i = 0, _a = definition.axes; _i < _a.length; _i++) {
	                var axis_1 = _a[_i];
	                axis_1.getModule(chart);
	                axis_1.baseModule.calculateRangeAndInterval(size, axis_1);
	                definition.computeSize(axis_1, clipRect);
	            }
	            if (definition.farSizes.length > 0) {
	                definition.farSizes[definition.farSizes.length - 1] -= axisPadding;
	            }
	            if (definition.nearSizes.length > 0) {
	                definition.nearSizes[definition.nearSizes.length - 1] -= axisPadding;
	            }
	        };
	        CartesianAxisLayoutPanel.prototype.calculateAxisSize = function (rect) {
	            var chart = this.chart;
	            var row;
	            var column;
	            var definition;
	            var axis;
	            var nearCount = 0;
	            var farCount = 0;
	            var size = 0;
	            var x;
	            var y;
	            this.calculateRowSize(rect);
	            for (var i = 0, len = chart.rows.length; i < len; i++) {
	                row = chart.rows[i];
	                nearCount = 0;
	                farCount = 0;
	                for (var j = 0, len_1 = row.axes.length; j < len_1; j++) {
	                    axis = row.axes[j];
	                    if (axis.rect.height === 0) {
	                        axis.rect.height = row.computedHeight;
	                        size = 0;
	                        for (var k = i + 1, len_2 = i + axis.span; k < len_2; k++) {
	                            definition = chart.rows[k];
	                            size += definition.computedHeight;
	                        }
	                        axis.rect.y = (row.computedTop - size) + axis.plotOffset;
	                        axis.rect.height = (axis.rect.height + size) - (2 * axis.plotOffset);
	                        axis.rect.width = 0;
	                    }
	                    if (axis.opposedPosition) {
	                        x = rect.x + rect.width + helper_1.sum(helper_1.subArray(row.farSizes, farCount));
	                        axis.rect.x = axis.rect.x >= x ? axis.rect.x : x;
	                        farCount++;
	                    }
	                    else {
	                        x = rect.x - helper_1.sum(helper_1.subArray(row.nearSizes, nearCount));
	                        axis.rect.x = axis.rect.x <= x ? axis.rect.x : x;
	                        nearCount++;
	                    }
	                }
	            }
	            this.calculateColumnSize(rect);
	            for (var i = 0, len = chart.columns.length; i < len; i++) {
	                column = chart.columns[i];
	                nearCount = 0;
	                farCount = 0;
	                for (var j = 0, len_3 = column.axes.length; j < len_3; j++) {
	                    axis = column.axes[j];
	                    if (axis.rect.width === 0) {
	                        for (var k = i, len_4 = (i + axis.span); k < len_4; k++) {
	                            definition = chart.columns[k];
	                            axis.rect.width += definition.computedWidth;
	                        }
	                        axis.rect.x = column.computedLeft + axis.plotOffset;
	                        axis.rect.width -= (2 * axis.plotOffset);
	                        axis.rect.height = 0;
	                    }
	                    if (axis.opposedPosition) {
	                        y = rect.y - helper_1.sum(helper_1.subArray(column.farSizes, farCount));
	                        axis.rect.y = axis.rect.y <= y ? axis.rect.y : y;
	                        farCount++;
	                    }
	                    else {
	                        y = rect.y + rect.height + helper_1.sum(helper_1.subArray(column.nearSizes, nearCount));
	                        axis.rect.y = axis.rect.y >= y ? axis.rect.y : y;
	                        nearCount++;
	                    }
	                }
	            }
	        };
	        CartesianAxisLayoutPanel.prototype.measure = function () {
	            var chart = this.chart;
	            var row;
	            var column;
	            var definition;
	            var axis;
	            var actualIndex;
	            var span;
	            var axisLength;
	            for (var _i = 0, _a = chart.axisCollections; _i < _a.length; _i++) {
	                var axis_2 = _a[_i];
	                if (axis_2.orientation === 'Vertical') {
	                    chart.verticalAxes.push(axis_2);
	                    actualIndex = this.getActualRow(axis_2);
	                    row = chart.rows[actualIndex];
	                    this.pushAxis(row, axis_2);
	                    span = ((actualIndex + axis_2.span) > chart.rows.length ? chart.rows.length : (actualIndex + axis_2.span));
	                    for (var j = actualIndex + 1; j < span; j++) {
	                        definition = chart.rows[j];
	                        definition.axes[row.axes.length - 1] = axis_2;
	                        chart.rows[j] = definition;
	                    }
	                    chart.rows[actualIndex] = row;
	                }
	                else {
	                    chart.horizontalAxes.push(axis_2);
	                    actualIndex = this.getActualColumn(axis_2);
	                    column = chart.columns[actualIndex];
	                    this.pushAxis(column, axis_2);
	                    span = ((actualIndex + axis_2.span) > chart.columns.length ? chart.columns.length : (actualIndex + axis_2.span));
	                    for (var j = actualIndex + 1; j < span; j++) {
	                        definition = chart.columns[j];
	                        definition.axes[column.axes.length - 1] = axis_2;
	                        chart.columns[j] = definition;
	                    }
	                    chart.columns[actualIndex] = column;
	                }
	            }
	        };
	        CartesianAxisLayoutPanel.prototype.pushAxis = function (definition, axis) {
	            for (var i = 0, len = definition.axes.length; i <= len; i++) {
	                if (!definition.axes[i]) {
	                    definition.axes[i] = axis;
	                    break;
	                }
	            }
	        };
	        CartesianAxisLayoutPanel.prototype.arrangeAxis = function (definition) {
	            var axisCollection = [];
	            for (var i = 0, len = definition.axes.length; i <= len; i++) {
	                if (definition.axes[i]) {
	                    axisCollection.push(definition.axes[i]);
	                }
	            }
	            definition.axes = axisCollection;
	        };
	        CartesianAxisLayoutPanel.prototype.getActualColumn = function (axis) {
	            var actualLength = this.chart.columns.length;
	            var pos = axis.columnIndex;
	            var result = pos >= actualLength ? actualLength - 1 : (pos < 0 ? 0 : pos);
	            return result;
	        };
	        CartesianAxisLayoutPanel.prototype.getActualRow = function (axis) {
	            var actualLength = this.chart.rows.length;
	            var pos = axis.rowIndex;
	            var result = pos >= actualLength ? actualLength - 1 : (pos < 0 ? 0 : pos);
	            return result;
	        };
	        CartesianAxisLayoutPanel.prototype.calculateRowSize = function (rect) {
	            var chart = this.chart;
	            var row;
	            var rowTop = rect.y + rect.height;
	            var height = 0;
	            var remainingHeight = Math.max(0, rect.height);
	            for (var i = 0, len = chart.rows.length; i < len; i++) {
	                row = chart.rows[i];
	                if (row.height.indexOf('%') !== -1) {
	                    height = Math.min(remainingHeight, (rect.height * parseInt(row.height, 10) / 100));
	                }
	                else {
	                    height = Math.min(remainingHeight, parseInt(row.height, 10));
	                }
	                height = (i !== (len - 1)) ? height : remainingHeight;
	                row.computedHeight = height;
	                rowTop -= height;
	                row.computedTop = rowTop;
	                remainingHeight -= height;
	            }
	        };
	        CartesianAxisLayoutPanel.prototype.calculateColumnSize = function (rect) {
	            var chart = this.chart;
	            var column;
	            var columnLeft = rect.x;
	            var width = 0;
	            var remainingWidth = Math.max(0, rect.width);
	            for (var i = 0, len = chart.columns.length; i < len; i++) {
	                column = chart.columns[i];
	                if (column.width.indexOf('%') !== -1) {
	                    width = Math.min(remainingWidth, (rect.width * parseInt(column.width, 10) / 100));
	                }
	                else {
	                    width = Math.min(remainingWidth, parseInt(column.width, 10));
	                }
	                width = (i !== (len - 1)) ? width : remainingWidth;
	                column.computedWidth = width;
	                column.computedLeft = columnLeft;
	                columnLeft += width;
	                remainingWidth -= width;
	            }
	        };
	        CartesianAxisLayoutPanel.prototype.renderAxes = function () {
	            var chart = this.chart;
	            var axis;
	            var axisElement = chart.renderer.createGroup({ id: chart.element.id + 'AxisCollection' });
	            var definitionElement = chart.renderer.createGroup({ id: chart.element.id + 'DefintionLine' });
	            for (var i = 0, len = chart.axisCollections.length; i < len; i++) {
	                axis = chart.axisCollections[i];
	                this.element = chart.renderer.createGroup({ id: chart.element.id + 'AxisGroup' + i });
	                if (axis.orientation === 'Horizontal') {
	                    if (axis.lineStyle.width > 0) {
	                        this.drawAxisLine(axis, i, axis.plotOffset, 0);
	                    }
	                    if (axis.majorGridLines.width > 0 || axis.majorTickLines.width > 0) {
	                        this.drawXAxisGridLine(axis, i);
	                    }
	                    if (axis.visible) {
	                        this.drawXAxisLabels(axis, i);
	                    }
	                    this.drawXAxisTitle(axis, i);
	                }
	                else {
	                    if (axis.lineStyle.width > 0) {
	                        this.drawAxisLine(axis, i, 0, axis.plotOffset);
	                    }
	                    if (axis.majorGridLines.width > 0 || axis.majorTickLines.width > 0) {
	                        this.drawYAxisGridLine(axis, i);
	                    }
	                    if (axis.visible) {
	                        this.drawYAxisLabels(axis, i);
	                    }
	                    this.drawYAxisTitle(axis, i);
	                }
	                axisElement.appendChild(this.element);
	            }
	            this.element = chart.renderer.createGroup({ id: chart.element.id + 'DefintionLine' });
	            for (var j = 0, len = chart.rows.length; j < len; j++) {
	                var row = chart.rows[j];
	                if (row.border.color) {
	                    this.drawBottomLine(row, j, true);
	                }
	            }
	            for (var j = 0, len = chart.columns.length; j < len; j++) {
	                var column = chart.columns[j];
	                if (column.border.color) {
	                    this.drawBottomLine(column, j, false);
	                }
	            }
	            axisElement.appendChild(this.element);
	            chart.svgObject.appendChild(axisElement);
	        };
	        CartesianAxisLayoutPanel.prototype.drawBottomLine = function (definition, index, isRow) {
	            var chart = this.chart;
	            var optionsLine = {};
	            var x1;
	            var x2;
	            var y1;
	            var y2;
	            var definitionName;
	            if (isRow) {
	                definition = definition;
	                y1 = y2 = definition.computedTop + definition.computedHeight;
	                x1 = this.seriesClipRect.x;
	                x2 = x1 + this.seriesClipRect.width;
	                definitionName = 'Row';
	            }
	            else {
	                definition = definition;
	                x1 = x2 = definition.computedLeft;
	                y1 = this.seriesClipRect.y;
	                y2 = y1 + this.seriesClipRect.height;
	                definitionName = 'Column';
	            }
	            optionsLine = {
	                'id': chart.element.id + '_AxisBottom_' + definitionName + index,
	                x1: x1,
	                y1: y1,
	                x2: x2,
	                y2: y2,
	                'stroke-width': definition.border.width,
	                'stroke': definition.border.color,
	            };
	            this.htmlObject = chart.renderer.drawLine(optionsLine);
	            this.element.appendChild(this.htmlObject);
	        };
	        CartesianAxisLayoutPanel.prototype.drawAxisLine = function (axis, index, plotX, plotY) {
	            var chart = this.chart;
	            var optionsLine = {};
	            var rect = axis.rect;
	            optionsLine = {
	                'id': chart.element.id + 'AxisLine_' + index,
	                x1: rect.x - plotX,
	                y1: rect.y - plotY,
	                x2: rect.x + rect.width + plotX,
	                y2: rect.y + rect.height + plotY,
	                'stroke-dasharray': axis.lineStyle.dashArray,
	                'stroke-width': axis.lineStyle.width,
	                'stroke': axis.lineStyle.color
	            };
	            this.htmlObject = chart.renderer.drawLine(optionsLine);
	            this.element.appendChild(this.htmlObject);
	        };
	        CartesianAxisLayoutPanel.prototype.drawYAxisGridLine = function (axis, index) {
	            var chart = this.chart;
	            var tempInterval;
	            var pointY = 0;
	            var majorGrid = '';
	            var majorTick = '';
	            var minorGird = '';
	            var minorTick = '';
	            var minorDirection;
	            var tickSize = (axis.opposedPosition) ? axis.majorTickLines.height : -axis.majorTickLines.height;
	            var axisLineSize = (axis.opposedPosition) ? axis.lineStyle.width / 2 : -axis.lineStyle.width / 2;
	            var rect = axis.rect;
	            var ticksbwtLabel = (axis.valueType === 'Category' && axis.labelPlacement === 'BetweenTicks') ?
	                0.5 : 0;
	            var length = axis.visibleLabels.length;
	            if (axis.valueType === 'Category' && axis.labelPlacement === 'BetweenTicks' && length > 0) {
	                length += 1;
	            }
	            for (var i = 0; i < length; i++) {
	                tempInterval = !axis.visibleLabels[i] ? (axis.visibleLabels[i - 1].value + axis.visibleRange.interval) - ticksbwtLabel
	                    : axis.visibleLabels[i].value - ticksbwtLabel;
	                pointY = helper_1.valueToCoefficient(tempInterval, axis) * rect.height;
	                pointY = (pointY * -1) + (rect.y + rect.height);
	                if (pointY >= rect.y && (rect.y + rect.height) >= pointY) {
	                    if ((helper_1.inside(tempInterval, axis.visibleRange)) || this.isBorder(axis, i, pointY)) {
	                        majorGrid = majorGrid.concat('M ' + this.seriesClipRect.x + ' ' + (pointY) +
	                            ' L ' + (this.seriesClipRect.x + this.seriesClipRect.width) + ' ' + pointY + ' ');
	                    }
	                    majorTick = majorTick.concat('M ' + (rect.x + axisLineSize) + ' ' + pointY +
	                        ' L ' + (rect.x + tickSize + axisLineSize) + ' ' + pointY + ' ');
	                }
	                if ((axis.minorGridLines.width > 0 || axis.minorTickLines.width > 0) && axis.minorTicksPerInterval > 0) {
	                    minorDirection = this.drawAxisMinorLine(axis, tempInterval, minorGird, minorTick);
	                    minorGird = minorDirection[0];
	                    minorTick = minorDirection[1];
	                }
	            }
	            this.renderGridLine(axis, index, majorGrid, minorGird);
	            this.renderTickLine(axis, index, majorTick, minorTick);
	        };
	        CartesianAxisLayoutPanel.prototype.isBorder = function (axis, index, value) {
	            var chart = this.chart;
	            var border = chart.chartArea.border;
	            var rect = this.seriesClipRect;
	            var orientation = axis.orientation;
	            var start = (orientation === 'Horizontal') ? rect.x : rect.y;
	            var size = (orientation === 'Horizontal') ? rect.width : rect.height;
	            var startIndex = (orientation === 'Horizontal') ? 0 : axis.visibleLabels.length - 1;
	            var endIndex = (orientation === 'Horizontal') ? axis.visibleLabels.length - 1 : 0;
	            if (axis.plotOffset > 0) {
	                return true;
	            }
	            else if ((value === start || value === (start + size)) && (border.width <= 0 || border.color === 'transparent')) {
	                return true;
	            }
	            else if ((value !== start && index === startIndex) || (value !== (start + size) && index === endIndex)) {
	                return true;
	            }
	            return false;
	        };
	        CartesianAxisLayoutPanel.prototype.drawYAxisLabels = function (axis, index) {
	            var chart = this.chart;
	            var pointX = 0;
	            var pointY = 0;
	            var elementSize;
	            var options;
	            var padding = axis.majorTickLines.height + this.padding + axis.lineStyle.width / 2;
	            padding = (axis.opposedPosition) ? padding : -padding;
	            var anchor = (axis.opposedPosition) ? 'start' : 'end';
	            var labelElement = chart.renderer.createGroup({ id: chart.element.id + 'AxisLabels' + index });
	            var rect = axis.rect;
	            for (var i = 0, len = axis.visibleLabels.length; i < len; i++) {
	                pointX = (rect.x + padding);
	                elementSize = axis.visibleLabels[i].size;
	                pointY = helper_1.valueToCoefficient(axis.visibleLabels[i].value, axis) * rect.height;
	                pointY = Math.floor((pointY * -1) + (rect.y + rect.height));
	                options = new helper_1.TextOption(chart.element.id + index + '_AxisLabel_' + i, pointX, pointY + (elementSize.height / 4), anchor, axis.visibleLabels[i].text);
	                if (axis.edgeLabelPlacement) {
	                    switch (axis.edgeLabelPlacement) {
	                        case 'None':
	                            break;
	                        case 'Hide':
	                            if ((i === 0 && options.y > rect.y + rect.height) ||
	                                ((i === axis.visibleLabels.length - 1) && options.y - elementSize.height / 2 < rect.y)) {
	                                options.text = '';
	                            }
	                            break;
	                        case 'Shift':
	                            if (i === 0 && options.y > rect.y + rect.height) {
	                                options.y = pointY = rect.y + rect.height;
	                            }
	                            else if ((i === axis.visibleLabels.length - 1) && (options.y - elementSize.height / 2 < rect.y)) {
	                                options.y = pointY = rect.y + elementSize.height / 2;
	                            }
	                            break;
	                    }
	                }
	                helper_3.textElement(options, axis.labelStyle, axis.labelStyle.color, labelElement);
	            }
	            if (!chart.delayRedraw) {
	                this.element.appendChild(labelElement);
	            }
	            else if (axis.visible) {
	                this.createZoomingLabel(this.chart, labelElement, axis, index);
	            }
	        };
	        CartesianAxisLayoutPanel.prototype.drawYAxisTitle = function (axis, index) {
	            var chart = this.chart;
	            var labelRotation = (axis.opposedPosition) ? 90 : -90;
	            var elementSize = helper_1.measureText(axis.title, axis.titleStyle);
	            var padding = axis.majorTickLines.height + axis.maxLabelSize.width + this.padding * 2;
	            var rect = axis.rect;
	            padding = axis.opposedPosition ? padding : -padding;
	            var x = rect.x + padding;
	            var y = rect.y + rect.height / 2;
	            var options = new helper_1.TextOption(chart.element.id + '_AxisTitle_' + index, x, y - this.padding, 'middle', axis.title, 'rotate(' + labelRotation + ',' + (x) + ',' + (y) + ')');
	            var element = helper_3.textElement(options, axis.titleStyle, axis.titleStyle.color, this.element);
	            element.setAttribute('aria-label', axis.description || axis.title);
	            element.setAttribute('tabindex', axis.tabIndex.toString());
	        };
	        CartesianAxisLayoutPanel.prototype.drawXAxisGridLine = function (axis, index) {
	            var chart = this.chart;
	            var tempInterval;
	            var pointX = 0;
	            var majorGrid = '';
	            var majorTick = '';
	            var minorGird = '';
	            var minorTick = '';
	            var minorDirection;
	            var tickSize = (axis.opposedPosition) ? -axis.majorTickLines.height : axis.majorTickLines.height;
	            var axisLineSize = (axis.opposedPosition) ? -axis.lineStyle.width / 2 : axis.lineStyle.width / 2;
	            var ticksbwtLabel = (axis.valueType === 'Category' && axis.labelPlacement === 'BetweenTicks') ?
	                0.5 : 0;
	            var rect = axis.rect;
	            var length = axis.visibleLabels.length;
	            if (axis.valueType === 'Category' && length > 0 && axis.labelPlacement === 'BetweenTicks') {
	                length += 1;
	            }
	            for (var i = 0; i < length; i++) {
	                tempInterval = axis.visibleLabels[i] ? axis.visibleLabels[i].value - ticksbwtLabel
	                    : (axis.visibleLabels[i - 1].value + axis.visibleRange.interval) - ticksbwtLabel;
	                pointX = (helper_1.valueToCoefficient(tempInterval, axis) * rect.width) + rect.x;
	                if (pointX >= rect.x && (rect.x + rect.width) >= pointX) {
	                    if (helper_1.inside(tempInterval, axis.visibleRange) || this.isBorder(axis, i, pointX)) {
	                        majorGrid = majorGrid.concat('M ' + pointX + ' ' + (this.seriesClipRect.y + this.seriesClipRect.height) +
	                            ' L ' + pointX + ' ' + this.seriesClipRect.y + ' ');
	                    }
	                    majorTick = majorTick.concat('M ' + (pointX) + ' ' + (rect.y + axisLineSize) +
	                        ' L ' + (pointX) + ' ' + (rect.y + tickSize + axisLineSize) + ' ');
	                }
	                if (axis.minorTicksPerInterval > 0 && (axis.minorGridLines.width > 0 || axis.minorTickLines.width > 0)) {
	                    minorDirection = this.drawAxisMinorLine(axis, tempInterval, minorGird, minorTick);
	                    minorGird = minorDirection[0];
	                    minorTick = minorDirection[1];
	                }
	            }
	            this.renderGridLine(axis, index, majorGrid, minorGird);
	            this.renderTickLine(axis, index, majorTick, minorTick);
	        };
	        CartesianAxisLayoutPanel.prototype.drawAxisMinorLine = function (axis, tempInterval, minorGird, minorTick) {
	            var value = tempInterval;
	            var coor = 0;
	            var position = 0;
	            var range = axis.visibleRange;
	            var direction = [];
	            var tickSize = axis.opposedPosition ? -axis.minorTickLines.height : axis.minorTickLines.height;
	            var rect = axis.rect;
	            var logStart;
	            var logEnd;
	            var logInterval = 1;
	            var logPosition = 1;
	            if (axis.valueType === 'Logarithmic') {
	                logStart = Math.pow(axis.logBase, value - range.interval);
	                logEnd = Math.pow(axis.logBase, value);
	                logInterval = (logEnd - logStart) / (axis.minorTicksPerInterval + 1);
	                logPosition = logStart + logInterval;
	            }
	            if (axis.orientation === 'Horizontal') {
	                for (var j = 0; j < axis.minorTicksPerInterval; j++) {
	                    value = this.findLogNumeric(axis, logPosition, logInterval, value);
	                    logPosition += logInterval;
	                    if (helper_1.inside(value, range)) {
	                        position = Math.ceil(((value - range.min) / (range.max - range.min)) * rect.width);
	                        coor = (Math.floor(position + rect.x));
	                        minorGird = minorGird.concat('M' + ' ' + coor + ' ' + (this.seriesClipRect.y)
	                            + 'L ' + coor + ' ' + (this.seriesClipRect.y + this.seriesClipRect.height));
	                        coor = (Math.floor(position + rect.x));
	                        minorTick = minorTick.concat('M' + ' ' + coor + ' ' + (rect.y)
	                            + 'L ' + coor + ' ' + (rect.y + tickSize));
	                    }
	                }
	            }
	            else {
	                tickSize = axis.opposedPosition ? axis.minorTickLines.height : -axis.minorTickLines.height;
	                for (var j = 0; j < axis.minorTicksPerInterval; j++) {
	                    value = this.findLogNumeric(axis, logPosition, logInterval, value);
	                    if (helper_1.inside(value, range)) {
	                        position = Math.ceil(((value - range.min) / (range.max - range.min)) * rect.height) * -1;
	                        coor = (Math.floor(position + rect.y + rect.height));
	                        minorGird = minorGird.concat('M' + ' ' + (this.seriesClipRect.x) + ' ' + coor
	                            + 'L ' + (this.seriesClipRect.x + this.seriesClipRect.width) + ' ' + coor);
	                        coor = (Math.floor(position + rect.y + rect.height));
	                        minorTick = minorTick.concat('M' + ' ' + rect.x + ' ' + coor + 'L ' + (rect.x + tickSize) + ' ' + coor);
	                    }
	                    logPosition += logInterval;
	                }
	            }
	            direction.push(minorGird);
	            direction.push(minorTick);
	            return direction;
	        };
	        CartesianAxisLayoutPanel.prototype.findLogNumeric = function (axis, logPosition, logInterval, value) {
	            var range = axis.visibleRange;
	            if (axis.valueType === 'Logarithmic') {
	                value = helper_2.logBase(logPosition, axis.logBase);
	            }
	            else if (axis.valueType === 'DateTime') {
	                value += axis.dateTimeInterval / (axis.minorTicksPerInterval + 1);
	            }
	            else {
	                value += range.interval / (axis.minorTicksPerInterval + 1);
	            }
	            return value;
	        };
	        CartesianAxisLayoutPanel.prototype.drawXAxisLabels = function (axis, index) {
	            var chart = this.chart;
	            var pointX = 0;
	            var pointY = 0;
	            var elementSize;
	            var labelElement = chart.renderer.createGroup({ id: chart.element.id + 'AxisLabels' + index });
	            var padding = axis.majorTickLines.height + this.padding + axis.lineStyle.width / 2;
	            var labelPadding;
	            var rotateSize;
	            var diffHeight;
	            var yLocation;
	            var angle;
	            var anglePadding = ((axis.angle === 90 || axis.angle === -90)) ? -2 : 0;
	            var rect = axis.rect;
	            var options;
	            var previousEnd = 0;
	            for (var i = 0, len = axis.visibleLabels.length; i < len; i++) {
	                pointX = (helper_1.valueToCoefficient(axis.visibleLabels[i].value, axis) * rect.width) + rect.x;
	                elementSize = axis.visibleLabels[i].size;
	                pointX -= elementSize.width / 2;
	                labelPadding = (axis.opposedPosition) ?
	                    -(padding + ((axis.angle !== 0) ? (3 * (elementSize.height / 4) + (2 * axis.maxLabelSize.height / 5)) : 0))
	                    : padding + ((axis.angle !== 0) ? (3 * (elementSize.height / 4)) + (2 * axis.maxLabelSize.height / 5)
	                        : (3 * (elementSize.height / 4)));
	                pointY = (rect.y + labelPadding);
	                options = new helper_1.TextOption(chart.element.id + index + '_AxisLabel_' + i, pointX, pointY, '', axis.visibleLabels[i].text);
	                if (axis.edgeLabelPlacement) {
	                    switch (axis.edgeLabelPlacement) {
	                        case 'None':
	                            break;
	                        case 'Hide':
	                            if ((i === 0 && options.x < rect.x) ||
	                                ((i === axis.visibleLabels.length - 1) && (options.x + elementSize.width > rect.x + rect.width))) {
	                                continue;
	                            }
	                            break;
	                        case 'Shift':
	                            if (i === 0 && options.x < rect.x) {
	                                options.x = pointX = rect.x;
	                            }
	                            else if ((i === axis.visibleLabels.length - 1) && ((options.x + elementSize.width) > rect.x + rect.width)) {
	                                options.x = pointX = rect.x + rect.width - elementSize.width;
	                            }
	                            break;
	                    }
	                }
	                if (axis.angle % 360 === 0 && axis.labelIntersectAction === 'Hide' && i !== 0 &&
	                    (!axis.isInversed ? options.x <= previousEnd : options.x + elementSize.width >= previousEnd)) {
	                    continue;
	                }
	                previousEnd = axis.isInversed ? options.x : options.x + elementSize.width;
	                if (axis.angle !== 0) {
	                    angle = (axis.angle > 360) ? axis.angle % 360 : axis.angle;
	                    rotateSize = helper_2.rotateTextSize(axis.labelStyle, axis.visibleLabels[i].text, angle, chart);
	                    diffHeight = axis.maxLabelSize.height - Math.ceil(rotateSize.height - elementSize.height);
	                    yLocation = axis.opposedPosition ? diffHeight / 2 : -diffHeight / 2;
	                    options.transform = 'rotate(' + angle + ',' + (pointX + elementSize.width / 2 + anglePadding) + ','
	                        + (pointY + yLocation) + ')';
	                    options.y += yLocation;
	                }
	                helper_3.textElement(options, axis.labelStyle, axis.labelStyle.color, labelElement);
	            }
	            if (!chart.delayRedraw) {
	                this.element.appendChild(labelElement);
	            }
	            else if (axis.visible) {
	                this.createZoomingLabel(this.chart, labelElement, axis, index);
	            }
	        };
	        CartesianAxisLayoutPanel.prototype.drawXAxisTitle = function (axis, index) {
	            var chart = this.chart;
	            var elementSize = helper_1.measureText(axis.title, axis.titleStyle);
	            var padding = axis.majorTickLines.height + axis.maxLabelSize.height + this.padding * 2;
	            var rect = axis.rect;
	            padding = axis.opposedPosition ? -(padding + elementSize.height / 4) : (padding + (3 * elementSize.height / 4));
	            var options = new helper_1.TextOption(chart.element.id + '_AxisTitle_' + index, rect.x + rect.width / 2, rect.y + padding, 'middle', axis.title);
	            var element = helper_3.textElement(options, axis.titleStyle, axis.titleStyle.color, this.element);
	            element.setAttribute('aria-label', axis.description || axis.title);
	            element.setAttribute('tabindex', axis.tabIndex.toString());
	        };
	        CartesianAxisLayoutPanel.prototype.renderTickLine = function (axis, index, majorTick, minorTick) {
	            var options;
	            var chart = this.chart;
	            if (axis.majorTickLines.width > 0) {
	                options = new helper_2.PathOption(chart.element.id + '_MajorTickLine_' + index, 'transparent', axis.majorTickLines.width, axis.majorTickLines.color, null, null, majorTick);
	                this.htmlObject = chart.renderer.drawPath(options);
	                this.element.appendChild(this.htmlObject);
	            }
	            if (axis.minorTickLines.width > 0) {
	                options = new helper_2.PathOption(chart.element.id + '_MinorTickLine_' + index, 'transparent', axis.minorTickLines.width, axis.minorTickLines.color, null, null, minorTick);
	                this.htmlObject = chart.renderer.drawPath(options);
	                this.element.appendChild(this.htmlObject);
	            }
	        };
	        CartesianAxisLayoutPanel.prototype.renderGridLine = function (axis, index, majorGrid, minorGird) {
	            var chart = this.chart;
	            var options;
	            if (axis.majorGridLines.width > 0) {
	                options = new helper_2.PathOption(chart.element.id + '_MajorGridLine_' + index, 'transparent', axis.majorGridLines.width, axis.majorGridLines.color, null, axis.majorGridLines.dashArray, majorGrid);
	                this.htmlObject = chart.renderer.drawPath(options);
	                this.element.appendChild(this.htmlObject);
	            }
	            if (axis.minorGridLines.width > 0) {
	                options = new helper_2.PathOption(chart.element.id + '_MinorGridLine_' + index, 'transparent', axis.minorGridLines.width, axis.minorGridLines.color, null, axis.minorGridLines.dashArray, minorGird);
	                this.htmlObject = chart.renderer.drawPath(options);
	                this.element.appendChild(this.htmlObject);
	            }
	        };
	        CartesianAxisLayoutPanel.prototype.createZoomingLabel = function (chart, labelElement, axis, index) {
	            var parentNode = document.getElementById(chart.element.id + 'AxisGroup' + index);
	            labelElement.setAttribute('opacity', '0.3');
	            var zoomElement = chart.renderer.createGroup({
	                id: chart.element.id + 'AxisLabels_Zoom' + index
	            });
	            zoomElement = helper_2.createZoomingLabels(chart, axis, zoomElement, index, axis.orientation === 'Vertical');
	            parentNode.replaceChild(labelElement, document.getElementById(labelElement.id));
	            if (helper_2.getElement(chart.element.id + 'AxisLabels_Zoom' + index)) {
	                parentNode.replaceChild(zoomElement, document.getElementById(zoomElement.id));
	            }
	            else {
	                parentNode.appendChild(zoomElement);
	            }
	        };
	        return CartesianAxisLayoutPanel;
	    }());
	    exports.CartesianAxisLayoutPanel = CartesianAxisLayoutPanel;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(4), __webpack_require__(3), __webpack_require__(7), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, ej2_base_2, helper_1, base_1, constants_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var Points = (function () {
	        function Points() {
	            this.symbolLocation = null;
	            this.region = null;
	        }
	        return Points;
	    }());
	    exports.Points = Points;
	    var DataLabelSettings = (function (_super) {
	        __extends(DataLabelSettings, _super);
	        function DataLabelSettings() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return DataLabelSettings;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(false)
	    ], DataLabelSettings.prototype, "visible", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], DataLabelSettings.prototype, "name", void 0);
	    __decorate([
	        ej2_base_1.Property('transparent')
	    ], DataLabelSettings.prototype, "fill", void 0);
	    __decorate([
	        ej2_base_1.Property(1)
	    ], DataLabelSettings.prototype, "opacity", void 0);
	    __decorate([
	        ej2_base_1.Property('Auto')
	    ], DataLabelSettings.prototype, "position", void 0);
	    __decorate([
	        ej2_base_1.Property(5)
	    ], DataLabelSettings.prototype, "rx", void 0);
	    __decorate([
	        ej2_base_1.Property(5)
	    ], DataLabelSettings.prototype, "ry", void 0);
	    __decorate([
	        ej2_base_1.Property('Center')
	    ], DataLabelSettings.prototype, "alignment", void 0);
	    __decorate([
	        ej2_base_1.Complex({ width: null, color: null }, base_1.Border)
	    ], DataLabelSettings.prototype, "border", void 0);
	    __decorate([
	        ej2_base_1.Complex({ left: 5, right: 5, top: 5, bottom: 5 }, base_1.Margin)
	    ], DataLabelSettings.prototype, "margin", void 0);
	    __decorate([
	        ej2_base_1.Complex({ size: '11px', color: null }, base_1.Font)
	    ], DataLabelSettings.prototype, "font", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], DataLabelSettings.prototype, "template", void 0);
	    exports.DataLabelSettings = DataLabelSettings;
	    var MarkerSettings = (function (_super) {
	        __extends(MarkerSettings, _super);
	        function MarkerSettings() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return MarkerSettings;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(false)
	    ], MarkerSettings.prototype, "visible", void 0);
	    __decorate([
	        ej2_base_1.Property('Circle')
	    ], MarkerSettings.prototype, "shape", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], MarkerSettings.prototype, "imageUrl", void 0);
	    __decorate([
	        ej2_base_1.Property(5)
	    ], MarkerSettings.prototype, "height", void 0);
	    __decorate([
	        ej2_base_1.Property(5)
	    ], MarkerSettings.prototype, "width", void 0);
	    __decorate([
	        ej2_base_1.Complex({ width: 1, color: null }, base_1.Border)
	    ], MarkerSettings.prototype, "border", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], MarkerSettings.prototype, "fill", void 0);
	    __decorate([
	        ej2_base_1.Property(1)
	    ], MarkerSettings.prototype, "opacity", void 0);
	    __decorate([
	        ej2_base_1.Complex({}, DataLabelSettings)
	    ], MarkerSettings.prototype, "dataLabel", void 0);
	    exports.MarkerSettings = MarkerSettings;
	    var Series = (function (_super) {
	        __extends(Series, _super);
	        function Series() {
	            var _this = _super !== null && _super.apply(this, arguments) || this;
	            _this.currentViewData = [];
	            _this.visibleSeriesCount = 0;
	            _this.clipRect = new helper_1.Rect(0, 0, 0, 0);
	            _this.isRectSeries = false;
	            _this.drawPoints = [];
	            _this.seriesType = 'XY';
	            return _this;
	        }
	        Series.prototype.processJsonData = function () {
	            var i = 0;
	            var len = Object.keys(this.currentViewData).length;
	            var point = new Points();
	            var textMappingName = this.marker.dataLabel.name;
	            this.points = [];
	            this.xMin = Infinity;
	            this.xMax = -Infinity;
	            this.yMin = Infinity;
	            this.yMax = -Infinity;
	            this.sizeMax = -Infinity;
	            this.seriesType = (this.type === 'RangeColumn') ? 'HighLow' : 'XY';
	            if (this.xAxis.valueType === 'Category') {
	                while (i < len) {
	                    point = this.dataPoint(i, textMappingName);
	                    this.pushCategoryData(point);
	                    this.pushData(point, i);
	                    i++;
	                }
	            }
	            else if (this.xAxis.valueType === 'DateTime') {
	                var option = {
	                    skeleton: 'full',
	                    type: 'dateTime'
	                };
	                var dateParser = this.chart.intl.getDateParser(option);
	                var dateFormatter = this.chart.intl.getDateFormat(option);
	                while (i < len) {
	                    point = this.dataPoint(i, textMappingName);
	                    point.xValue = Date.parse(dateParser(dateFormatter(point.x)));
	                    this.pushData(point, i);
	                    i++;
	                }
	            }
	            else {
	                while (i < len) {
	                    point = this.dataPoint(i, textMappingName);
	                    point.xValue = point.x;
	                    this.pushData(point, i);
	                    i++;
	                }
	            }
	            if (this.type === 'Spline') {
	                this.chart.splineSeriesModule.findSplinePoint(this);
	            }
	        };
	        Series.prototype.pushCategoryData = function (point) {
	            if (this.xAxis.labels.indexOf(point.x) < 0) {
	                this.xAxis.labels.push(point.x);
	            }
	            point.xValue = this.xAxis.labels.indexOf(point.x);
	        };
	        Series.prototype.refreshAxisLabel = function () {
	            if (this.xAxis.valueType !== 'Category') {
	                return null;
	            }
	            this.xAxis.labels = [];
	            for (var _i = 0, _a = this.xAxis.series; _i < _a.length; _i++) {
	                var item = _a[_i];
	                if (item.visible) {
	                    item.xMin = Infinity;
	                    item.xMax = -Infinity;
	                    for (var _b = 0, _c = item.points; _b < _c.length; _b++) {
	                        var point = _c[_b];
	                        item.pushCategoryData(point);
	                        item.xMin = Math.min(item.xMin, point.xValue);
	                        item.xMax = Math.max(item.xMax, point.xValue);
	                    }
	                }
	            }
	        };
	        Series.prototype.dataPoint = function (i, textMappingName) {
	            var point;
	            this.points[i] = new Points();
	            point = this.points[i];
	            point.x = this.currentViewData[i][this.xName];
	            point.y = this.currentViewData[i][this.yName];
	            point.high = this.currentViewData[i][this.high];
	            point.low = this.currentViewData[i][this.low];
	            point.size = this.currentViewData[i][this.size];
	            point.text = this.currentViewData[i][textMappingName];
	            return point;
	        };
	        Series.prototype.findVisibility = function (point) {
	            switch (this.seriesType) {
	                case 'XY':
	                    this.yMin = Math.min(this.yMin, point.yValue);
	                    this.yMax = Math.max(this.yMax, point.yValue);
	                    this.yData.push(point.yValue);
	                    if (this.type === 'Bubble') {
	                        this.sizeMax = Math.max(this.sizeMax, point.size);
	                    }
	                    return ej2_base_2.isNullOrUndefined(point.x) || ej2_base_2.isNullOrUndefined(point.y);
	                case 'HighLow':
	                    this.yMin = Math.min(this.yMin, Math.min((point.low), (point.high)));
	                    this.yMax = Math.max(this.yMax, Math.max((point.low), (point.high)));
	                    return ej2_base_2.isNullOrUndefined(point.x) || ej2_base_2.isNullOrUndefined(point.low) || ej2_base_2.isNullOrUndefined(point.high);
	            }
	        };
	        Series.prototype.pushData = function (point, i) {
	            point.index = i;
	            point.yValue = point.y;
	            point.visible = !this.findVisibility(point);
	            this.xMin = Math.min(this.xMin, point.xValue);
	            this.xMax = Math.max(this.xMax, point.xValue);
	            this.xData.push(point.xValue);
	        };
	        Series.prototype.findSeriesCollection = function (column, row, isStack) {
	            var seriesCollection = [];
	            for (var _i = 0, _a = row.axes; _i < _a.length; _i++) {
	                var rowAxis = _a[_i];
	                for (var _b = 0, _c = rowAxis.series; _b < _c.length; _b++) {
	                    var rowSeries = _c[_b];
	                    for (var _d = 0, _e = column.axes; _d < _e.length; _d++) {
	                        var axis = _e[_d];
	                        for (var _f = 0, _g = axis.series; _f < _g.length; _f++) {
	                            var series = _g[_f];
	                            if (series === rowSeries && series.visible && this.rectSeriesInChart(series, isStack)) {
	                                seriesCollection.push(series);
	                            }
	                        }
	                    }
	                }
	            }
	            return seriesCollection;
	        };
	        Series.prototype.rectSeriesInChart = function (series, isStack) {
	            var type = (series.type).toLowerCase();
	            return (type.indexOf('column') !== -1 || type.indexOf('bar') !== -1 || isStack);
	        };
	        Series.prototype.calculateStackedValue = function (isStacking100) {
	            var axisSeries;
	            for (var _i = 0, _a = this.chart.columns; _i < _a.length; _i++) {
	                var columnItem = _a[_i];
	                for (var _b = 0, _c = this.chart.rows; _b < _c.length; _b++) {
	                    var item = _c[_b];
	                    this.calculateStackingValues(this.findSeriesCollection(columnItem, item, true), isStacking100);
	                }
	            }
	        };
	        Series.prototype.calculateStackingValues = function (seriesCollection, isStacking100) {
	            var startValues;
	            var endValues;
	            var yValues = [];
	            var lastPositive = [];
	            var lastNegative = [];
	            var stackingGroup;
	            var lastValue;
	            var value;
	            var frequencies = [];
	            if (isStacking100) {
	                frequencies = this.findFrequencies(seriesCollection);
	            }
	            for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {
	                var series = seriesCollection_1[_i];
	                if (series.type.indexOf('Stacking') !== -1) {
	                    stackingGroup = (series.type.indexOf('StackingArea') !== -1) ? 'StackingArea100' : series.stackingGroup;
	                    if (!lastPositive[stackingGroup]) {
	                        lastPositive[stackingGroup] = [];
	                        lastNegative[stackingGroup] = [];
	                    }
	                    yValues = series.yData;
	                    startValues = [];
	                    endValues = [];
	                    for (var j = 0, pointsLength = series.points.length; j < pointsLength; j++) {
	                        lastValue = 0;
	                        value = yValues[j];
	                        if (lastPositive[stackingGroup][series.points[j].xValue] === undefined) {
	                            lastPositive[stackingGroup][series.points[j].xValue] = 0;
	                        }
	                        if (lastNegative[stackingGroup][series.points[j].xValue] === undefined) {
	                            lastNegative[stackingGroup][series.points[j].xValue] = 0;
	                        }
	                        if (isStacking100) {
	                            value = value / frequencies[stackingGroup][series.points[j].xValue] * 100;
	                            value = !isNaN(value) ? value : 0;
	                            series.points[j].percent = value.toFixed(2);
	                        }
	                        if (value >= 0) {
	                            lastValue = lastPositive[stackingGroup][series.points[j].xValue];
	                            lastPositive[stackingGroup][series.points[j].xValue] += value;
	                        }
	                        else {
	                            lastValue = lastNegative[stackingGroup][series.points[j].xValue];
	                            lastNegative[stackingGroup][series.points[j].xValue] += value;
	                        }
	                        startValues.push(lastValue);
	                        endValues.push(value + lastValue);
	                        if (isStacking100 && (endValues[j] > 100)) {
	                            endValues[j] = 100;
	                        }
	                    }
	                    series.stackedValues = new helper_1.StackValues(startValues, endValues);
	                    series.yMin = Math.min.apply(0, startValues);
	                    series.yMax = Math.max.apply(0, endValues);
	                    if (series.yMin > Math.min.apply(0, endValues)) {
	                        series.yMin = (isStacking100) ? -100 : Math.min.apply(0, endValues);
	                    }
	                    if (series.yMax < Math.max.apply(0, startValues)) {
	                        series.yMax = 0;
	                    }
	                }
	            }
	        };
	        Series.prototype.findFrequencies = function (seriesCollection) {
	            var frequencies = [];
	            var stackingGroup;
	            for (var _i = 0, seriesCollection_2 = seriesCollection; _i < seriesCollection_2.length; _i++) {
	                var series = seriesCollection_2[_i];
	                series.yAxis.isStack100 = series.type.indexOf('100') !== -1 ? true : false;
	                if (series.type.indexOf('Stacking') !== -1) {
	                    stackingGroup = (series.type.indexOf('StackingArea') !== -1) ? 'StackingArea100' : series.stackingGroup;
	                    if (!frequencies[stackingGroup]) {
	                        frequencies[stackingGroup] = [];
	                    }
	                    for (var j = 0, pointsLength = series.points.length; j < pointsLength; j++) {
	                        if (frequencies[stackingGroup][series.points[j].xValue] === undefined) {
	                            frequencies[stackingGroup][series.points[j].xValue] = 0;
	                        }
	                        if (series.yData[j] > 0) {
	                            frequencies[stackingGroup][series.points[j].xValue] += series.yData[j];
	                        }
	                        else {
	                            frequencies[stackingGroup][series.points[j].xValue] -= series.yData[j];
	                        }
	                    }
	                }
	            }
	            return frequencies;
	        };
	        Series.prototype.logWithIn = function (value, axis) {
	            if (axis.valueType === 'Logarithmic') {
	                value = helper_1.logBase(value, axis.logBase);
	            }
	            else {
	                value = value;
	            }
	            return value;
	        };
	        Series.prototype.refreshDataManager = function (chart) {
	            var _this = this;
	            this.chart = chart;
	            var dataManager = this.dataModule.getData(this.dataModule.generateQuery().requiresCount());
	            dataManager.then(function (e) { return _this.dataManagerSuccess(e); });
	        };
	        Series.prototype.dataManagerSuccess = function (e) {
	            this.currentViewData = e.result;
	            this.recordsCount = e.count;
	            var argsData = {
	                name: constants_1.seriesRender, series: this, data: this.currentViewData,
	            };
	            this.chart.trigger(constants_1.seriesRender, argsData);
	            this.processJsonData();
	            this.refreshChart();
	        };
	        Series.prototype.refreshChart = function () {
	            var chart = this.chart;
	            chart.visibleSeriesCount++;
	            if (chart.visibleSeries.length === chart.visibleSeriesCount) {
	                chart.refreshBound();
	            }
	        };
	        Series.prototype.renderSeries = function (chart, index) {
	            var seriesType = helper_1.firstToLowerCase(this.type);
	            if (seriesType.indexOf('100') !== -1) {
	                seriesType = seriesType.replace('100', '');
	            }
	            if (chart[seriesType + 'SeriesModule']) {
	                this.createSeriesElements(chart);
	                chart[seriesType + 'SeriesModule'].render(this, this.xAxis, this.yAxis);
	                if (this.marker.dataLabel.visible) {
	                    chart.dataLabelModule.render(this, this.chart, this.marker.dataLabel);
	                }
	                this.appendSeriesElement(chart.seriesElements, chart);
	                this.performAnimation(chart, seriesType, this.marker, this.marker.dataLabel);
	            }
	        };
	        Series.prototype.createSeriesElements = function (chart) {
	            var elementId = chart.element.id;
	            var xAxisRect = this.xAxis.rect;
	            var explodeValue = 5;
	            var yAxisRect = this.yAxis.rect;
	            var marker = this.marker;
	            var render = chart.renderer;
	            var index = this.index;
	            var markerHeight = (this.type === 'Scatter') ? (this.marker.height + explodeValue) / 2 : 0;
	            var markerWidth = (this.type === 'Scatter') ? (this.marker.width + explodeValue) / 2 : 0;
	            this.clipRectElement = render.drawClipPath(new helper_1.RectOption(elementId + '_ChartSeriesClipRect_' + index, 'transparent', { width: 1, color: 'Gray' }, 1, {
	                x: -markerWidth, y: -markerHeight, width: this.clipRect.width + markerWidth * 2,
	                height: this.clipRect.height + markerHeight * 2
	            }));
	            var transform;
	            transform = 'translate(' + this.clipRect.x + ',' + (this.clipRect.y) + ')';
	            this.seriesElement = render.createGroup({
	                'id': elementId + 'SeriesGroup' + index,
	                'transform': transform,
	                'clip-path': 'url(#' + elementId + '_ChartSeriesClipRect_' + index + ')'
	            });
	            this.seriesElement.appendChild(this.clipRectElement);
	            if (marker.visible) {
	                markerHeight = (this.marker.height + explodeValue) / 2;
	                markerWidth = (this.marker.width + explodeValue) / 2;
	                var markerClipRect = render.drawClipPath(new helper_1.RectOption(elementId + '_ChartMarkerClipRect_' + index, 'transparent', { width: 1, color: 'Gray' }, 1, {
	                    x: -markerWidth, y: -markerHeight,
	                    width: this.clipRect.width + markerWidth * 2, height: this.clipRect.height + markerHeight * 2
	                }));
	                this.symbolElement = render.createGroup({
	                    'id': elementId + 'SymbolGroup' + index,
	                    'transform': transform,
	                    'clip-path': 'url(#' + elementId + '_ChartMarkerClipRect_' + index + ')'
	                });
	                this.symbolElement.appendChild(markerClipRect);
	            }
	            if (marker.dataLabel.visible) {
	                this.shapeElement = render.createGroup({
	                    'id': elementId + 'ShapeGroup' + index,
	                    'transform': transform,
	                    'clip-path': 'url(#' + elementId + '_ChartSeriesClipRect_' + index + ')'
	                });
	                this.textElement = render.createGroup({
	                    'id': elementId + 'TextGroup' + index,
	                    'transform': transform,
	                    'clip-path': 'url(#' + elementId + '_ChartSeriesClipRect_' + index + ')'
	                });
	            }
	        };
	        Series.prototype.appendSeriesElement = function (element, chart) {
	            chart.seriesElements.appendChild(this.seriesElement);
	            var marker = this.marker;
	            var dataLabel = marker.dataLabel;
	            if (marker.visible) {
	                chart.seriesElements.appendChild(this.symbolElement);
	            }
	            if (dataLabel.visible) {
	                chart.dataLabelElements.appendChild(this.shapeElement);
	                chart.dataLabelElements.appendChild(this.textElement);
	            }
	        };
	        Series.prototype.performAnimation = function (chart, type, marker, dataLabel) {
	            if (this.animation.enable && chart.animateSeries) {
	                chart[type + 'SeriesModule'].doAnimation(this);
	                if (marker.visible) {
	                    chart.markerModule.doMarkerAnimation(this);
	                }
	                if (dataLabel.visible) {
	                    chart.dataLabelModule.doDataLabelAnimation(this);
	                }
	            }
	        };
	        return Series;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property('')
	    ], Series.prototype, "name", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], Series.prototype, "dataSource", void 0);
	    __decorate([
	        ej2_base_1.Property()
	    ], Series.prototype, "query", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], Series.prototype, "xName", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], Series.prototype, "yName", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], Series.prototype, "high", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], Series.prototype, "low", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], Series.prototype, "size", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], Series.prototype, "xAxisName", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], Series.prototype, "yAxisName", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], Series.prototype, "fill", void 0);
	    __decorate([
	        ej2_base_1.Property(1)
	    ], Series.prototype, "width", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], Series.prototype, "stackingGroup", void 0);
	    __decorate([
	        ej2_base_1.Property(true)
	    ], Series.prototype, "visible", void 0);
	    __decorate([
	        ej2_base_1.Complex({ color: 'transparent', width: 0 }, base_1.Border)
	    ], Series.prototype, "border", void 0);
	    __decorate([
	        ej2_base_1.Property(1)
	    ], Series.prototype, "opacity", void 0);
	    __decorate([
	        ej2_base_1.Property('0')
	    ], Series.prototype, "dashArray", void 0);
	    __decorate([
	        ej2_base_1.Property('Line')
	    ], Series.prototype, "type", void 0);
	    __decorate([
	        ej2_base_1.Complex(null, MarkerSettings)
	    ], Series.prototype, "marker", void 0);
	    __decorate([
	        ej2_base_1.Complex(null, base_1.Animation)
	    ], Series.prototype, "animation", void 0);
	    __decorate([
	        ej2_base_1.Property(true)
	    ], Series.prototype, "enableTooltip", void 0);
	    __decorate([
	        ej2_base_1.Property('SeriesType')
	    ], Series.prototype, "legendShape", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], Series.prototype, "selectionStyle", void 0);
	    __decorate([
	        ej2_base_1.Property(1)
	    ], Series.prototype, "minRadius", void 0);
	    __decorate([
	        ej2_base_1.Property(3)
	    ], Series.prototype, "maxRadius", void 0);
	    exports.Series = Series;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_data_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var Data = (function () {
	        function Data(dataSource, query) {
	            this.initDataManager(dataSource, query);
	        }
	        Data.prototype.initDataManager = function (dataSource, query) {
	            this.dataManager = dataSource instanceof ej2_data_1.DataManager ? dataSource : new ej2_data_1.DataManager(dataSource);
	            this.query = query instanceof ej2_data_1.Query ? query : new ej2_data_1.Query();
	        };
	        Data.prototype.generateQuery = function () {
	            var query = this.query.clone();
	            return query;
	        };
	        Data.prototype.getData = function (query) {
	            return this.dataManager.executeQuery(query);
	        };
	        return Data;
	    }());
	    exports.Data = Data;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 16 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_16__;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(7), __webpack_require__(8), __webpack_require__(3), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, base_1, theme_1, helper_1, helper_2) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var Location = (function (_super) {
	        __extends(Location, _super);
	        function Location() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return Location;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(0)
	    ], Location.prototype, "x", void 0);
	    __decorate([
	        ej2_base_1.Property(0)
	    ], Location.prototype, "y", void 0);
	    exports.Location = Location;
	    var LegendSettings = (function (_super) {
	        __extends(LegendSettings, _super);
	        function LegendSettings() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return LegendSettings;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(true)
	    ], LegendSettings.prototype, "visible", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], LegendSettings.prototype, "height", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], LegendSettings.prototype, "width", void 0);
	    __decorate([
	        ej2_base_1.Complex({ x: 0, y: 0 }, Location)
	    ], LegendSettings.prototype, "location", void 0);
	    __decorate([
	        ej2_base_1.Property('Auto')
	    ], LegendSettings.prototype, "position", void 0);
	    __decorate([
	        ej2_base_1.Property(8)
	    ], LegendSettings.prototype, "padding", void 0);
	    __decorate([
	        ej2_base_1.Property('Center')
	    ], LegendSettings.prototype, "alignment", void 0);
	    __decorate([
	        ej2_base_1.Complex(theme_1.Theme.legendLabelFont, base_1.Font)
	    ], LegendSettings.prototype, "textStyle", void 0);
	    __decorate([
	        ej2_base_1.Property(10)
	    ], LegendSettings.prototype, "shapeHeight", void 0);
	    __decorate([
	        ej2_base_1.Property(10)
	    ], LegendSettings.prototype, "shapeWidth", void 0);
	    __decorate([
	        ej2_base_1.Complex({}, base_1.Border)
	    ], LegendSettings.prototype, "border", void 0);
	    __decorate([
	        ej2_base_1.Property(5)
	    ], LegendSettings.prototype, "shapePadding", void 0);
	    __decorate([
	        ej2_base_1.Property('transparent')
	    ], LegendSettings.prototype, "background", void 0);
	    __decorate([
	        ej2_base_1.Property(1)
	    ], LegendSettings.prototype, "opacity", void 0);
	    __decorate([
	        ej2_base_1.Property(true)
	    ], LegendSettings.prototype, "toggleVisibility", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], LegendSettings.prototype, "description", void 0);
	    __decorate([
	        ej2_base_1.Property(3)
	    ], LegendSettings.prototype, "tabIndex", void 0);
	    exports.LegendSettings = LegendSettings;
	    var BaseLegend = (function () {
	        function BaseLegend(chart) {
	            this.rowCount = 0;
	            this.columnCount = 0;
	            this.pageButtonSize = 8;
	            this.pageXCollections = [];
	            this.maxColumns = 0;
	            this.isTrimmed = false;
	            this.maxWidth = 0;
	            this.currentPage = 1;
	            this.chart = chart;
	            this.legend = chart.legendSettings;
	            this.legendID = chart.element.id + '_chart_legend';
	            this.isChartControl = (chart.getModuleName() === 'chart');
	        }
	        BaseLegend.prototype.calculateLegendBounds = function (rect, availableSize) {
	            var legend = this.legend;
	            this.getPosition(legend.position, availableSize);
	            this.legendBounds = new helper_1.Rect(rect.x, rect.y, 0, 0);
	            this.isVertical = (this.position === 'Left' || this.position === 'Right');
	            if (this.isVertical) {
	                this.legendBounds.height = helper_2.stringToNumber(legend.height, availableSize.height) || rect.height;
	                this.legendBounds.width = helper_2.stringToNumber(legend.width || '20%', availableSize.width);
	            }
	            else {
	                this.legendBounds.width = helper_2.stringToNumber(legend.width, availableSize.width) || rect.width;
	                this.legendBounds.height = helper_2.stringToNumber(legend.height || '20%', availableSize.height);
	            }
	            this.library.getLegendBounds(availableSize, this.legendBounds, legend);
	            this.getLocation(this.position, legend.alignment, this.legendBounds, rect, availableSize);
	        };
	        BaseLegend.prototype.getPosition = function (position, availableSize) {
	            if (this.isChartControl) {
	                this.position = (position !== 'Auto') ? position : 'Bottom';
	            }
	            else {
	                this.position = (position !== 'Auto') ? position :
	                    (availableSize.width > availableSize.height ? 'Right' : 'Bottom');
	            }
	        };
	        BaseLegend.prototype.setBounds = function (computedWidth, computedHeight, legend, legendBounds) {
	            computedWidth = computedWidth < legendBounds.width ? computedWidth : legendBounds.width;
	            computedHeight = computedHeight < legendBounds.height ? computedHeight : legendBounds.height;
	            legendBounds.width = !legend.width ? computedWidth : legendBounds.width;
	            legendBounds.height = !legend.height ? computedHeight : legendBounds.height;
	            this.rowCount = Math.max(1, Math.ceil((legendBounds.height - legend.padding) / (this.maxItemHeight + legend.padding)));
	        };
	        BaseLegend.prototype.getLocation = function (position, alignment, legendBounds, rect, availableSize) {
	            var padding = this.legend.border.width / 2;
	            var legendHeight = legendBounds.height + padding;
	            var legendWidth = legendBounds.width + padding;
	            var marginTop = this.chart.margin.top;
	            if (position === 'Bottom') {
	                legendBounds.x = this.alignLegend(legendBounds.x, availableSize.width, legendBounds.width, alignment);
	                legendBounds.y = rect.y + (rect.height - legendHeight) + padding;
	                helper_1.subtractThickness(rect, new helper_1.Thickness(0, 0, 0, legendHeight));
	            }
	            else if (position === 'Top') {
	                legendBounds.x = this.alignLegend(legendBounds.x, availableSize.width, legendBounds.width, alignment);
	                legendBounds.y = rect.y;
	                helper_1.subtractThickness(rect, new helper_1.Thickness(0, 0, legendHeight, 0));
	            }
	            else if (position === 'Right') {
	                legendBounds.x = rect.x + (rect.width - legendBounds.width);
	                legendBounds.y = this.alignLegend(marginTop, availableSize.height, legendBounds.height, alignment);
	                helper_1.subtractThickness(rect, new helper_1.Thickness(0, legendWidth, 0, 0));
	            }
	            else if (position === 'Left') {
	                legendBounds.y = this.alignLegend(marginTop, availableSize.height, legendBounds.height, alignment);
	                helper_1.subtractThickness(rect, new helper_1.Thickness(legendWidth, 0, 0, 0));
	            }
	            else {
	                legendBounds.x = this.legend.location.x;
	                legendBounds.y = this.legend.location.y;
	                helper_1.subtractThickness(rect, new helper_1.Thickness(0, 0, 0, 0));
	            }
	        };
	        BaseLegend.prototype.alignLegend = function (start, size, legendSize, alignment) {
	            switch (alignment) {
	                case 'Far':
	                    start = (size - legendSize) - start;
	                    break;
	                case 'Center':
	                    start = ((size - legendSize) / 2);
	                    break;
	            }
	            return start;
	        };
	        BaseLegend.prototype.renderLegend = function (chart, legend, legendBounds) {
	            var firstLegend = this.findFirstLegendPosition(this.legendCollections);
	            var padding = legend.padding;
	            this.maxItemHeight = Math.max(this.legendCollections[0].textSize.height, legend.shapeHeight);
	            var legendGroup = chart.renderer.createGroup({ id: this.legendID + '_g' });
	            var legendTranslateGroup = this.createLegendElements(chart, legendBounds, legendGroup, legend, this.legendID);
	            if (firstLegend !== this.legendCollections.length) {
	                var legendSeriesGroup = void 0;
	                var start = void 0;
	                start = new helper_1.ChartLocation(legendBounds.x + padding + (legend.shapeWidth / 2), legendBounds.y + padding + this.maxItemHeight / 2);
	                var textOptions = new helper_2.TextOption('', start.x, start.y, 'start');
	                this.totalPages = this.isChartControl ? this.totalPages : 0;
	                var textPadding = legend.shapePadding + padding + legend.shapeWidth;
	                var count = 0;
	                this.pageXCollections = [];
	                this.legendCollections[firstLegend].location = start;
	                var previousLegend = this.legendCollections[firstLegend];
	                for (var _i = 0, _a = this.legendCollections; _i < _a.length; _i++) {
	                    var legendOption = _a[_i];
	                    if (legendOption.render && legendOption.text !== '') {
	                        legendSeriesGroup = chart.renderer.createGroup({
	                            id: this.legendID + this.generateId(legendOption, '_g_', count)
	                        });
	                        legendSeriesGroup.setAttribute('tabindex', legend.tabIndex.toString());
	                        legendSeriesGroup.setAttribute('aria-label', legend.description || 'Click to show or hide the ' + legendOption.text + ' series');
	                        this.library.getRenderPoint(legendOption, start, textPadding, previousLegend, legendBounds, count, firstLegend);
	                        this.renderSymbol(legendOption, legendSeriesGroup, count);
	                        this.renderText(chart, legendOption, legendSeriesGroup, textOptions, count);
	                        legendSeriesGroup.setAttribute('style', 'cursor: pointer');
	                        legendTranslateGroup.appendChild(legendSeriesGroup);
	                        previousLegend = legendOption;
	                    }
	                    count++;
	                }
	                if (this.isPaging) {
	                    this.renderPagingElements(chart, legendBounds, textOptions, legendGroup);
	                }
	            }
	            chart.svgObject.appendChild(legendGroup);
	        };
	        BaseLegend.prototype.findFirstLegendPosition = function (legendCollection) {
	            var count = 0;
	            for (var _i = 0, legendCollection_1 = legendCollection; _i < legendCollection_1.length; _i++) {
	                var legend = legendCollection_1[_i];
	                if (legend.render && legend.text !== '') {
	                    break;
	                }
	                count++;
	            }
	            return count;
	        };
	        BaseLegend.prototype.createLegendElements = function (chart, legendBounds, legendGroup, legend, id) {
	            var padding = legend.padding;
	            var options = new helper_2.RectOption(id + '_element', legend.background, legend.border, legend.opacity, legendBounds);
	            legendGroup.appendChild(chart.renderer.drawRectangle(options));
	            var legendItemsGroup = chart.renderer.createGroup({ id: id + '_collections' });
	            legendGroup.appendChild(legendItemsGroup);
	            this.legendTranslateGroup = chart.renderer.createGroup({ id: id + '_translate_g' });
	            legendItemsGroup.appendChild(this.legendTranslateGroup);
	            var clippath = chart.renderer.createClipPath({ id: id + '_clipPath' });
	            options.y += padding;
	            options.id += '_clipPath_rect';
	            options.width = (!this.isChartControl && this.isVertical) ? this.maxWidth - padding : legendBounds.width;
	            this.clipRect = chart.renderer.drawRectangle(options);
	            clippath.appendChild(this.clipRect);
	            chart.svgObject.appendChild(clippath);
	            legendItemsGroup.setAttribute('style', 'clip-path:url(#' + clippath.id + ')');
	            return this.legendTranslateGroup;
	        };
	        BaseLegend.prototype.renderSymbol = function (legendOption, group, i) {
	            var symbolColor = legendOption.visible ? legendOption.fill : '#D3D3D3';
	            var shape = (legendOption.shape === 'SeriesType') ? legendOption.type : legendOption.shape;
	            shape = shape === 'Scatter' ? legendOption.markerShape : shape;
	            var symbolOption = new helper_1.PathOption(this.legendID + this.generateId(legendOption, '_shape_', i), symbolColor, 1, symbolColor, 1, '', '');
	            group.appendChild(helper_1.drawSymbol(legendOption.location, shape, new helper_1.Size(this.legend.shapeWidth, this.legend.shapeHeight), '', symbolOption, 'Click to show or hide the ' + legendOption.text + ' series'));
	            if (shape === 'Line' && legendOption.markerVisibility && legendOption.markerShape !== 'Image' ||
	                legendOption.type === 'Doughnut') {
	                symbolOption.id = this.legendID + this.generateId(legendOption, '_shape_marker_', i);
	                shape = legendOption.type === 'Doughnut' ? 'Circle' : legendOption.markerShape;
	                symbolOption.fill = legendOption.type === 'Doughnut' ? '#FFFFFF' : symbolOption.fill;
	                group.appendChild(helper_1.drawSymbol(legendOption.location, shape, new helper_1.Size(this.legend.shapeWidth / 2, this.legend.shapeHeight / 2), '', symbolOption, 'Click to show or hide the ' + legendOption.text + ' series'));
	            }
	        };
	        BaseLegend.prototype.renderText = function (chart, legendOption, group, textOptions, i) {
	            var legend = chart.legendSettings;
	            var hiddenColor = '#D3D3D3';
	            textOptions.id = this.legendID + this.generateId(legendOption, '_text_', i);
	            var fontcolor = legendOption.visible ? legend.textStyle.color : hiddenColor;
	            textOptions.text = legendOption.text;
	            textOptions.x = legendOption.location.x + (legend.shapeWidth / 2) + legend.shapePadding;
	            textOptions.y = legendOption.location.y + this.maxItemHeight / 4;
	            var element = helper_2.textElement(textOptions, legend.textStyle, fontcolor, group);
	            element.setAttribute('aria-label', legend.description || 'Click to show or hide the ' + legendOption.text + ' series');
	        };
	        BaseLegend.prototype.renderPagingElements = function (chart, bounds, textOption, legendGroup) {
	            var paginggroup = chart.renderer.createGroup({ id: this.legendID + '_navigation' });
	            legendGroup.appendChild(paginggroup);
	            var grayColor = '#545454';
	            var legend = chart.legendSettings;
	            var padding = legend.padding;
	            if (this.isChartControl || !this.isVertical) {
	                this.totalPages = Math.ceil(this.totalPages / Math.max(1, this.rowCount - 1));
	            }
	            else {
	                this.totalPages = Math.ceil(this.totalPages / this.maxColumns);
	            }
	            var symbolOption = new helper_1.PathOption(this.legendID + '_pageup', 'transparent', 2, grayColor, 1, '', '');
	            var iconSize = this.pageButtonSize;
	            paginggroup.setAttribute('style', 'cursor: pointer');
	            this.clipPathHeight = (this.rowCount - 1) * (this.maxItemHeight + padding);
	            this.clipRect.setAttribute('height', this.clipPathHeight.toString());
	            var x = bounds.x + iconSize / 2;
	            var y = bounds.y + this.clipPathHeight + ((bounds.height - this.clipPathHeight) / 2);
	            paginggroup.appendChild(helper_1.drawSymbol({ x: x, y: y }, 'LeftArrow', new helper_1.Size(iconSize, iconSize), '', symbolOption, 'LeftArrow'));
	            textOption.x = x + (iconSize / 2) + legend.padding;
	            var size = helper_1.measureText(this.totalPages + '/' + this.totalPages, legend.textStyle);
	            textOption.y = y + (size.height / 4);
	            textOption.id = this.legendID + '_pagenumber';
	            textOption.text = '1/' + this.totalPages;
	            var pageTextElement = helper_2.textElement(textOption, legend.textStyle, legend.textStyle.color, paginggroup);
	            x = (textOption.x + legend.padding + (iconSize / 2) + size.width);
	            symbolOption.id = this.legendID + '_pagedown';
	            paginggroup.appendChild(helper_1.drawSymbol({ x: x, y: y }, 'RightArrow', new helper_1.Size(iconSize, iconSize), '', symbolOption, 'RightArrow'));
	            paginggroup.setAttribute('transform', 'translate(' + (bounds.width - (2 * (iconSize + legend.padding) +
	                legend.padding + size.width)) + ', ' + 0 + ')');
	            this.translatePage(pageTextElement, this.currentPage - 1, this.currentPage);
	        };
	        BaseLegend.prototype.translatePage = function (pagingText, page, pageNumber) {
	            var size = (this.clipPathHeight) * page;
	            var translate = 'translate(0,-' + size + ')';
	            if (!this.isChartControl && this.isVertical) {
	                var pageLength = page * this.maxColumns;
	                size = this.pageXCollections[page * this.maxColumns] - this.legendBounds.x;
	                size = size < 0 ? 0 : size;
	                translate = 'translate(-' + size + ',0)';
	            }
	            this.legendTranslateGroup.setAttribute('transform', translate);
	            pagingText.textContent = (pageNumber) + '/' + this.totalPages;
	            this.currentPage = pageNumber;
	        };
	        BaseLegend.prototype.changePage = function (event, pageUp) {
	            var pageText = document.getElementById(this.legendID + '_pagenumber');
	            var page = parseInt(pageText.textContent.split('/')[0], 10);
	            if (pageUp && page > 1) {
	                this.translatePage(pageText, (page - 2), (page - 1));
	            }
	            else if (!pageUp && page < this.totalPages) {
	                this.translatePage(pageText, page, (page + 1));
	            }
	        };
	        BaseLegend.prototype.generateId = function (option, prefix, count) {
	            if (this.isChartControl) {
	                return prefix + count;
	            }
	            else {
	                return prefix + option.pointIndex;
	            }
	        };
	        BaseLegend.prototype.move = function (event, x, y, isTouch) {
	            var _this = this;
	            if (event.target.textContent.indexOf('...') > -1) {
	                var targetId = event.target.id.split(this.legendID + '_text_');
	                if (targetId.length === 2) {
	                    var index = parseInt(targetId[1], 10);
	                    var element = this.chart.element;
	                    if (!isNaN(index)) {
	                        if (isTouch) {
	                            helper_2.removeElement(this.chart.element.id + '_EJ2_Legend_Tooltip');
	                        }
	                        if (this.isChartControl) {
	                            helper_2.showTooltip(this.chart.series[index].name, x, y, element.offsetWidth, element.id + '_EJ2_Legend_Tooltip');
	                        }
	                        else {
	                            helper_2.showTooltip(this.chart.visibleSeries[0].points[index].x.toString(), x, y, element.offsetWidth, element.id + '_EJ2_Legend_Tooltip');
	                        }
	                    }
	                }
	            }
	            else {
	                helper_2.removeElement(this.chart.element.id + '_EJ2_Legend_Tooltip');
	            }
	            if (isTouch) {
	                clearTimeout(this.clearTooltip);
	                this.clearTooltip = setTimeout(function () { helper_2.removeElement(_this.chart.element.id + '_EJ2_Legend_Tooltip'); }, 1000);
	            }
	        };
	        return BaseLegend;
	    }());
	    exports.BaseLegend = BaseLegend;
	    var LegendOptions = (function () {
	        function LegendOptions(text, fill, shape, visible, type, markerShape, markerVisibility, pointIndex, seriesIndex) {
	            this.location = { x: 0, y: 0 };
	            this.text = text;
	            this.fill = fill;
	            this.shape = shape;
	            this.visible = visible;
	            this.type = type;
	            this.markerVisibility = markerVisibility;
	            this.markerShape = markerShape;
	            this.pointIndex = pointIndex;
	            this.seriesIndex = seriesIndex;
	        }
	        return LegendOptions;
	    }());
	    exports.LegendOptions = LegendOptions;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var ChartAnnotationSettings = (function (_super) {
	        __extends(ChartAnnotationSettings, _super);
	        function ChartAnnotationSettings() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return ChartAnnotationSettings;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property('0')
	    ], ChartAnnotationSettings.prototype, "x", void 0);
	    __decorate([
	        ej2_base_1.Property('0')
	    ], ChartAnnotationSettings.prototype, "y", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], ChartAnnotationSettings.prototype, "content", void 0);
	    __decorate([
	        ej2_base_1.Property('Center')
	    ], ChartAnnotationSettings.prototype, "horizontalAlignment", void 0);
	    __decorate([
	        ej2_base_1.Property('Pixel')
	    ], ChartAnnotationSettings.prototype, "coordinateUnits", void 0);
	    __decorate([
	        ej2_base_1.Property('Chart')
	    ], ChartAnnotationSettings.prototype, "region", void 0);
	    __decorate([
	        ej2_base_1.Property('Middle')
	    ], ChartAnnotationSettings.prototype, "verticalAlignment", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], ChartAnnotationSettings.prototype, "xAxisName", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], ChartAnnotationSettings.prototype, "yAxisName", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], ChartAnnotationSettings.prototype, "description", void 0);
	    exports.ChartAnnotationSettings = ChartAnnotationSettings;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(11), __webpack_require__(10), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, double_axis_1, double_range_1, helper_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var DateTime = (function (_super) {
	        __extends(DateTime, _super);
	        function DateTime(chart) {
	            return _super.call(this, chart) || this;
	        }
	        DateTime.prototype.calculateRangeAndInterval = function (size, axis) {
	            this.calculateRange(axis, size);
	            this.getActualRange(axis, size);
	            this.applyRangePadding(axis, size);
	            this.calculateVisibleLabels(axis);
	        };
	        DateTime.prototype.getActualRange = function (axis, size) {
	            var option = {
	                skeleton: 'full',
	                type: 'dateTime'
	            };
	            var dateParser = this.chart.intl.getDateParser(option);
	            var dateFormatter = this.chart.intl.getDateFormat(option);
	            if ((axis.minimum) !== null) {
	                this.min = Date.parse(dateParser(dateFormatter(axis.minimum)));
	            }
	            else if (this.min === null || this.min === Number.POSITIVE_INFINITY) {
	                this.min = Date.parse(dateParser(dateFormatter(new Date(1970, 1, 1))));
	            }
	            if ((axis.maximum) !== null) {
	                this.max = Date.parse(dateParser(dateFormatter(axis.maximum)));
	            }
	            else if (this.max === null || this.max === Number.NEGATIVE_INFINITY) {
	                this.max = Date.parse(dateParser(dateFormatter(new Date(1970, 5, 1))));
	            }
	            if (this.min === this.max) {
	                this.max = this.max + 2592000000;
	                this.min = this.min - 2592000000;
	            }
	            axis.actualRange = {};
	            axis.doubleRange = new double_range_1.DoubleRange(this.min, this.max);
	            var datetimeInterval = this.calculateDateTimeNiceInterval(axis, size, axis.doubleRange.start, axis.doubleRange.end);
	            if (!axis.interval) {
	                axis.actualRange.interval = datetimeInterval;
	            }
	            else {
	                axis.actualRange.interval = axis.interval;
	            }
	            axis.actualRange.min = axis.doubleRange.start;
	            axis.actualRange.max = axis.doubleRange.end;
	        };
	        DateTime.prototype.applyRangePadding = function (axis, size) {
	            this.start = (axis.actualRange.min);
	            this.end = (axis.actualRange.max);
	            var minimum;
	            var maximum;
	            var interval = axis.actualRange.interval;
	            if (!axis.setRange()) {
	                var rangePadding = axis.getRangePadding(this.chart);
	                minimum = new Date(this.start);
	                maximum = new Date(this.end);
	                var intervalType = axis.actualIntervalType;
	                if (rangePadding === 'None') {
	                    this.start = minimum.getTime();
	                    this.end = maximum.getTime();
	                }
	                else if (rangePadding === 'Additional' || rangePadding === 'Round') {
	                    switch (intervalType) {
	                        case 'Years':
	                            this.getYear(minimum, maximum, rangePadding, interval);
	                            break;
	                        case 'Months':
	                            this.getMonth(minimum, maximum, rangePadding, interval);
	                            break;
	                        case 'Days':
	                            this.getDay(minimum, maximum, rangePadding, interval);
	                            break;
	                        case 'Hours':
	                            this.getHour(minimum, maximum, rangePadding, interval);
	                            break;
	                        case 'Minutes':
	                            var minute = (minimum.getMinutes() / interval) * interval;
	                            var endMinute = maximum.getMinutes() + (minimum.getMinutes() - minute);
	                            if (rangePadding === 'Round') {
	                                this.start = (new Date(minimum.getFullYear(), minimum.getMonth(), minimum.getDate(), minimum.getHours(), minute, 0)).getTime();
	                                this.end = (new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), maximum.getHours(), endMinute, 59)).getTime();
	                            }
	                            else {
	                                this.start = (new Date(minimum.getFullYear(), maximum.getMonth(), minimum.getDate(), minimum.getHours(), minute + (-interval), 0)).getTime();
	                                this.end = (new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), maximum.getHours(), endMinute + (interval), 0)).getTime();
	                            }
	                            break;
	                        case 'Seconds':
	                            var second = (minimum.getSeconds() / interval) * interval;
	                            var endSecond = maximum.getSeconds() + (minimum.getSeconds() - second);
	                            if (rangePadding === 'Round') {
	                                this.start = (new Date(minimum.getFullYear(), minimum.getMonth(), minimum.getDate(), minimum.getHours(), minimum.getMinutes(), second, 0)).getTime();
	                                this.end = (new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), maximum.getHours(), maximum.getMinutes(), endSecond, 0)).getTime();
	                            }
	                            else {
	                                this.start = (new Date(minimum.getFullYear(), minimum.getMonth(), minimum.getDate(), minimum.getHours(), minimum.getMinutes(), second + (-interval), 0)).getTime();
	                                this.end = (new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), maximum.getHours(), maximum.getMinutes(), endSecond + (interval), 0)).getTime();
	                            }
	                            break;
	                    }
	                }
	            }
	            axis.actualRange.min = (axis.minimum != null) ? this.min : this.start;
	            axis.actualRange.max = (axis.maximum != null) ? this.max : this.end;
	            axis.actualRange.delta = (axis.actualRange.max - axis.actualRange.min);
	            axis.doubleRange = new double_range_1.DoubleRange(axis.actualRange.min, axis.actualRange.max);
	            this.calculateVisibleRange(size, axis);
	        };
	        DateTime.prototype.getYear = function (minimum, maximum, rangePadding, interval) {
	            var startYear = minimum.getFullYear();
	            var endYear = maximum.getFullYear();
	            if (rangePadding === 'Additional') {
	                this.start = (new Date(startYear - interval, 1, 1, 0, 0, 0)).getTime();
	                this.end = (new Date(endYear + interval, 1, 1, 0, 0, 0)).getTime();
	            }
	            else {
	                this.start = new Date(startYear, 0, 0, 0, 0, 0).getTime();
	                this.end = new Date(endYear, 11, 30, 23, 59, 59).getTime();
	            }
	        };
	        DateTime.prototype.getMonth = function (minimum, maximum, rangePadding, interval) {
	            var month = minimum.getMonth();
	            var endMonth = maximum.getMonth();
	            if (rangePadding === 'Round') {
	                this.start = (new Date(minimum.getFullYear(), month, 0, 0, 0, 0)).getTime();
	                this.end = (new Date(maximum.getFullYear(), endMonth, new Date(maximum.getFullYear(), maximum.getMonth(), 0).getDate(), 23, 59, 59)).getTime();
	            }
	            else {
	                this.start = (new Date(minimum.getFullYear(), month + (-interval), 1, 0, 0, 0)).getTime();
	                this.end = (new Date(maximum.getFullYear(), endMonth + (interval), endMonth === 2 ? 28 : 30, 0, 0, 0)).getTime();
	            }
	        };
	        DateTime.prototype.getDay = function (minimum, maximum, rangePadding, interval) {
	            var day = minimum.getDate();
	            var endDay = maximum.getDate();
	            if (rangePadding === 'Round') {
	                this.start = (new Date(minimum.getFullYear(), minimum.getMonth(), day, 0, 0, 0)).getTime();
	                this.end = (new Date(maximum.getFullYear(), maximum.getMonth(), endDay, 23, 59, 59)).getTime();
	            }
	            else {
	                this.start = (new Date(minimum.getFullYear(), minimum.getMonth(), day + (-interval), 0, 0, 0)).getTime();
	                this.end = (new Date(maximum.getFullYear(), maximum.getMonth(), endDay + (interval), 0, 0, 0)).getTime();
	            }
	        };
	        DateTime.prototype.getHour = function (minimum, maximum, rangePadding, interval) {
	            var hour = (minimum.getHours() / interval) * interval;
	            var endHour = maximum.getHours() + (minimum.getHours() - hour);
	            if (rangePadding === 'Round') {
	                this.start = (new Date(minimum.getFullYear(), minimum.getMonth(), minimum.getDate(), hour, 0, 0)).getTime();
	                this.end = (new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), endHour, 59, 59)).getTime();
	            }
	            else {
	                this.start = (new Date(minimum.getFullYear(), minimum.getMonth(), minimum.getDate(), hour + (-interval), 0, 0)).getTime();
	                this.end = (new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), endHour + (interval), 0, 0)).getTime();
	            }
	        };
	        DateTime.prototype.calculateVisibleRange = function (size, axis) {
	            axis.visibleRange = axis.actualRange;
	            if (axis.zoomFactor < 1 || axis.zoomPosition > 0) {
	                axis.calculateVisibleRange(size);
	                axis.visibleRange.interval = (axis.enableAutoIntervalOnZooming) ?
	                    this.calculateDateTimeNiceInterval(axis, size, axis.visibleRange.min, axis.visibleRange.max)
	                    : axis.visibleRange.interval;
	            }
	            axis.dateTimeInterval = this.increaseDateTimeInterval(axis, axis.visibleRange.min, axis.visibleRange.interval).getTime()
	                - axis.visibleRange.min;
	        };
	        DateTime.prototype.calculateVisibleLabels = function (axis) {
	            axis.visibleLabels = [];
	            var tempInterval = axis.visibleRange.min;
	            if (!axis.setRange()) {
	                tempInterval = this.alignRangeStart(axis, tempInterval, axis.visibleRange.interval, axis.actualIntervalType).getTime();
	            }
	            axis.format = this.chart.intl.getDateFormat({ skeleton: this.getLabelFormat(axis), type: 'dateTime' });
	            axis.startLabel = axis.format(new Date(axis.visibleRange.min));
	            axis.endLabel = axis.format(new Date(axis.visibleRange.max));
	            while (tempInterval <= axis.visibleRange.max) {
	                if (helper_1.withIn(tempInterval, axis.visibleRange)) {
	                    axis.triggerLabelRender(this.chart, tempInterval, axis.format(new Date(tempInterval)));
	                }
	                tempInterval = this.increaseDateTimeInterval(axis, tempInterval, axis.visibleRange.interval).getTime();
	            }
	            axis.getMaxLabelWidth(this.chart);
	        };
	        DateTime.prototype.increaseDateTimeInterval = function (axis, value, interval) {
	            var result = new Date(value);
	            interval = Math.ceil(interval);
	            switch (axis.actualIntervalType) {
	                case 'Years':
	                    result.setFullYear(result.getFullYear() + interval);
	                    return result;
	                case 'Months':
	                    result.setMonth(result.getMonth() + interval);
	                    return result;
	                case 'Days':
	                    result.setDate(result.getDate() + interval);
	                    return result;
	                case 'Hours':
	                    result.setHours(result.getHours() + interval);
	                    return result;
	                case 'Minutes':
	                    result.setMinutes(result.getMinutes() + interval);
	                    return result;
	                case 'Seconds':
	                    result.setSeconds(result.getSeconds() + interval);
	                    return result;
	            }
	            return result;
	        };
	        DateTime.prototype.alignRangeStart = function (axis, sDate, intervalSize, intervalType) {
	            var sResult = new Date(sDate);
	            switch (axis.actualIntervalType) {
	                case 'Years':
	                    var year = Math.floor(Math.floor(sResult.getFullYear() / intervalSize) * intervalSize);
	                    sResult = new Date(year, sResult.getMonth(), sResult.getDate(), 0, 0, 0);
	                    return sResult;
	                case 'Months':
	                    var month = Math.floor(Math.floor((sResult.getMonth()) / intervalSize) * intervalSize);
	                    sResult = new Date(sResult.getFullYear(), month, sResult.getDate(), 0, 0, 0);
	                    return sResult;
	                case 'Days':
	                    var day = Math.floor(Math.floor((sResult.getDate()) / intervalSize) * intervalSize);
	                    sResult = new Date(sResult.getFullYear(), sResult.getMonth(), day, 0, 0, 0);
	                    return sResult;
	                case 'Hours':
	                    var hour = Math.floor(Math.floor((sResult.getHours()) / intervalSize) * intervalSize);
	                    sResult = new Date(sResult.getFullYear(), sResult.getMonth(), sResult.getDate(), hour, 0, 0);
	                    return sResult;
	                case 'Minutes':
	                    var minutes = Math.floor(Math.floor((sResult.getMinutes()) / intervalSize) * intervalSize);
	                    sResult = new Date(sResult.getFullYear(), sResult.getMonth(), sResult.getDate(), sResult.getHours(), minutes, 0, 0);
	                    return sResult;
	                case 'Seconds':
	                    var seconds = Math.floor(Math.floor((sResult.getSeconds()) / intervalSize) * intervalSize);
	                    sResult = new Date(sResult.getFullYear(), sResult.getMonth(), sResult.getDate(), sResult.getHours(), sResult.getMinutes(), seconds, 0);
	                    return sResult;
	            }
	            return sResult;
	        };
	        DateTime.prototype.getLabelFormat = function (axis) {
	            var format;
	            if (axis.labelFormat) {
	                return axis.labelFormat;
	            }
	            if (axis.actualIntervalType === 'Years') {
	                format = 'yMMM';
	            }
	            else if (axis.actualIntervalType === 'Months') {
	                format = 'MMMd';
	            }
	            else if (axis.actualIntervalType === 'Days') {
	                format = 'yMd';
	            }
	            else if (axis.actualIntervalType === 'Hours') {
	                format = 'EHm';
	            }
	            else if (axis.actualIntervalType === 'Minutes' || axis.actualIntervalType === 'Seconds') {
	                format = 'Hms';
	            }
	            else {
	                format = 'Hms';
	            }
	            return format;
	        };
	        DateTime.prototype.calculateDateTimeNiceInterval = function (axis, size, start, end) {
	            var oneDay = 24 * 60 * 60 * 1000;
	            var startDate = new Date(start);
	            var endDate = new Date(end);
	            var totalDays = (Math.abs((startDate.getTime() - endDate.getTime()) / (oneDay)));
	            var interval;
	            axis.actualIntervalType = axis.intervalType;
	            switch (axis.intervalType) {
	                case 'Years':
	                    interval = this.calculateNumericNiceInterval(axis, totalDays / 365, size);
	                    break;
	                case 'Months':
	                    interval = this.calculateNumericNiceInterval(axis, totalDays / 30, size);
	                    break;
	                case 'Days':
	                    interval = this.calculateNumericNiceInterval(axis, totalDays, size);
	                    break;
	                case 'Hours':
	                    interval = this.calculateNumericNiceInterval(axis, totalDays * 24, size);
	                    break;
	                case 'Minutes':
	                    interval = this.calculateNumericNiceInterval(axis, totalDays * 24 * 60, size);
	                    break;
	                case 'Seconds':
	                    interval = this.calculateNumericNiceInterval(axis, totalDays * 24 * 60 * 60, size);
	                    break;
	                case 'Auto':
	                    interval = this.calculateNumericNiceInterval(axis, totalDays / 365, size);
	                    if (interval >= 1) {
	                        axis.actualIntervalType = 'Years';
	                        return interval;
	                    }
	                    interval = this.calculateNumericNiceInterval(axis, totalDays / 30, size);
	                    if (interval >= 1) {
	                        axis.actualIntervalType = 'Months';
	                        return interval;
	                    }
	                    interval = this.calculateNumericNiceInterval(axis, totalDays, size);
	                    if (interval >= 1) {
	                        axis.actualIntervalType = 'Days';
	                        return interval;
	                    }
	                    interval = this.calculateNumericNiceInterval(axis, totalDays * 24, size);
	                    if (interval >= 1) {
	                        axis.actualIntervalType = 'Hours';
	                        return interval;
	                    }
	                    interval = this.calculateNumericNiceInterval(axis, totalDays * 24 * 60, size);
	                    if (interval >= 1) {
	                        axis.actualIntervalType = 'Minutes';
	                        return interval;
	                    }
	                    interval = this.calculateNumericNiceInterval(axis, totalDays * 24 * 60 * 60, size);
	                    axis.actualIntervalType = 'Seconds';
	                    return interval;
	            }
	            return interval;
	        };
	        DateTime.prototype.getModuleName = function () {
	            return 'DateTime';
	        };
	        DateTime.prototype.destroy = function (chart) {
	        };
	        return DateTime;
	    }(double_axis_1.Double));
	    exports.DateTime = DateTime;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(11), __webpack_require__(10), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, double_axis_1, double_range_1, helper_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var Category = (function (_super) {
	        __extends(Category, _super);
	        function Category(chart) {
	            return _super.call(this, chart) || this;
	        }
	        Category.prototype.calculateRangeAndInterval = function (size, axis) {
	            this.calculateRange(axis, size);
	            this.getActualRange(axis, size);
	            this.applyRangePadding(axis, size);
	            this.calculateVisibleLabels(axis);
	        };
	        Category.prototype.getActualRange = function (axis, size) {
	            axis.doubleRange = new double_range_1.DoubleRange(this.min, this.max);
	            axis.actualRange = {};
	            if (!axis.interval) {
	                axis.actualRange.interval = Math.max(1, Math.floor(axis.doubleRange.delta / axis.getActualDesiredIntervalsCount(size)));
	            }
	            else {
	                axis.actualRange.interval = Math.ceil(axis.interval);
	            }
	            axis.actualRange.min = axis.doubleRange.start;
	            axis.actualRange.max = axis.doubleRange.end;
	            axis.actualRange.delta = axis.doubleRange.delta;
	        };
	        Category.prototype.applyRangePadding = function (axis, size) {
	            var ticks = (axis.labelPlacement === 'BetweenTicks') ? 0.5 : 0;
	            if (ticks > 0) {
	                axis.actualRange.min -= ticks;
	                axis.actualRange.max += ticks;
	            }
	            else {
	                axis.actualRange.max += axis.actualRange.max ? 0 : 0.5;
	            }
	            axis.doubleRange = new double_range_1.DoubleRange(axis.actualRange.min, axis.actualRange.max);
	            axis.actualRange.delta = axis.doubleRange.delta;
	            this.calculateVisibleRange(size, axis);
	        };
	        Category.prototype.calculateVisibleLabels = function (axis) {
	            axis.visibleLabels = [];
	            var tempInterval = axis.visibleRange.min - (axis.visibleRange.min % axis.visibleRange.interval);
	            var position;
	            axis.startLabel = axis.labels[Math.round(axis.visibleRange.min)];
	            axis.endLabel = axis.labels[Math.floor(axis.visibleRange.max)];
	            for (; tempInterval <= axis.visibleRange.max; tempInterval += axis.visibleRange.interval) {
	                if (helper_1.withIn(tempInterval, axis.visibleRange) && axis.labels.length > 0) {
	                    position = Math.round(tempInterval);
	                    axis.triggerLabelRender(this.chart, position, axis.labels[position] ? axis.labels[position] : position.toString());
	                }
	            }
	            axis.getMaxLabelWidth(this.chart);
	        };
	        Category.prototype.getModuleName = function () {
	            return 'Category';
	        };
	        Category.prototype.destroy = function (chart) {
	        };
	        return Category;
	    }(double_axis_1.Double));
	    exports.Category = Category;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(11), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, double_axis_1, helper_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var Logarithmic = (function (_super) {
	        __extends(Logarithmic, _super);
	        function Logarithmic(chart) {
	            return _super.call(this, chart) || this;
	        }
	        Logarithmic.prototype.calculateRangeAndInterval = function (size, axis) {
	            this.calculateRange(axis, size);
	            this.getActualRange(axis, size);
	            this.calculateVisibleRange(size, axis);
	            this.calculateVisibleLabels(axis, this.chart);
	        };
	        Logarithmic.prototype.getActualRange = function (axis, size) {
	            this.initializeDoubleRange(axis);
	            var logStart = helper_1.logBase(this.min, axis.logBase);
	            logStart = isFinite(logStart) ? logStart : this.min;
	            var logEnd = helper_1.logBase(this.max, axis.logBase);
	            logEnd = isFinite(logStart) ? logEnd : this.max;
	            this.min = Math.floor(logStart / 1);
	            this.max = Math.ceil(logEnd / 1);
	            axis.actualRange.interval = axis.interval || this.calculateLogNiceInterval(this.max - this.min, size, axis);
	            axis.actualRange.min = this.min;
	            axis.actualRange.max = this.max;
	            axis.actualRange.delta = this.max - this.min;
	        };
	        Logarithmic.prototype.calculateVisibleRange = function (size, axis) {
	            axis.visibleRange = axis.actualRange;
	            if (axis.zoomFactor < 1 || axis.zoomPosition > 0) {
	                axis.calculateVisibleRange(size);
	                axis.visibleRange.interval = (axis.enableAutoIntervalOnZooming) ?
	                    this.calculateLogNiceInterval(axis.doubleRange.delta, size, axis)
	                    : axis.visibleRange.interval;
	                axis.visibleRange.interval = Math.floor(axis.visibleRange.interval) === 0 ? 1 : Math.floor(axis.visibleRange.interval);
	            }
	        };
	        Logarithmic.prototype.calculateLogNiceInterval = function (delta, size, axis) {
	            var actualDesiredIntervalsCount = axis.getActualDesiredIntervalsCount(size);
	            var niceInterval = delta;
	            var minInterval = Math.pow(10, Math.floor(helper_1.logBase(niceInterval, 10)));
	            for (var j = 0, len = axis.intervalDivs.length; j < len; j++) {
	                var currentInterval = minInterval * axis.intervalDivs[j];
	                if (actualDesiredIntervalsCount < (delta / currentInterval)) {
	                    break;
	                }
	                niceInterval = currentInterval;
	            }
	            return niceInterval;
	        };
	        Logarithmic.prototype.calculateVisibleLabels = function (axis, chart) {
	            var tempInterval = axis.visibleRange.min;
	            axis.visibleLabels = [];
	            if (axis.zoomFactor < 1 || axis.zoomPosition > 0) {
	                tempInterval = axis.visibleRange.min - (axis.visibleRange.min % axis.visibleRange.interval);
	            }
	            var axisFormat = this.getFormat(axis);
	            var isCustomFormat = axisFormat.match('{value}') !== null;
	            axis.format = chart.intl.getNumberFormat({ format: isCustomFormat ? '' : axisFormat,
	                useGrouping: chart.useGroupingSeparator });
	            axis.startLabel = axis.format(Math.pow(axis.logBase, axis.visibleRange.min));
	            axis.endLabel = axis.format(Math.pow(axis.logBase, axis.visibleRange.max));
	            for (; tempInterval <= axis.visibleRange.max; tempInterval += axis.visibleRange.interval) {
	                if (helper_1.withIn(tempInterval, axis.actualRange)) {
	                    axis.triggerLabelRender(this.chart, tempInterval, this.formatValue(axis, isCustomFormat, axisFormat, Math.pow(axis.logBase, tempInterval)));
	                }
	            }
	            axis.getMaxLabelWidth(this.chart);
	        };
	        Logarithmic.prototype.getModuleName = function () {
	            return 'Logarithmic';
	        };
	        Logarithmic.prototype.destroy = function (chart) {
	        };
	        return Logarithmic;
	    }(double_axis_1.Double));
	    exports.Logarithmic = Logarithmic;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, line_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var LineSeries = (function (_super) {
	        __extends(LineSeries, _super);
	        function LineSeries() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        LineSeries.prototype.render = function (series, xAxis, yAxis) {
	            var point1;
	            var point2;
	            var direction = '';
	            var prevPoint = null;
	            var startPoint = 'M';
	            var options;
	            var visiblePoints = this.improveChartPerformance(series);
	            for (var _i = 0, visiblePoints_1 = visiblePoints; _i < visiblePoints_1.length; _i++) {
	                var point = visiblePoints_1[_i];
	                if (point.visible && helper_1.withInRange(visiblePoints[point.index - 1], point, visiblePoints[point.index + 1], series)) {
	                    if (prevPoint != null) {
	                        point1 = helper_1.getPoint(prevPoint.xValue, prevPoint.yValue, xAxis, yAxis);
	                        point2 = helper_1.getPoint(point.xValue, point.yValue, xAxis, yAxis);
	                        direction = direction.concat(startPoint + ' ' + (point1.x) + ' ' + (point1.y) + ' ' +
	                            'L' + ' ' + (point2.x) + ' ' + (point2.y) + ' ');
	                        startPoint = 'L';
	                    }
	                    prevPoint = point;
	                    point.symbolLocation = helper_1.getPoint(point.xValue, point.yValue, xAxis, yAxis);
	                    point.region = new helper_1.Rect(point.symbolLocation.x - series.marker.width, point.symbolLocation.y - series.marker.height, 2 * series.marker.width, 2 * series.marker.height);
	                }
	                else {
	                    prevPoint = null;
	                    startPoint = 'M';
	                    point.symbolLocation = null;
	                }
	            }
	            options = new helper_1.PathOption(series.chart.element.id + '_Series_' + series.index, 'none', series.width, series.interior, series.opacity, series.dashArray, direction);
	            this.appendLinePath(options, series);
	            this.renderMarker(series);
	        };
	        LineSeries.prototype.doAnimation = function (series) {
	            var option = series.animation;
	            this.doProgressiveAnimation(series, option);
	        };
	        LineSeries.prototype.getModuleName = function () {
	            return 'LineSeries';
	        };
	        LineSeries.prototype.destroy = function (chart) {
	        };
	        return LineSeries;
	    }(line_base_1.LineBase));
	    exports.LineSeries = LineSeries;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(24)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, column_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var ColumnSeries = (function (_super) {
	        __extends(ColumnSeries, _super);
	        function ColumnSeries() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        ColumnSeries.prototype.render = function (series) {
	            var rect;
	            var sideBySideInfo = this.getSideBySideInfo(series);
	            var origin = Math.max(series.yAxis.visibleRange.min, 0);
	            var argsData;
	            for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
	                var point = _a[_i];
	                point.symbolLocation = null;
	                if (point.visible && helper_1.withInRange(series.points[point.index - 1], point, series.points[point.index + 1], series)) {
	                    rect = this.getRectangle(point.xValue + sideBySideInfo.start, point.yValue, point.xValue + sideBySideInfo.end, origin, series);
	                    argsData = this.triggerEvent(series.chart, series, point);
	                    if (!argsData.cancel) {
	                        this.updateXRegion(point, rect, series);
	                        this.drawRectangle(series, point, rect, argsData);
	                    }
	                }
	            }
	        };
	        ColumnSeries.prototype.doAnimation = function (series) {
	            this.animate(series);
	        };
	        ColumnSeries.prototype.getModuleName = function () {
	            return 'ColumnSeries';
	        };
	        ColumnSeries.prototype.destroy = function (chart) {
	        };
	        return ColumnSeries;
	    }(column_base_1.ColumnBase));
	    exports.ColumnSeries = ColumnSeries;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(10), __webpack_require__(3), __webpack_require__(3), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, double_range_1, helper_1, helper_2, constants_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var ColumnBase = (function () {
	        function ColumnBase() {
	        }
	        ColumnBase.prototype.getSideBySideInfo = function (series) {
	            if (!series.position) {
	                this.getSideBySidePositions(series);
	            }
	            series.isRectSeries = true;
	            var visibleSeries = series.chart.visibleSeries;
	            var seriesSpacing = 0;
	            var pointSpacing = 0.7;
	            var minimumPointDelta = helper_1.getMinPointsDelta(series.xAxis, visibleSeries);
	            var width = minimumPointDelta * pointSpacing;
	            var radius;
	            var location = (series.position) / series.rectCount - 0.5;
	            var doubleRange = new double_range_1.DoubleRange(location, location + (1 / series.rectCount));
	            if (!(isNaN(doubleRange.start) || isNaN(doubleRange.end))) {
	                doubleRange = new double_range_1.DoubleRange(doubleRange.start * width, doubleRange.end * width);
	                radius = (seriesSpacing) * (doubleRange.start - doubleRange.end);
	                doubleRange = new double_range_1.DoubleRange(doubleRange.start + radius / 2, doubleRange.end - radius / 2);
	            }
	            return doubleRange;
	        };
	        ColumnBase.prototype.getRectangle = function (x1, y1, x2, y2, series) {
	            var point1 = this.getPointOrigin(x1, y1, series);
	            var point2 = this.getPointOrigin(x2, y2, series);
	            return new helper_1.Rect(Math.min(point1.x, point2.x), Math.min(point1.y, point2.y), Math.abs(point2.x - point1.x), Math.abs(point2.y - point1.y));
	        };
	        ColumnBase.prototype.getPointOrigin = function (x, y, series) {
	            if (series.chart.requireInvertedAxis) {
	                x = (series.yAxis.valueType === 'Logarithmic' ? helper_1.logBase(x === 0 ? 1 : x, series.yAxis.logBase) : x);
	                y = (series.xAxis.valueType === 'Logarithmic' ? helper_1.logBase(y, series.xAxis.logBase) : y);
	                return new helper_1.ChartLocation((helper_1.valueToCoefficient(x, series.yAxis)) * series.yAxis.rect.width, (1 - helper_1.valueToCoefficient(y, series.xAxis)) * series.xAxis.rect.height);
	            }
	            else {
	                x = (series.xAxis.valueType === 'Logarithmic' ? helper_1.logBase(x, series.xAxis.logBase) : x);
	                y = (series.yAxis.valueType === 'Logarithmic' ? helper_1.logBase(y === 0 ? 1 : y, series.yAxis.logBase) : y);
	                return new helper_1.ChartLocation((helper_1.valueToCoefficient(x, series.xAxis)) * series.xAxis.rect.width, (1 - helper_1.valueToCoefficient(y, series.yAxis)) * series.yAxis.rect.height);
	            }
	        };
	        ColumnBase.prototype.getSideBySidePositions = function (series) {
	            var chart = series.chart;
	            var seriesCollection = [];
	            for (var _i = 0, _a = chart.columns; _i < _a.length; _i++) {
	                var columnItem = _a[_i];
	                for (var _b = 0, _c = chart.rows; _b < _c.length; _b++) {
	                    var item = _c[_b];
	                    this.findRectPosition(series.findSeriesCollection(columnItem, item, false));
	                }
	            }
	        };
	        ColumnBase.prototype.findRectPosition = function (seriesCollection) {
	            var stackingGroup = [];
	            var vSeries = { rectCount: 0, position: null };
	            seriesCollection.forEach(function (value) {
	                if (value.type.indexOf('Stacking') !== -1) {
	                    if (value.stackingGroup) {
	                        if (stackingGroup[value.stackingGroup] === undefined) {
	                            value.position = vSeries.rectCount;
	                            stackingGroup[value.stackingGroup] = vSeries.rectCount++;
	                        }
	                        else {
	                            value.position = stackingGroup[value.stackingGroup];
	                        }
	                    }
	                    else {
	                        if (vSeries.position === null) {
	                            value.position = vSeries.rectCount;
	                            vSeries.position = vSeries.rectCount++;
	                        }
	                        else {
	                            value.position = vSeries.position;
	                        }
	                    }
	                }
	                else {
	                    value.position = vSeries.rectCount++;
	                }
	            });
	            seriesCollection.forEach(function (value) {
	                value.rectCount = vSeries.rectCount;
	            });
	        };
	        ColumnBase.prototype.updateXRegion = function (point, rect, series) {
	            point.region = rect;
	            point.symbolLocation = {
	                x: rect.x + (rect.width) / 2,
	                y: ((series.seriesType === 'HighLow' && series.yAxis.isInversed) || (point.yValue < 0 !== series.yAxis.isInversed)) ?
	                    rect.y + rect.height : rect.y
	            };
	        };
	        ColumnBase.prototype.updateYRegion = function (point, rect, series) {
	            point.region = new helper_1.Rect(rect.x, rect.y, rect.width, rect.height);
	            point.symbolLocation = {
	                x: point.yValue < 0 !== series.yAxis.isInversed ? rect.x : rect.x + rect.width,
	                y: rect.y + rect.height / 2
	            };
	        };
	        ColumnBase.prototype.triggerEvent = function (chart, series, point) {
	            var argsData = {
	                cancel: false, name: constants_1.pointRender, series: series, point: point, fill: series.interior, border: series.border
	            };
	            chart.trigger(constants_1.pointRender, argsData);
	            point.color = argsData.fill;
	            return argsData;
	        };
	        ColumnBase.prototype.drawRectangle = function (series, point, rect, argsData) {
	            var check = series.chart.requireInvertedAxis ? rect.height : rect.width;
	            if (check <= 0) {
	                return null;
	            }
	            var direction = ('M' + ' ' + (rect.x) + ' ' + (rect.y + rect.height) + ' ' +
	                'L' + ' ' + (rect.x) + ' ' + (rect.y) + ' ' +
	                'L' + ' ' + (rect.x + rect.width) + ' ' + (rect.y) + ' ' +
	                'L' + ' ' + (rect.x + rect.width) + ' ' + (rect.y + rect.height) + ' ' + 'Z');
	            var options = new helper_1.PathOption(series.chart.element.id + '_Series_' + series.index + '_Point_' + point.index, argsData.fill, argsData.border.width, argsData.border.color, series.opacity, series.dashArray, direction);
	            var element = series.chart.renderer.drawPath(options);
	            switch (series.seriesType) {
	                case 'XY':
	                    element.setAttribute('aria-label', point.x.toString() + ':' + point.y.toString());
	                    break;
	                case 'HighLow':
	                    element.setAttribute('aria-label', point.x.toString() + ':' + point.high.toString() + ':' + point.low.toString());
	                    break;
	            }
	            series.seriesElement.appendChild(element);
	        };
	        ColumnBase.prototype.animate = function (series) {
	            var rectElements = series.seriesElement.childNodes;
	            var count = 1;
	            for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
	                var point = _a[_i];
	                if (!point.symbolLocation) {
	                    continue;
	                }
	                this.animateRect(rectElements[count], series, point);
	                count++;
	            }
	        };
	        ColumnBase.prototype.animateRect = function (element, series, point) {
	            var option = series.animation;
	            var effect = helper_2.getAnimationFunction('Linear');
	            var isPlot = point.yValue < 0;
	            var x;
	            var y;
	            var elementHeight = +point.region.height;
	            var elementWidth = +point.region.width;
	            var centerX;
	            var centerY;
	            if (!series.chart.requireInvertedAxis) {
	                x = +point.region.x;
	                if (series.type === 'StackingColumn' || series.type === 'StackingColumn100') {
	                    y = (1 - helper_1.valueToCoefficient(0, series.yAxis)) * (series.yAxis.rect.height);
	                    centerX = x;
	                    centerY = y;
	                }
	                else {
	                    y = +point.region.y;
	                    centerY = (series.seriesType === 'HighLow') ? y + elementHeight / 2 :
	                        (isPlot !== series.yAxis.isInversed) ? y : y + elementHeight;
	                    centerX = isPlot ? x : x + elementWidth;
	                }
	            }
	            else {
	                y = +point.region.y;
	                if (series.type === 'StackingBar' || series.type === 'StackingBar100') {
	                    x = (helper_1.valueToCoefficient(0, series.yAxis)) * series.yAxis.rect.width;
	                    centerX = x;
	                    centerY = y;
	                }
	                else {
	                    x = +point.region.x;
	                    centerY = isPlot ? y : y + elementHeight;
	                    centerX = isPlot !== series.yAxis.isInversed ? x + elementWidth : x;
	                }
	            }
	            var value;
	            element.style.visibility = 'hidden';
	            new ej2_base_1.Animation({}).animate(element, {
	                duration: option.duration,
	                delay: option.delay,
	                progress: function (args) {
	                    if (args.timeStamp >= args.delay) {
	                        element.style.visibility = 'visible';
	                        if (!series.chart.requireInvertedAxis) {
	                            elementHeight = elementHeight ? elementHeight : 1;
	                            value = effect(args.timeStamp - args.delay, 0, elementHeight, args.duration);
	                            element.setAttribute('transform', 'translate(' + centerX + ' ' + centerY +
	                                ') scale(1,' + (value / elementHeight) + ') translate(' + (-centerX) + ' ' + (-centerY) + ')');
	                        }
	                        else {
	                            elementWidth = elementWidth ? elementWidth : 1;
	                            value = effect(args.timeStamp - args.delay, 0, elementWidth, args.duration);
	                            element.setAttribute('transform', 'translate(' + centerX + ' ' + centerY +
	                                ') scale(' + (value / elementWidth) + ', 1) translate(' + (-centerX) + ' ' + (-centerY) + ')');
	                        }
	                    }
	                },
	                end: function (model) {
	                    element.setAttribute('transform', 'translate(0,0)');
	                    if ((point.index === series.points.length - 1)) {
	                        series.chart.trigger('animationComplete', { series: series });
	                    }
	                }
	            });
	        };
	        return ColumnBase;
	    }());
	    exports.ColumnBase = ColumnBase;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, line_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var AreaSeries = (function (_super) {
	        __extends(AreaSeries, _super);
	        function AreaSeries() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        AreaSeries.prototype.render = function (series, xAxis, yAxis) {
	            var firstPoint;
	            var endPoint;
	            var startPoint = null;
	            var direction = '';
	            var pointsLength = series.points.length;
	            var origin = Math.max(series.yAxis.visibleRange.min, 0);
	            var options;
	            var point;
	            var currentXValue;
	            for (var i = 0; i < pointsLength; i++) {
	                point = series.points[i];
	                currentXValue = point.xValue;
	                point.symbolLocation = null;
	                if (point.visible && helper_1.withInRange(series.points[i - 1], point, series.points[i + 1], series)) {
	                    if (startPoint === null) {
	                        startPoint = new helper_1.ChartLocation(0, 0);
	                        startPoint.x = currentXValue;
	                        startPoint.y = origin;
	                        firstPoint = helper_1.getPoint(currentXValue, origin, xAxis, yAxis);
	                        direction += ('M' + ' ' + (firstPoint.x) + ' ' + (firstPoint.y) + ' ');
	                    }
	                    firstPoint = helper_1.getPoint(currentXValue, point.yValue, xAxis, yAxis);
	                    direction += ('L' + ' ' + (firstPoint.x) + ' ' + (firstPoint.y) + ' ');
	                    if (series.points[i + 1] && !series.points[i + 1].visible) {
	                        firstPoint = helper_1.getPoint(currentXValue, origin, xAxis, yAxis);
	                        endPoint = helper_1.getPoint(startPoint.x, startPoint.y, xAxis, yAxis);
	                        direction += ('L' + ' ' + (firstPoint.x) + ' ' + (firstPoint.y) + ' ' + 'L' +
	                            ' ' + (endPoint.x) + ' ' + (endPoint.y) + ' ');
	                        startPoint = null;
	                    }
	                    point.symbolLocation = helper_1.getPoint(currentXValue, point.yValue, xAxis, yAxis);
	                    point.region = new helper_1.Rect(point.symbolLocation.x - series.marker.width, point.symbolLocation.y - series.marker.height, 2 * series.marker.width, 2 * series.marker.height);
	                }
	            }
	            if (pointsLength > 1) {
	                startPoint = { 'x': series.points[pointsLength - 1].xValue, 'y': origin };
	                endPoint = helper_1.getPoint(startPoint.x, startPoint.y, xAxis, yAxis);
	                direction += ('L' + ' ' + (endPoint.x) + ' ' + (endPoint.y) + ' ');
	            }
	            else {
	                direction = '';
	            }
	            options = new helper_1.PathOption(series.chart.element.id + '_Series_' + series.index, series.interior, series.border.width, series.border.color, series.opacity, series.dashArray, direction);
	            this.appendLinePath(options, series);
	            this.renderMarker(series);
	        };
	        AreaSeries.prototype.destroy = function (chart) {
	        };
	        AreaSeries.prototype.getModuleName = function () {
	            return 'AreaSeries';
	        };
	        AreaSeries.prototype.doAnimation = function (series) {
	            var option = series.animation;
	            this.doLinearAnimation(series, option);
	        };
	        return AreaSeries;
	    }(line_base_1.LineBase));
	    exports.AreaSeries = AreaSeries;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(24)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, column_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var BarSeries = (function (_super) {
	        __extends(BarSeries, _super);
	        function BarSeries() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        BarSeries.prototype.render = function (series) {
	            var origin = Math.max(series.yAxis.visibleRange.min, 0);
	            var sideBySideInfo = this.getSideBySideInfo(series);
	            var rect;
	            var argsData;
	            for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
	                var point = _a[_i];
	                point.symbolLocation = null;
	                if (point.visible && helper_1.withInRange(series.points[point.index - 1], point, series.points[point.index + 1], series)) {
	                    rect = this.getRectangle(point.yValue, point.xValue + sideBySideInfo.start, origin, point.xValue + sideBySideInfo.end, series);
	                    argsData = this.triggerEvent(series.chart, series, point);
	                    if (!argsData.cancel) {
	                        this.updateYRegion(point, rect, series);
	                        this.drawRectangle(series, point, rect, argsData);
	                    }
	                }
	            }
	        };
	        BarSeries.prototype.doAnimation = function (series) {
	            this.animate(series);
	        };
	        BarSeries.prototype.destroy = function (chart) {
	        };
	        BarSeries.prototype.getModuleName = function () {
	            return 'BarSeries';
	        };
	        return BarSeries;
	    }(column_base_1.ColumnBase));
	    exports.BarSeries = BarSeries;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(24)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, column_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var StackingBarSeries = (function (_super) {
	        __extends(StackingBarSeries, _super);
	        function StackingBarSeries() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        StackingBarSeries.prototype.render = function (series) {
	            var origin = Math.max(series.yAxis.visibleRange.min, 0);
	            var sideBySideInfo = this.getSideBySideInfo(series);
	            var stackedValue = series.stackedValues;
	            var rect;
	            var argsData;
	            for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
	                var point = _a[_i];
	                point.symbolLocation = null;
	                if (point.visible && helper_1.withInRange(series.points[point.index - 1], point, series.points[point.index + 1], series)) {
	                    rect = this.getRectangle(stackedValue.endValues[point.index], point.xValue + sideBySideInfo.start, stackedValue.startValues[point.index], point.xValue + sideBySideInfo.end, series);
	                    argsData = this.triggerEvent(series.chart, series, point);
	                    if (!argsData.cancel) {
	                        this.drawRectangle(series, point, rect, argsData);
	                        this.updateYRegion(point, rect, series);
	                    }
	                }
	            }
	        };
	        StackingBarSeries.prototype.destroy = function (chart) {
	        };
	        StackingBarSeries.prototype.getModuleName = function () {
	            return 'StackingBarSeries';
	        };
	        StackingBarSeries.prototype.doAnimation = function (series) {
	            this.animate(series);
	        };
	        return StackingBarSeries;
	    }(column_base_1.ColumnBase));
	    exports.StackingBarSeries = StackingBarSeries;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(24)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, column_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var StackingColumnSeries = (function (_super) {
	        __extends(StackingColumnSeries, _super);
	        function StackingColumnSeries() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        StackingColumnSeries.prototype.render = function (series) {
	            series.isRectSeries = true;
	            var origin = Math.max(series.yAxis.visibleRange.min, 0);
	            var sideBySideInfo = this.getSideBySideInfo(series);
	            var rect;
	            var argsData;
	            var stackedValue = series.stackedValues;
	            for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
	                var point = _a[_i];
	                point.symbolLocation = null;
	                if (point.visible && helper_1.withInRange(series.points[point.index - 1], point, series.points[point.index + 1], series)) {
	                    rect = this.getRectangle(point.xValue + sideBySideInfo.start, stackedValue.endValues[point.index], point.xValue + sideBySideInfo.end, stackedValue.startValues[point.index], series);
	                    argsData = this.triggerEvent(series.chart, series, point);
	                    if (!argsData.cancel) {
	                        this.drawRectangle(series, point, rect, argsData);
	                        this.updateXRegion(point, rect, series);
	                    }
	                }
	            }
	        };
	        StackingColumnSeries.prototype.doAnimation = function (series) {
	            this.animate(series);
	        };
	        StackingColumnSeries.prototype.destroy = function (chart) {
	        };
	        StackingColumnSeries.prototype.getModuleName = function () {
	            return 'StackingColumnSeries';
	        };
	        return StackingColumnSeries;
	    }(column_base_1.ColumnBase));
	    exports.StackingColumnSeries = StackingColumnSeries;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, line_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var StepLineSeries = (function (_super) {
	        __extends(StepLineSeries, _super);
	        function StepLineSeries() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        StepLineSeries.prototype.render = function (series, xAxis, yAxis) {
	            var direction = '';
	            var startPoint = 'M';
	            var prevPoint = null;
	            var pathOptions;
	            var lineLength;
	            var point1;
	            var point2;
	            var visiblePoints = this.improveChartPerformance(series);
	            if (series.xAxis.valueType === 'Category' && series.xAxis.labelPlacement === 'BetweenTicks') {
	                lineLength = 0.5;
	            }
	            else {
	                lineLength = 0;
	            }
	            for (var _i = 0, visiblePoints_1 = visiblePoints; _i < visiblePoints_1.length; _i++) {
	                var point = visiblePoints_1[_i];
	                point.symbolLocation = null;
	                if (point.visible && helper_1.withInRange(visiblePoints[point.index - 1], point, visiblePoints[point.index + 1], series)) {
	                    if (prevPoint != null) {
	                        point2 = helper_1.getPoint(point.xValue, point.yValue, xAxis, yAxis);
	                        point1 = helper_1.getPoint(prevPoint.xValue, prevPoint.yValue, xAxis, yAxis);
	                        direction = direction.concat(startPoint + ' ' + (point1.x) + ' ' + (point1.y) + ' ' + 'L' + ' ' +
	                            (point2.x) + ' ' + (point1.y) + 'L' + ' ' + (point2.x) + ' ' + (point2.y) + ' ');
	                        startPoint = 'L';
	                    }
	                    else {
	                        point1 = helper_1.getPoint(point.xValue - lineLength, point.yValue, xAxis, yAxis);
	                        direction = direction.concat(startPoint + ' ' + (point1.x) + ' ' + (point1.y) + ' ');
	                        startPoint = 'L';
	                    }
	                    point.symbolLocation = helper_1.getPoint(point.xValue, point.yValue, xAxis, yAxis);
	                    prevPoint = point;
	                    point.region = new helper_1.Rect(point.symbolLocation.x - series.marker.width, point.symbolLocation.y - series.marker.height, 2 * series.marker.width, 2 * series.marker.height);
	                }
	                else {
	                    prevPoint = null;
	                    startPoint = 'M';
	                }
	            }
	            point1 = helper_1.getPoint((visiblePoints[visiblePoints.length - 1].xValue + lineLength), visiblePoints[visiblePoints.length - 1].yValue, xAxis, yAxis);
	            direction = direction.concat(startPoint + ' ' + (point1.x) + ' ' + (point1.y) + ' ');
	            pathOptions = new helper_1.PathOption(series.chart.element.id + '_Series_' + series.index, 'transparent', series.width, series.interior, series.opacity, series.dashArray, direction);
	            this.appendLinePath(pathOptions, series);
	            this.renderMarker(series);
	        };
	        StepLineSeries.prototype.doAnimation = function (series) {
	            var option = series.animation;
	            this.doLinearAnimation(series, option);
	        };
	        StepLineSeries.prototype.destroy = function (chart) {
	        };
	        StepLineSeries.prototype.getModuleName = function () {
	            return 'StepLineSeries';
	        };
	        return StepLineSeries;
	    }(line_base_1.LineBase));
	    exports.StepLineSeries = StepLineSeries;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, line_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var StepAreaSeries = (function (_super) {
	        __extends(StepAreaSeries, _super);
	        function StepAreaSeries() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        StepAreaSeries.prototype.render = function (series, xAxis, yAxis) {
	            var currentPoint;
	            var secondPoint;
	            var start = null;
	            var direction = '';
	            var pointsLength = series.points.length;
	            var origin = Math.max(series.yAxis.visibleRange.min, 0);
	            var options;
	            var point;
	            var xValue;
	            var prevPoint = null;
	            for (var i = 0; i < pointsLength; i++) {
	                point = series.points[i];
	                xValue = point.xValue;
	                point.symbolLocation = null;
	                if (point.visible && helper_1.withInRange(series.points[i - 1], point, series.points[i + 1], series)) {
	                    if (start === null) {
	                        start = new helper_1.ChartLocation(xValue, 0);
	                        currentPoint = helper_1.getPoint(xValue, origin, xAxis, yAxis);
	                        direction += ('M' + ' ' + (currentPoint.x) + ' ' + (currentPoint.y) + ' ');
	                        currentPoint = helper_1.getPoint(xValue, point.yValue, xAxis, yAxis);
	                        direction += ('L' + ' ' + (currentPoint.x) + ' ' + (currentPoint.y) + ' ');
	                    }
	                    if (prevPoint != null) {
	                        currentPoint = helper_1.getPoint(point.xValue, point.yValue, xAxis, yAxis);
	                        secondPoint = helper_1.getPoint(prevPoint.xValue, prevPoint.yValue, xAxis, yAxis);
	                        direction += ('L' + ' ' +
	                            (currentPoint.x) + ' ' + (secondPoint.y) + 'L' + ' ' + (currentPoint.x) + ' ' + (currentPoint.y) + ' ');
	                    }
	                    point.symbolLocation = helper_1.getPoint(xValue, point.yValue, xAxis, yAxis);
	                    point.region = new helper_1.Rect(point.symbolLocation.x - series.marker.width, point.symbolLocation.y - series.marker.height, 2 * series.marker.width, 2 * series.marker.height);
	                    prevPoint = point;
	                }
	                if (series.points[i + 1] && !series.points[i + 1].visible) {
	                    currentPoint = helper_1.getPoint(xValue, origin, xAxis, yAxis);
	                    direction += ('L' + ' ' + (currentPoint.x) + ' ' + (currentPoint.y));
	                    start = null;
	                    prevPoint = null;
	                }
	            }
	            if (pointsLength > 1) {
	                start = { 'x': series.points[pointsLength - 1].xValue, 'y': origin };
	                secondPoint = helper_1.getPoint(start.x, start.y, xAxis, yAxis);
	                direction += ('L' + ' ' + (secondPoint.x) + ' ' + (secondPoint.y) + ' ');
	            }
	            options = new helper_1.PathOption(series.chart.element.id + '_Series_' + series.index, series.interior, series.border.width, series.border.color, series.opacity, series.dashArray, direction);
	            this.appendLinePath(options, series);
	            this.renderMarker(series);
	        };
	        StepAreaSeries.prototype.doAnimation = function (series) {
	            var option = series.animation;
	            this.doLinearAnimation(series, option);
	        };
	        StepAreaSeries.prototype.destroy = function (chart) {
	        };
	        StepAreaSeries.prototype.getModuleName = function () {
	            return 'StepAreaSeries';
	        };
	        return StepAreaSeries;
	    }(line_base_1.LineBase));
	    exports.StepAreaSeries = StepAreaSeries;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(5), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, line_base_1, constants_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var ScatterSeries = (function (_super) {
	        __extends(ScatterSeries, _super);
	        function ScatterSeries() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        ScatterSeries.prototype.render = function (series, xAxis, yAxis) {
	            var seriesIndex = series.index;
	            var marker = series.marker;
	            var border = series.border;
	            var shape = marker.shape;
	            var visiblePoints = this.improveChartPerformance(series);
	            var pointIndex;
	            var symbolId;
	            var shapeOption;
	            var argsData;
	            for (var _i = 0, visiblePoints_1 = visiblePoints; _i < visiblePoints_1.length; _i++) {
	                var point = visiblePoints_1[_i];
	                point.symbolLocation = null;
	                if (point.visible && helper_1.withInRange(visiblePoints[point.index - 1], point, visiblePoints[point.index + 1], series)) {
	                    point.symbolLocation = helper_1.getPoint(point.xValue, point.yValue, xAxis, yAxis);
	                    symbolId = series.chart.element.id + '_Series_' + seriesIndex + '_Point_' + point.index;
	                    argsData = { cancel: false, name: constants_1.pointRender, series: series, point: point, fill: series.interior,
	                        border: border, height: marker.height, width: marker.width
	                    };
	                    series.chart.trigger(constants_1.pointRender, argsData);
	                    if (!argsData.cancel) {
	                        point.color = argsData.fill;
	                        shapeOption = new helper_1.PathOption(symbolId, argsData.fill, argsData.border.width, argsData.border.color, series.opacity, null);
	                        series.seriesElement.appendChild(helper_1.drawSymbol(point.symbolLocation, shape, new helper_1.Size(argsData.width, argsData.height), marker.imageUrl, shapeOption, point.x.toString() + ':' + point.y.toString()));
	                        point.region = new helper_1.Rect(point.symbolLocation.x - marker.width, point.symbolLocation.y - marker.height, 2 * marker.width, 2 * marker.height);
	                    }
	                }
	            }
	        };
	        ScatterSeries.prototype.doAnimation = function (series) {
	            var duration = series.animation.duration;
	            var delay = series.animation.delay;
	            var rectElements = series.seriesElement.childNodes;
	            var count = 1;
	            for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
	                var point = _a[_i];
	                if (!point.symbolLocation) {
	                    continue;
	                }
	                helper_1.markerAnimate(rectElements[count], delay, duration, series, point.index, point.symbolLocation, false);
	                count++;
	            }
	        };
	        ScatterSeries.prototype.getModuleName = function () {
	            return 'ScatterSeries';
	        };
	        ScatterSeries.prototype.destroy = function (chart) {
	        };
	        return ScatterSeries;
	    }(line_base_1.LineBase));
	    exports.ScatterSeries = ScatterSeries;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(24)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, column_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var RangeColumnSeries = (function (_super) {
	        __extends(RangeColumnSeries, _super);
	        function RangeColumnSeries() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        RangeColumnSeries.prototype.render = function (series) {
	            var rect;
	            var sideBySideInfo = this.getSideBySideInfo(series);
	            var argsData;
	            for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
	                var rangePoint = _a[_i];
	                rangePoint.symbolLocation = null;
	                if (rangePoint.visible && helper_1.withInRange(series.points[rangePoint.index - 1], rangePoint, series.points[rangePoint.index + 1], series)) {
	                    rect = this.getRectangle(rangePoint.xValue + sideBySideInfo.start, rangePoint.high, rangePoint.xValue + sideBySideInfo.end, rangePoint.low, series);
	                    argsData = this.triggerEvent(series.chart, series, rangePoint);
	                    if (!argsData.cancel) {
	                        this.updateXRegion(rangePoint, rect, series);
	                        this.drawRectangle(series, rangePoint, rect, argsData);
	                    }
	                }
	            }
	        };
	        RangeColumnSeries.prototype.getModuleName = function () {
	            return 'RangeColumnSeries';
	        };
	        RangeColumnSeries.prototype.doAnimation = function (series) {
	            this.animate(series);
	        };
	        RangeColumnSeries.prototype.destroy = function (chart) {
	        };
	        return RangeColumnSeries;
	    }(column_base_1.ColumnBase));
	    exports.RangeColumnSeries = RangeColumnSeries;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, constants_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var BubbleSeries = (function () {
	        function BubbleSeries() {
	        }
	        BubbleSeries.prototype.render = function (series, xAxis, yAxis) {
	            var marker = series.marker;
	            var visiblePoints = series.points;
	            var shapeOption;
	            var argsData;
	            var segmentRadius;
	            var radius;
	            var value = Math.max(series.chart.initialClipRect.height, series.chart.initialClipRect.width);
	            var percentChange = value / 100;
	            var maxRadius = series.maxRadius * percentChange;
	            var minRadius = series.minRadius * percentChange;
	            var maximumSize = null;
	            var maxValue = null;
	            if ((series.maxRadius === null || series.minRadius === null)) {
	                for (var _i = 0, _a = series.chart.visibleSeries; _i < _a.length; _i++) {
	                    var value_1 = _a[_i];
	                    if (value_1.type === 'Bubble' && value_1.visible === true && (value_1.maxRadius === null || value_1.minRadius === null)) {
	                        maximumSize = value_1.sizeMax > maximumSize ? value_1.sizeMax : maximumSize;
	                    }
	                }
	                maxValue = (value / 5) / 2;
	                minRadius = maxRadius = 1;
	                radius = maxValue * maxRadius;
	            }
	            else {
	                maximumSize = series.sizeMax;
	                radius = maxRadius - minRadius;
	            }
	            for (var _b = 0, visiblePoints_1 = visiblePoints; _b < visiblePoints_1.length; _b++) {
	                var bubblePoint = visiblePoints_1[_b];
	                bubblePoint.symbolLocation = null;
	                if (bubblePoint.visible &&
	                    helper_1.withInRange(visiblePoints[bubblePoint.index - 1], bubblePoint, visiblePoints[bubblePoint.index + 1], series)) {
	                    bubblePoint.symbolLocation = helper_1.getPoint(bubblePoint.xValue, bubblePoint.yValue, xAxis, yAxis);
	                    if ((series.maxRadius === null || series.minRadius === null)) {
	                        segmentRadius = radius * Math.abs(+bubblePoint.size / maximumSize);
	                    }
	                    else {
	                        segmentRadius = minRadius + radius * Math.abs(+bubblePoint.size / maximumSize);
	                    }
	                    segmentRadius = segmentRadius || minRadius;
	                    argsData = {
	                        cancel: false, name: constants_1.pointRender, series: series, point: bubblePoint, fill: series.interior,
	                        border: series.border, height: 2 * segmentRadius, width: 2 * segmentRadius
	                    };
	                    series.chart.trigger(constants_1.pointRender, argsData);
	                    if (!argsData.cancel) {
	                        bubblePoint.color = argsData.fill;
	                        shapeOption = new helper_1.PathOption(series.chart.element.id + '_Series_' + series.index + '_Point_' + bubblePoint.index, argsData.fill, argsData.border.width, argsData.border.color, series.opacity, null);
	                        series.seriesElement.appendChild(helper_1.drawSymbol(bubblePoint.symbolLocation, 'Circle', new helper_1.Size(argsData.width, argsData.height), marker.imageUrl, shapeOption, bubblePoint.x.toString() + ':' + bubblePoint.y.toString()));
	                        bubblePoint.region = new helper_1.Rect(bubblePoint.symbolLocation.x - segmentRadius, bubblePoint.symbolLocation.y - segmentRadius, 2 * segmentRadius, 2 * segmentRadius);
	                    }
	                }
	            }
	        };
	        BubbleSeries.prototype.destroy = function (chart) {
	        };
	        BubbleSeries.prototype.getModuleName = function () {
	            return 'BubbleSeries';
	        };
	        BubbleSeries.prototype.doAnimation = function (series) {
	            var duration = series.animation.duration;
	            var delay = series.animation.delay;
	            var rectElements = series.seriesElement.childNodes;
	            var count = 1;
	            for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
	                var bubblePoint = _a[_i];
	                if (!bubblePoint.symbolLocation) {
	                    continue;
	                }
	                helper_1.markerAnimate(rectElements[count], delay, duration, series, bubblePoint.index, bubblePoint.symbolLocation, false);
	                count++;
	            }
	        };
	        return BubbleSeries;
	    }());
	    exports.BubbleSeries = BubbleSeries;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, line_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var SplineSeries = (function (_super) {
	        __extends(SplineSeries, _super);
	        function SplineSeries() {
	            var _this = _super !== null && _super.apply(this, arguments) || this;
	            _this.naturalSplinePoints = [];
	            return _this;
	        }
	        SplineSeries.prototype.render = function (series, xAxis, yAxis) {
	            var chart = series.chart;
	            var marker = series.marker;
	            var ySpline;
	            var options;
	            var firstPoint = null;
	            var secondPoint = null;
	            var direction = '';
	            var pt1;
	            var pt2;
	            var bpt1;
	            var bpt2;
	            var data;
	            var controlPointCount = 0;
	            var controlPoint1;
	            var controlPoint2;
	            var startPoint = 'M';
	            for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
	                var point = _a[_i];
	                if (point.visible && helper_1.withInRange(series.points[point.index - 1], point, series.points[point.index + 1], series)) {
	                    if (firstPoint !== null) {
	                        data = series.drawPoints[point.index - 1];
	                        controlPoint1 = data.controlPoint1;
	                        controlPoint2 = data.controlPoint2;
	                        pt1 = helper_1.getPoint(firstPoint.xValue, firstPoint.yValue, xAxis, yAxis);
	                        pt2 = helper_1.getPoint(point.xValue, point.yValue, xAxis, yAxis);
	                        bpt1 = helper_1.getPoint(controlPoint1.x, controlPoint1.y, xAxis, yAxis);
	                        bpt2 = helper_1.getPoint(controlPoint2.x, controlPoint2.y, xAxis, yAxis);
	                        direction = direction.concat((startPoint + ' ' + (pt1.x) + ' ' + (pt1.y) + ' ' + 'C' + ' ' + (bpt1.x) + ' '
	                            + (bpt1.y) + ' ' + (bpt2.x) + ' ' + (bpt2.y) + ' ' + (pt2.x) + ' ' + (pt2.y) + ' '));
	                        startPoint = 'L';
	                    }
	                    firstPoint = point;
	                    point.symbolLocation = helper_1.getPoint(point.xValue, point.yValue, xAxis, yAxis);
	                    point.region = new helper_1.Rect(point.symbolLocation.x - marker.width, point.symbolLocation.y - marker.height, 2 * marker.width, 2 * marker.height);
	                }
	                else {
	                    startPoint = 'M';
	                    firstPoint = null;
	                    point.symbolLocation = null;
	                }
	            }
	            options = new helper_1.PathOption(series.chart.element.id + '_Series_' + series.index, 'transparent', series.width, series.interior, series.opacity, series.dashArray, direction);
	            this.appendLinePath(options, series);
	            this.renderMarker(series);
	        };
	        SplineSeries.prototype.findSplinePoint = function (series) {
	            var spline = series.chart.splineSeriesModule;
	            var value;
	            this.naturalSplinePoints = this.naturalSpline(series.points);
	            if (series.points.length > 1) {
	                series.yMax = null;
	                series.yMin = null;
	                for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
	                    var point = _a[_i];
	                    if (point.index !== 0) {
	                        value = this.getControlPoints(series.points[point.index - 1], point, this.naturalSplinePoints[point.index - 1], this.naturalSplinePoints[point.index]);
	                        series.drawPoints.push(value);
	                        series.yMin = (Math.min(series.yMin, point.yValue, value.controlPoint1.y, value.controlPoint2.y));
	                        series.yMax = (Math.max(series.yMax, point.yValue, value.controlPoint1.y, value.controlPoint2.y));
	                    }
	                }
	            }
	        };
	        SplineSeries.prototype.naturalSpline = function (points) {
	            var count = points.length;
	            var a = 6;
	            var ySpline = [];
	            var ySplineDuplicate = [];
	            var d1;
	            var d2;
	            var d3;
	            var dy1;
	            var dy2;
	            ySpline[0] = ySplineDuplicate[0] = 0;
	            ySpline[points.length - 1] = 0;
	            for (var i = 1; i < count - 1; i++) {
	                d1 = points[i].xValue - points[i - 1].xValue;
	                d2 = points[i + 1].xValue - points[i - 1].xValue;
	                d3 = points[i + 1].xValue - points[i].xValue;
	                dy1 = points[i + 1].yValue - points[i].yValue;
	                dy2 = points[i].yValue - points[i - 1].yValue;
	                if (d1 === 0 || d2 === 0 || d3 === 0) {
	                    ySpline[i] = 0;
	                    ySplineDuplicate[i] = 0;
	                }
	                else {
	                    var p = 1 / (d1 * ySpline[i - 1] + 2 * d2);
	                    ySpline[i] = -p * d3;
	                    ySplineDuplicate[i] = p * (a * (dy1 / d3 - dy2 / d1) - d1 * ySplineDuplicate[i - 1]);
	                }
	            }
	            for (var k = count - 2; k >= 0; k--) {
	                ySpline[k] = ySpline[k] * ySpline[k + 1] + ySplineDuplicate[k];
	            }
	            return ySpline;
	        };
	        SplineSeries.prototype.getControlPoints = function (point1, point2, ySpline1, ySpline2) {
	            var one3 = 1 / 3.0;
	            var deltaX2 = (point2.xValue - point1.xValue);
	            deltaX2 = deltaX2 * deltaX2;
	            var y1 = one3 * (((2 * point1.yValue) + point2.yValue) - one3 * deltaX2 * (ySpline1 + 0.5 * ySpline2));
	            var y2 = one3 * ((point1.yValue + (2 * point2.yValue)) - one3 * deltaX2 * (0.5 * ySpline1 + ySpline2));
	            var control1 = new helper_1.ChartLocation((2 * (point1.xValue) + (point2.xValue)) * one3, y1);
	            var control2 = new helper_1.ChartLocation(((point1.xValue) + 2 * (point2.xValue)) * one3, y2);
	            var points = new helper_1.ControlPoints(control1, control2);
	            return points;
	        };
	        SplineSeries.prototype.getModuleName = function () {
	            return 'SplineSeries';
	        };
	        SplineSeries.prototype.destroy = function (chart) {
	        };
	        SplineSeries.prototype.doAnimation = function (series) {
	            var option = series.animation;
	            this.doLinearAnimation(series, option);
	        };
	        return SplineSeries;
	    }(line_base_1.LineBase));
	    exports.SplineSeries = SplineSeries;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, constants_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var Marker = (function () {
	        function Marker(chart) {
	            this.chart = chart;
	            this.elementId = chart.element.id;
	        }
	        Marker.prototype.render = function (series) {
	            var seriesIndex = series.index;
	            var marker = series.marker;
	            var border = marker.border;
	            var shape = marker.shape;
	            var symbolId;
	            var shapeOption;
	            var fill = marker.fill || series.interior;
	            var argsData;
	            for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
	                var point = _a[_i];
	                if (point.visible && point.symbolLocation) {
	                    border.color = border.color || fill;
	                    symbolId = this.elementId + '_Series_' + seriesIndex + '_Point_' + point.index + '_Symbol';
	                    argsData = {
	                        cancel: false, name: constants_1.pointRender, series: series, point: point, fill: fill, border: border, height: marker.height,
	                        width: marker.width
	                    };
	                    this.chart.trigger(constants_1.pointRender, argsData);
	                    point.color = argsData.fill;
	                    if (!argsData.cancel) {
	                        shapeOption = new helper_1.PathOption(symbolId, argsData.fill, argsData.border.width, argsData.border.color, marker.opacity, null);
	                        series.symbolElement.appendChild(helper_1.drawSymbol(point.symbolLocation, shape, new helper_1.Size(argsData.width, argsData.height), marker.imageUrl, shapeOption, point.x.toString() + ':' + point.y.toString()));
	                    }
	                    else {
	                        point.symbolLocation = null;
	                    }
	                }
	            }
	        };
	        Marker.prototype.doMarkerAnimation = function (series) {
	            if (!(series.type.indexOf('Column') > -1 || series.type.indexOf('Bar') > -1 || series.type === 'Scatter'
	                || series.type === 'Bubble')) {
	                var markerElements = series.symbolElement.childNodes;
	                var delay = series.animation.delay + series.animation.duration;
	                var j = 1;
	                for (var i = 0; i < series.points.length; i++) {
	                    if (!series.points[i].symbolLocation) {
	                        continue;
	                    }
	                    helper_1.markerAnimate(markerElements[j], delay, 200, series, i, series.points[i].symbolLocation, false);
	                    j++;
	                }
	            }
	        };
	        Marker.prototype.getModuleName = function () {
	            return 'Marker';
	        };
	        Marker.prototype.destroy = function (chart) {
	        };
	        return Marker;
	    }());
	    exports.Marker = Marker;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, helper_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var Crosshair = (function () {
	        function Crosshair(chart) {
	            this.arrowLocation = new helper_1.ChartLocation(0, 0);
	            this.rx = 2;
	            this.ry = 2;
	            this.chart = chart;
	            this.elementID = this.chart.element.id;
	        }
	        Crosshair.prototype.crosshair = function () {
	            var chart = this.chart;
	            var horizontalCross = '';
	            var verticalCross = '';
	            var options;
	            var crosshair = chart.crosshair;
	            var chartRect = chart.chartAxisLayoutPanel.seriesClipRect;
	            var crossGroup = document.getElementById(this.elementID + '_UserInteraction');
	            this.stopAnimation();
	            if (chart.tooltip.enable && !helper_1.withInBounds(chart.tooltipModule.valueX, chart.tooltipModule.valueY, chartRect)) {
	                return null;
	            }
	            this.valueX = chart.tooltip.enable ? chart.tooltipModule.valueX : chart.mouseX;
	            this.valueY = chart.tooltip.enable ? chart.tooltipModule.valueY : chart.mouseY;
	            crossGroup.setAttribute('opacity', '1');
	            if (crosshair.lineType === 'Both' || crosshair.lineType === 'Horizontal') {
	                horizontalCross += 'M ' + chartRect.x + ' ' + this.valueY +
	                    ' L ' + (chartRect.x + chartRect.width) + ' ' + this.valueY;
	            }
	            if (crosshair.lineType === 'Both' || crosshair.lineType === 'Vertical') {
	                verticalCross += 'M ' + this.valueX + ' ' + chartRect.y +
	                    ' L ' + this.valueX + ' ' + (chartRect.y + chartRect.height);
	            }
	            if (crossGroup.childNodes.length === 0) {
	                var axisTooltipGroup = chart.renderer.createGroup({ 'id': this.elementID + '_crosshair_axis' });
	                options = new helper_1.PathOption(this.elementID + '_HorizontalLine', 'none', crosshair.line.width, crosshair.line.color, 1, null, horizontalCross);
	                this.renderCrosshairLine(options, crossGroup);
	                options.d = verticalCross;
	                options.id = this.elementID + '_VerticalLine';
	                this.renderCrosshairLine(options, crossGroup);
	                crossGroup.appendChild(axisTooltipGroup);
	                this.renderAxisTooltip(chart, chartRect, crossGroup.lastChild);
	            }
	            else {
	                document.getElementById(this.elementID + '_HorizontalLine').setAttribute('d', horizontalCross);
	                document.getElementById(this.elementID + '_VerticalLine').setAttribute('d', verticalCross);
	                this.renderAxisTooltip(chart, chartRect, crossGroup.lastChild);
	            }
	        };
	        Crosshair.prototype.renderCrosshairLine = function (options, crossGroup) {
	            var htmlObject = this.chart.renderer.drawPath(options);
	            crossGroup.appendChild(htmlObject);
	        };
	        Crosshair.prototype.renderAxisTooltip = function (chart, chartRect, axisGroup) {
	            var axis;
	            var text;
	            var rect;
	            var pathElement;
	            var textElem;
	            var options;
	            var padding = 5;
	            var direction;
	            for (var k = 0, length_1 = chart.axisCollections.length; k < length_1; k++) {
	                axis = chart.axisCollections[k];
	                if (axis.crosshairTooltip.enable) {
	                    if ((this.valueX <= (axis.rect.x + axis.rect.width) && axis.rect.x <= this.valueX) ||
	                        (this.valueY <= (axis.rect.y + axis.rect.height) && axis.rect.y <= this.valueY)) {
	                        pathElement = document.getElementById(this.elementID + '_axis_tooltip_' + k);
	                        textElem = document.getElementById(this.elementID + '_axis_tooltip_text_' + k);
	                        text = this.getAxisText(axis);
	                        if (!text) {
	                            continue;
	                        }
	                        rect = this.tooltipLocation(text, axis, chartRect);
	                        if (pathElement === null) {
	                            pathElement = chart.renderer.drawPath({
	                                'id': this.elementID + '_axis_tooltip_' + k,
	                                'fill': axis.crosshairTooltip.fill
	                            });
	                            axisGroup.appendChild(pathElement);
	                            options = new helper_1.TextOption(this.elementID + '_axis_tooltip_text_' + k, 0, 0, 'start', text);
	                            textElem = helper_1.textElement(options, axis.crosshairTooltip.textStyle, axis.crosshairTooltip.textStyle.color, axisGroup);
	                        }
	                        direction = helper_1.findDirection(this.rx, this.ry, rect, this.arrowLocation, 10, this.isTop, this.isBottom, this.isLeft, this.valueX, this.valueY);
	                        pathElement.setAttribute('d', direction);
	                        textElem.textContent = text;
	                        textElem.setAttribute('x', (rect.x + padding).toString());
	                        textElem.setAttribute('y', (rect.y + padding + 3 * this.elementSize.height / 4).toString());
	                    }
	                    else {
	                        pathElement = document.getElementById(this.elementID + '_axis_tooltip_' + k);
	                        textElem = document.getElementById(this.elementID + '_axis_tooltip_text_' + k);
	                        if (pathElement !== null) {
	                            pathElement.remove();
	                            textElem.remove();
	                        }
	                    }
	                }
	            }
	        };
	        Crosshair.prototype.getAxisText = function (axis) {
	            var value;
	            this.isBottom = false;
	            this.isTop = false;
	            this.isLeft = false;
	            this.isRight = false;
	            var labelValue = (axis.valueType === 'Category' && axis.labelPlacement === 'BetweenTicks')
	                ? 0.5 : 0;
	            if (axis.orientation === 'Horizontal') {
	                value = helper_1.getValueXByPoint(Math.abs(this.valueX - axis.rect.x), axis.rect.width, axis) + labelValue;
	                this.isBottom = !axis.opposedPosition;
	                this.isTop = axis.opposedPosition;
	            }
	            else {
	                value = helper_1.getValueYByPoint(Math.abs(this.valueY - axis.rect.y), axis.rect.height, axis) + labelValue;
	                this.isRight = axis.opposedPosition;
	                this.isLeft = !axis.opposedPosition;
	            }
	            if (axis.valueType === 'DateTime') {
	                return axis.format(new Date(value));
	            }
	            else if (axis.valueType === 'Category') {
	                return axis.labels[Math.floor(value)];
	            }
	            else if (axis.valueType === 'Logarithmic') {
	                return value = axis.format(Math.pow(axis.logBase, value));
	            }
	            else {
	                var customLabelFormat = axis.labelFormat && axis.labelFormat.match('{value}') !== null;
	                return customLabelFormat ? axis.labelFormat.replace('{value}', axis.format(value)) : axis.format(value);
	            }
	        };
	        Crosshair.prototype.tooltipLocation = function (text, axis, bounds) {
	            var isBottom = false;
	            var isLeft = false;
	            var padding = 5;
	            var arrowPadding = 10;
	            var tooltipRect;
	            var boundsX = bounds.x;
	            var boundsY = bounds.y;
	            this.elementSize = helper_1.measureText(text, axis.crosshairTooltip.textStyle);
	            if (axis.orientation === 'Horizontal') {
	                this.arrowLocation = new helper_1.ChartLocation(this.valueX, axis.rect.y);
	                tooltipRect = new helper_1.Rect((this.valueX - (this.elementSize.width / 2) - padding), axis.rect.y + arrowPadding, this.elementSize.width + padding * 2, this.elementSize.height + padding * 2);
	                if (axis.opposedPosition) {
	                    tooltipRect.y = axis.rect.y - (this.elementSize.height + padding * 2 + arrowPadding);
	                }
	                if (tooltipRect.x < boundsX) {
	                    tooltipRect.x = boundsX;
	                }
	                if (tooltipRect.x + tooltipRect.width > boundsX + bounds.width) {
	                    tooltipRect.x -= ((tooltipRect.x + tooltipRect.width) - (boundsX + bounds.width));
	                }
	                if (this.arrowLocation.x + arrowPadding / 2 > tooltipRect.x + tooltipRect.width - this.rx) {
	                    this.arrowLocation.x = tooltipRect.x + tooltipRect.width - this.rx - arrowPadding / 2;
	                }
	                if (this.arrowLocation.x - arrowPadding / 2 < tooltipRect.x + this.rx) {
	                    this.arrowLocation.x = tooltipRect.x + this.rx + arrowPadding / 2;
	                }
	            }
	            else {
	                this.arrowLocation = new helper_1.ChartLocation(axis.rect.x, this.valueY);
	                tooltipRect = new helper_1.Rect(axis.rect.x - (this.elementSize.width) - (padding * 2 + arrowPadding), this.valueY - (this.elementSize.height / 2) - padding, this.elementSize.width + (padding * 2), this.elementSize.height + padding * 2);
	                if (axis.opposedPosition) {
	                    tooltipRect.x = axis.rect.x + arrowPadding;
	                    if ((tooltipRect.x + tooltipRect.width) > this.chart.availableSize.width) {
	                        this.arrowLocation.x -= ((tooltipRect.x + tooltipRect.width) - this.chart.availableSize.width);
	                        tooltipRect.x -= ((tooltipRect.x + tooltipRect.width) - this.chart.availableSize.width);
	                    }
	                }
	                else {
	                    if (tooltipRect.x < 0) {
	                        this.arrowLocation.x -= tooltipRect.x;
	                        tooltipRect.x = 0;
	                    }
	                }
	                if (tooltipRect.y < boundsY) {
	                    tooltipRect.y = boundsY;
	                }
	                if (tooltipRect.y + tooltipRect.height >= boundsY + bounds.height) {
	                    tooltipRect.y -= ((tooltipRect.y + tooltipRect.height) - (boundsY + bounds.height));
	                }
	                if (this.arrowLocation.y + arrowPadding / 2 > tooltipRect.y + tooltipRect.height - this.ry) {
	                    this.arrowLocation.y = tooltipRect.y + tooltipRect.height - this.ry - arrowPadding / 2;
	                }
	                if (this.arrowLocation.y - arrowPadding / 2 < tooltipRect.y + this.ry) {
	                    this.arrowLocation.y = tooltipRect.y + this.ry + arrowPadding / 2;
	                }
	            }
	            return tooltipRect;
	        };
	        Crosshair.prototype.stopAnimation = function () {
	            helper_1.stopTimer(this.crosshairInterval);
	        };
	        Crosshair.prototype.removeCrosshair = function () {
	            var chart = this.chart;
	            var crosshair = document.getElementById(this.elementID + '_UserInteraction');
	            this.stopAnimation();
	            if (crosshair && crosshair.getAttribute('opacity') !== '0') {
	                this.crosshairInterval = setTimeout(function () {
	                    new ej2_base_1.Animation({}).animate(crosshair, {
	                        duration: 200,
	                        progress: function (args) {
	                            crosshair.style.animation = '';
	                            crosshair.setAttribute('opacity', (1 - (args.timeStamp / args.duration)).toString());
	                        },
	                        end: function (model) {
	                            crosshair.setAttribute('opacity', '0');
	                            chart.startMove = false;
	                            if (chart.tooltipModule) {
	                                chart.tooltipModule.valueX = null;
	                                chart.tooltipModule.valueY = null;
	                            }
	                        }
	                    });
	                }, 2000);
	            }
	        };
	        Crosshair.prototype.getModuleName = function () {
	            return 'Crosshair';
	        };
	        Crosshair.prototype.destroy = function (chart) {
	        };
	        return Crosshair;
	    }());
	    exports.Crosshair = Crosshair;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(4), __webpack_require__(4), __webpack_require__(3), __webpack_require__(3), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, helper_1, helper_2, constants_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var Tooltip = (function () {
	        function Tooltip(chart) {
	            this.padding = 5;
	            this.arrowPadding = 10;
	            this.rx = 2;
	            this.ry = 2;
	            this.chart = chart;
	            this.element = this.chart.element;
	            this.textStyle = chart.tooltip.textStyle;
	        }
	        Tooltip.prototype.tooltip = function () {
	            var isTooltip = this.getElement(this.element.id + '_tooltip');
	            var tooltipDiv;
	            var chart = this.chart;
	            this.textCollection = [];
	            this.updateTemplateFn(chart);
	            if (!isTooltip) {
	                tooltipDiv = this.createElement(chart);
	            }
	            if (!chart.tooltip.shared) {
	                this.renderSeriesTooltip(chart, !isTooltip, tooltipDiv);
	            }
	            else {
	                this.renderGroupedTooltip(chart, !isTooltip, tooltipDiv);
	            }
	        };
	        Tooltip.prototype.createElement = function (chart) {
	            this.textElements = [];
	            var tooltipDiv = document.createElement('div');
	            tooltipDiv.id = this.element.id + '_tooltip';
	            tooltipDiv.className = 'ejTooltip' + this.element.id;
	            tooltipDiv.setAttribute('style', 'pointer-events:none; position:absolute;z-index: 1');
	            if (!chart.tooltip.template || chart.tooltip.shared) {
	                var svgObject = chart.renderer.createSvg({ id: this.element.id + '_tooltip_svg' });
	                tooltipDiv.appendChild(svgObject);
	                var groupElement = chart.renderer.createGroup({ id: this.element.id + '_tooltip_group' });
	                svgObject.appendChild(groupElement);
	                var pathElement = chart.renderer.drawPath({
	                    'id': this.element.id + '_tooltip_path', 'stroke-width': chart.tooltip.border.width,
	                    'fill': chart.tooltip.fill
	                });
	                groupElement.appendChild(pathElement);
	            }
	            return tooltipDiv;
	        };
	        Tooltip.prototype.getElement = function (id) {
	            return document.getElementById(id);
	        };
	        Tooltip.prototype.renderPoint = function (point, isFirst, fill) {
	            var argsData = {
	                cancel: false, name: constants_1.tooltipRender, textCollections: this.getTooltipText(point),
	                point: point.point, series: point.series, textStyle: this.textStyle
	            };
	            this.chart.trigger(constants_1.tooltipRender, argsData);
	            if (!argsData.cancel) {
	                this.renderText(argsData.textCollections, argsData.textStyle, fill, isFirst);
	            }
	            return !argsData.cancel;
	        };
	        Tooltip.prototype.removeText = function () {
	            this.textElements = [];
	            var element = this.getElement(this.element.id + '_tooltip_group');
	            if (element.childNodes.length > 0) {
	                while (element.lastChild && element.childNodes.length !== 1) {
	                    element.removeChild(element.lastChild);
	                }
	            }
	        };
	        Tooltip.prototype.renderSeriesTooltip = function (chart, isFirst, tooltipDiv) {
	            var data = this.getData(chart);
	            if (data.point && data.series.enableTooltip) {
	                if (!chart.storedPoints[0] || (chart.storedPoints[0].point !== data.point)) {
	                    this.stopAnimation();
	                    if (isFirst) {
	                        document.getElementById(this.element.id + '_Secondary_Element').appendChild(tooltipDiv);
	                    }
	                    if (!chart.tooltip.template) {
	                        if (this.renderPoint(data, isFirst, this.textStyle.color || '#212121')) {
	                            this.removeHighlight(chart);
	                            this.chart.storedPoints.push(data);
	                            this.highlightPoints(data);
	                            this.renderTooltip(chart, data, isFirst);
	                        }
	                        else {
	                            this.removeHighlight(chart);
	                            this.getElement(this.element.id + '_tooltip').remove();
	                        }
	                    }
	                    else {
	                        this.removeHighlight(chart);
	                        this.chart.storedPoints.push(data);
	                        this.createTemplate(chart, data, this.getElement(this.element.id + '_tooltip'), isFirst);
	                    }
	                    this.isRemove = true;
	                }
	            }
	            else {
	                if (!data.point && this.isRemove) {
	                    this.removeTooltip(null);
	                    this.isRemove = false;
	                }
	                else {
	                    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {
	                        var series = _a[_i];
	                        if (series.visible) {
	                            data = this.getClosestX(chart, series) || data;
	                        }
	                    }
	                }
	            }
	            if (data && data.point) {
	                this.findMouseValue(data, chart);
	            }
	        };
	        Tooltip.prototype.updateTemplateFn = function (chart) {
	            if (chart.tooltip.template) {
	                var e = void 0;
	                try {
	                    if (document.querySelectorAll(chart.tooltip.template).length) {
	                        this.templateFn = ej2_base_3.compile(document.querySelector(chart.tooltip.template).innerHTML.trim());
	                    }
	                }
	                catch (e) {
	                    this.templateFn = ej2_base_3.compile(chart.tooltip.template);
	                }
	            }
	        };
	        Tooltip.prototype.createTemplate = function (chart, data, parent, isFirst) {
	            this.highlightPoints(data);
	            var argsData = { cancel: false, name: constants_1.tooltipRender, point: data.point, series: data.series, };
	            this.chart.trigger(constants_1.tooltipRender, argsData);
	            var firstElement = this.getElement(this.element.id + '_tooltip').firstChild;
	            if (firstElement) {
	                firstElement.remove();
	            }
	            var point = ej2_base_2.extend({}, data.point);
	            point.x = this.formatPointValue(data, data.series.xAxis, 'x', true, false);
	            if ((data.series.seriesType === 'XY')) {
	                point.y = this.formatPointValue(data, data.series.yAxis, 'y', false, true);
	            }
	            else {
	                point.low = this.formatPointValue(data, data.series.yAxis, 'low', false, true);
	                point.high = this.formatPointValue(data, data.series.yAxis, 'high', false, true);
	            }
	            if (!argsData.cancel) {
	                var templateElement = this.templateFn(point);
	                var elem = ej2_base_1.createElement('div');
	                while (templateElement.length > 0) {
	                    elem.appendChild(templateElement[0]);
	                }
	                parent.appendChild(elem);
	                var rect = parent.getBoundingClientRect();
	                this.padding = 0;
	                this.elementSize = new helper_1.Size(rect.width, rect.height);
	                var tooltipRect = this.seriesTooltipLocation(data, new helper_1.ChartLocation(0, 0), new helper_1.ChartLocation(0, 0));
	                if (chart.tooltip.enableAnimation && !chart.tooltip.shared && !isFirst && !this.isComplete) {
	                    this.animateTooltipDiv(parent, tooltipRect);
	                }
	                else {
	                    this.updateDiv(parent, tooltipRect.x, tooltipRect.y);
	                }
	                this.isComplete = false;
	            }
	            else {
	                this.removeHighlight(chart);
	                this.getElement(this.element.id + '_tooltip').remove();
	            }
	        };
	        Tooltip.prototype.findMouseValue = function (data, chart) {
	            if (!chart.requireInvertedAxis) {
	                this.valueX = helper_2.valueToCoefficient(data.point.xValue, data.series.xAxis) * data.series.xAxis.rect.width
	                    + data.series.xAxis.rect.x;
	                this.valueY = chart.mouseY;
	            }
	            else {
	                this.valueY = (1 - helper_2.valueToCoefficient(data.point.xValue, data.series.xAxis)) * data.series.xAxis.rect.height
	                    + data.series.xAxis.rect.y;
	                this.valueX = chart.mouseX;
	            }
	        };
	        Tooltip.prototype.renderGroupedTooltip = function (chart, isFirst, tooltipDiv) {
	            var data;
	            var height = 0;
	            var width = 0;
	            this.stopAnimation();
	            this.removeHighlight(chart);
	            chart.storedPoints = [];
	            if (isFirst) {
	                document.getElementById(this.element.id + '_Secondary_Element').appendChild(tooltipDiv);
	            }
	            this.removeText();
	            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {
	                var series = _a[_i];
	                if (series.visible) {
	                    data = this.getClosestX(chart, series);
	                }
	                if (data && this.renderPoint(data, true, this.textStyle.color || data.point.color)) {
	                    this.highlightPoints(data);
	                    this.findMouseValue(data, chart);
	                    this.chart.storedPoints.push(data);
	                    height += (this.elementSize.height + this.padding);
	                    width = Math.max(width, this.elementSize.width);
	                    data = null;
	                }
	            }
	            height -= this.padding;
	            this.elementSize = new helper_1.Size(width, height);
	            if (chart.storedPoints.length > 0) {
	                this.renderTooltip(chart, chart.storedPoints[0], isFirst);
	            }
	            else {
	                this.getElement(this.element.id + '_tooltip_path').setAttribute('d', '');
	            }
	        };
	        Tooltip.prototype.renderTooltip = function (chart, pointData, isFirst) {
	            var tooltipDiv = this.getElement(this.element.id + '_tooltip');
	            var arrowLocation = new helper_1.ChartLocation(0, 0);
	            var tipLocation = new helper_1.ChartLocation(0, 0);
	            var textHeights;
	            var svgObject = this.getElement(this.element.id + '_tooltip_svg');
	            var groupElement = this.getElement(this.element.id + '_tooltip_group');
	            var pathElement = this.getElement(this.element.id + '_tooltip_path');
	            var rect;
	            var inverted = chart.requireInvertedAxis;
	            var isTop = false;
	            var isLeft = false;
	            var isBottom = false;
	            var x = 0;
	            var y = 0;
	            if (chart.storedPoints.length > 1) {
	                this.arrowPadding = 0;
	                rect = this.sharedTooltipLocation(chart.chartAxisLayoutPanel.seriesClipRect, this.valueX, this.valueY);
	                isTop = true;
	            }
	            else {
	                var series = pointData.series;
	                var point = pointData.point;
	                this.arrowPadding = 10;
	                rect = this.seriesTooltipLocation(pointData, arrowLocation, tipLocation);
	                if (!inverted) {
	                    isTop = (rect.y < (pointData.point.symbolLocation.y + series.clipRect.y));
	                    isBottom = !isTop;
	                    y = (isTop ? 0 : this.arrowPadding);
	                }
	                else {
	                    isLeft = (rect.x < (pointData.point.symbolLocation.x + series.clipRect.x));
	                    x = (isLeft ? 0 : this.arrowPadding);
	                }
	            }
	            var start = chart.tooltip.border.width / 2;
	            var pointRect = new helper_1.Rect(start + x, start + y, rect.width - start, rect.height - start);
	            groupElement.setAttribute('opacity', '1');
	            if (chart.tooltip.enableAnimation && !chart.tooltip.shared && !isFirst && !this.isComplete) {
	                this.animateTooltipDiv(tooltipDiv, rect);
	            }
	            else {
	                this.updateDiv(tooltipDiv, rect.x, rect.y);
	            }
	            this.isComplete = false;
	            svgObject.setAttribute('height', (rect.height + chart.tooltip.border.width + (inverted ? 0 : this.arrowPadding)).toString());
	            svgObject.setAttribute('width', (rect.width + chart.tooltip.border.width + (!inverted ? 0 : this.arrowPadding)).toString());
	            pathElement.setAttribute('d', helper_2.findDirection(this.rx, this.ry, pointRect, arrowLocation, this.arrowPadding, isTop, isBottom, isLeft, tipLocation.x, tipLocation.y));
	            pathElement.setAttribute('stroke', chart.tooltip.border.color ||
	                (chart.tooltip.shared ? 'black' : pointData.point.color || pointData.series.interior));
	            this.changeText(new helper_1.ChartLocation(x, y));
	        };
	        Tooltip.prototype.sharedTooltipLocation = function (bounds, x, y) {
	            var width = this.elementSize.width + (2 * this.padding);
	            var height = this.elementSize.height + (2 * this.padding);
	            var tooltipRect = new helper_1.Rect(x + 2 * this.padding, y - height - this.padding, width, height);
	            if (tooltipRect.y < bounds.y) {
	                tooltipRect.y += (tooltipRect.height + 2 * this.padding);
	            }
	            if (tooltipRect.x + tooltipRect.width > bounds.x + bounds.width) {
	                tooltipRect.x -= (tooltipRect.width + 4 * this.padding);
	            }
	            return tooltipRect;
	        };
	        Tooltip.prototype.seriesTooltipLocation = function (pointData, arrowLocation, tipLocation) {
	            var symbolLocation = pointData.point.symbolLocation;
	            var location = new helper_1.ChartLocation(symbolLocation.x, symbolLocation.y);
	            var width = this.elementSize.width + (2 * this.padding);
	            var height = this.elementSize.height + (2 * this.padding);
	            var bounds = this.chart.chartAxisLayoutPanel.seriesClipRect;
	            var series = pointData.series;
	            var markerHeight = (series.isRectSeries || (!series.marker.visible && series.type !== 'Scatter')) ? 0 :
	                ((series.marker.height + 2) / 2 + (2 * series.marker.border.width));
	            var clipX = series.clipRect.x;
	            var clipY = series.clipRect.y;
	            var boundsX = bounds.x;
	            var boundsY = bounds.y;
	            if (!this.chart.requireInvertedAxis) {
	                location = new helper_1.ChartLocation(location.x + clipX - this.elementSize.width / 2 - this.padding, location.y + clipY - this.elementSize.height - (2 * this.padding) - this.arrowPadding - markerHeight);
	                arrowLocation.x = tipLocation.x = width / 2;
	                if (location.y < boundsY || (series.isRectSeries && pointData.point.y < 0)) {
	                    location.y = (symbolLocation.y < 0 ? 0 : symbolLocation.y) + clipY + markerHeight;
	                }
	                if (location.y + height + this.arrowPadding > boundsY + bounds.height) {
	                    location.y = (symbolLocation.y > bounds.height ? bounds.height : symbolLocation.y)
	                        + clipY - this.elementSize.height - (2 * this.padding) - this.arrowPadding - markerHeight;
	                }
	                tipLocation.x = width / 2;
	                if (location.x < boundsX) {
	                    arrowLocation.x -= (boundsX - location.x);
	                    tipLocation.x -= (boundsX - location.x);
	                    location.x = boundsX;
	                }
	                if (location.x + width > boundsX + bounds.width) {
	                    arrowLocation.x += ((location.x + width) - (boundsX + bounds.width));
	                    tipLocation.x += ((location.x + width) - (boundsX + bounds.width));
	                    location.x -= ((location.x + width) - (boundsX + bounds.width));
	                }
	                if (arrowLocation.x + this.arrowPadding / 2 > width - this.rx) {
	                    arrowLocation.x = width - this.rx - this.arrowPadding / 2;
	                    tipLocation.x = width;
	                }
	                if (arrowLocation.x - this.arrowPadding / 2 < this.rx) {
	                    arrowLocation.x = this.rx + this.arrowPadding / 2;
	                    tipLocation.x = 0;
	                }
	            }
	            else {
	                location = new helper_1.ChartLocation(location.x + clipX + markerHeight, location.y + clipY - this.elementSize.height / 2 - (this.padding));
	                arrowLocation.y = tipLocation.y = height / 2;
	                if ((location.x + width + this.arrowPadding > boundsX + bounds.width) || (series.isRectSeries && pointData.point.y < 0)) {
	                    location.x = (symbolLocation.x > bounds.width ? bounds.width : symbolLocation.x)
	                        + clipX - markerHeight - (width + this.arrowPadding);
	                }
	                if (location.x < boundsX) {
	                    location.x = (symbolLocation.x < 0 ? 0 : symbolLocation.x) + clipX + markerHeight;
	                }
	                if (location.y <= boundsY) {
	                    arrowLocation.y -= (boundsY - location.y);
	                    tipLocation.y -= (boundsY - location.y);
	                    location.y = boundsY;
	                }
	                if (location.y + height >= boundsY + bounds.height) {
	                    arrowLocation.y += ((location.y + height) - (boundsY + bounds.height));
	                    tipLocation.y += ((location.y + height) - (boundsY + bounds.height));
	                    location.y -= ((location.y + height) - (boundsY + bounds.height));
	                }
	                if (arrowLocation.y + this.arrowPadding / 2 > height - this.ry) {
	                    arrowLocation.y = height - this.ry - this.arrowPadding / 2;
	                    tipLocation.y = height;
	                }
	                if (arrowLocation.y - this.arrowPadding / 2 < this.ry) {
	                    arrowLocation.y = this.ry + this.arrowPadding / 2;
	                    tipLocation.y = 0;
	                }
	            }
	            return new helper_1.Rect(location.x, location.y, width, height);
	        };
	        Tooltip.prototype.getClosestX = function (chart, series) {
	            var value;
	            var rect = series.clipRect;
	            if (!this.chart.requireInvertedAxis) {
	                value = helper_2.getValueXByPoint(Math.abs(chart.mouseX - rect.x), rect.width, series.xAxis);
	            }
	            else {
	                value = helper_2.getValueYByPoint(Math.abs(chart.mouseY - rect.y), rect.height, series.xAxis);
	            }
	            var closest = this.getClosest(series, value);
	            for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
	                var point = _a[_i];
	                if (closest === point.xValue && point.visible) {
	                    return new helper_1.PointData(point, series);
	                }
	            }
	            return null;
	        };
	        Tooltip.prototype.getClosest = function (series, value) {
	            var xData = series.xData;
	            var closest;
	            if (value >= series.xMin - 0.5 && value <= series.xMax + 0.5) {
	                for (var _i = 0, xData_1 = xData; _i < xData_1.length; _i++) {
	                    var data = xData_1[_i];
	                    if (closest == null || Math.abs(data - value) < Math.abs(closest - value)) {
	                        closest = data;
	                    }
	                }
	            }
	            return closest;
	        };
	        Tooltip.prototype.removeHighlight = function (chart, removeRect) {
	            if (removeRect === void 0) { removeRect = false; }
	            for (var _i = 0, _a = chart.storedPoints; _i < _a.length; _i++) {
	                var item = _a[_i];
	                if (item.isRemove) {
	                    if (item.series.isRectSeries) {
	                        this.highlightPoint(item.series, item.point.index, false);
	                        continue;
	                    }
	                    helper_2.removeElement(this.element.id + '_Series_' + item.series.index +
	                        '_Point_' + item.point.index + '_Trackball');
	                    item.isRemove = false;
	                }
	            }
	            chart.storedPoints = [];
	        };
	        Tooltip.prototype.highlightPoints = function (item) {
	            if (item.series.isRectSeries) {
	                this.highlightPoint(item.series, item.point.index, true);
	                return null;
	            }
	            this.drawTrackBall(item);
	        };
	        Tooltip.prototype.drawTrackBall = function (pointData) {
	            var series = pointData.series;
	            var height;
	            var width = 0;
	            var element = (series.type === 'Scatter' || series.type === 'Bubble') ? series.seriesElement : series.symbolElement;
	            if (!series.marker.visible && series.type !== 'Scatter' && series.type !== 'Bubble' && pointData.point.symbolLocation) {
	                return null;
	            }
	            var point = pointData.point;
	            var marker = series.marker;
	            var shape = series.type === 'Bubble' ? 'Circle' : marker.shape;
	            var symbolId = this.element.id + '_Series_' + series.index + '_Point_' + point.index + '_Trackball';
	            width = (series.type !== 'Bubble') ? marker.width : (point.region.width);
	            height = (series.type !== 'Bubble') ? marker.height : (point.region.height);
	            var size = new helper_1.Size(width + 5, height + 5);
	            var options = new helper_2.PathOption(symbolId, marker.fill ? marker.fill : point.color, marker.border.width, marker.border.color, marker.opacity / 4, null, null);
	            var symbol = helper_2.drawSymbol(point.symbolLocation, shape, size, null, options, '');
	            symbol.setAttribute('style', 'pointer-events:none');
	            element.appendChild(symbol);
	        };
	        Tooltip.prototype.highlightPoint = function (series, pointIndex, highlight) {
	            var element = this.getElement(this.element.id + '_Series_' + series.index + '_Point_' + pointIndex);
	            element.setAttribute('opacity', (highlight ? series.opacity / 2 : series.opacity).toString());
	        };
	        Tooltip.prototype.getTooltipText = function (pointData) {
	            var series = pointData.series;
	            var format = this.getFormat(this.chart, series);
	            var separators = ['<br/>', '<br />', '<br>'];
	            var labels;
	            return this.parseTemplate(pointData, format, series.xAxis, series.yAxis).split(new RegExp(separators.join('|'), 'g'));
	        };
	        Tooltip.prototype.renderText = function (formatText, style, color, isRender) {
	            var height = 0;
	            var width = 0;
	            var size;
	            var options;
	            var groupElement = this.getElement(this.element.id + '_tooltip_group');
	            for (var k = 0, pointsLength = formatText.length; k < pointsLength; k++) {
	                size = helper_1.measureText(formatText[k], style);
	                height += size.height;
	                width = Math.max(width, size.width);
	                if (isRender) {
	                    options = new helper_1.TextOption(this.element.id + '_tooltip_text_series_' + k, this.padding, 0, 'start', formatText[k]);
	                    this.textElements.push(helper_1.textElement(options, style, color, groupElement));
	                }
	                this.textCollection.push(new helper_2.TextCollection(formatText[k], size.width, size.height));
	                height += this.padding;
	            }
	            height -= this.padding;
	            this.elementSize = new helper_1.Size(width, height);
	        };
	        Tooltip.prototype.changeText = function (point) {
	            point.y += this.padding;
	            point.x += this.padding;
	            for (var k = 0, length_1 = this.textCollection.length; k < length_1; k++) {
	                if (this.textElements[k]) {
	                    point.y += (k === 0 ? (3 * this.textCollection[k].height / 4) : this.textCollection[k].height);
	                    this.textElements[k].setAttribute('y', point.y.toString());
	                    this.textElements[k].setAttribute('x', point.x.toString());
	                    this.textElements[k].textContent = this.textCollection[k].text;
	                    point.y += this.padding;
	                }
	            }
	        };
	        Tooltip.prototype.parseTemplate = function (pointData, format, xAxis, yAxis) {
	            var val;
	            var textValue;
	            var xFormat;
	            var customLabelFormat;
	            var chart = this.chart;
	            for (var _i = 0, _a = Object.keys(pointData.point); _i < _a.length; _i++) {
	                var dataValue = _a[_i];
	                val = new RegExp('${point' + '.' + dataValue + '}', 'gm');
	                format = format.replace(val.source, this.formatPointValue(pointData, val.source === '${point.x}' ? xAxis : yAxis, dataValue, val.source === '${point.x}', (val.source === '${point.high}' ||
	                    val.source === '${point.low}' || val.source === '${point.y}')));
	            }
	            for (var _b = 0, _c = Object.keys(Object.getPrototypeOf(pointData.series)); _b < _c.length; _b++) {
	                var dataValue = _c[_b];
	                val = new RegExp('${series' + '.' + dataValue + '}', 'gm');
	                textValue = pointData.series[dataValue];
	                format = format.replace(val.source, textValue);
	            }
	            return format;
	        };
	        Tooltip.prototype.formatPointValue = function (pointData, axis, dataValue, isXPoint, isYPoint) {
	            var textValue;
	            var customLabelFormat;
	            if (axis.valueType !== 'Category' && isXPoint) {
	                customLabelFormat = axis.labelFormat && axis.labelFormat.match('{value}') !== null;
	                textValue = customLabelFormat ? axis.labelFormat.replace('{value}', axis.format(pointData.point[dataValue])) :
	                    axis.format(pointData.point[dataValue]);
	            }
	            else if (isYPoint) {
	                customLabelFormat = axis.labelFormat && axis.labelFormat.match('{value}') !== null;
	                textValue = customLabelFormat ? axis.labelFormat.replace('{value}', axis.format(pointData.point[dataValue])) :
	                    axis.format(pointData.point[dataValue]);
	            }
	            else {
	                textValue = pointData.point[dataValue];
	            }
	            return textValue;
	        };
	        Tooltip.prototype.getFormat = function (chart, series) {
	            if (!chart.tooltip.format) {
	                switch (series.seriesType) {
	                    case 'XY':
	                        return (series.type === 'Bubble') ? '${point.x} : ${point.y} : ${point.size}' : '${point.x} : ${point.y}';
	                    case 'HighLow':
	                        return '${point.x} : ${point.high} : ${point.low}';
	                }
	            }
	            return chart.tooltip.format;
	        };
	        Tooltip.prototype.stopAnimation = function () {
	            helper_2.stopTimer(this.toolTipInterval);
	        };
	        Tooltip.prototype.removeTooltip = function (isRemove) {
	            var _this = this;
	            var chart = this.chart;
	            var tooltipElement = this.getElement(this.element.id + '_tooltip');
	            this.stopAnimation();
	            if (tooltipElement && chart.storedPoints.length > 0) {
	                this.toolTipInterval = setTimeout(function () {
	                    if (chart.storedPoints.length > 0) {
	                        var series_1 = chart.storedPoints[0].series;
	                        var tooltipGroup_1 = _this.getElement(chart.element.id + '_tooltip_group')
	                            || tooltipElement.firstChild;
	                        var opacity_1 = parseFloat(tooltipGroup_1.getAttribute('opacity')) || 1;
	                        var element_1 = _this.getElement(chart.element.id + '_Series_' + chart.storedPoints[0].series.index
	                            + '_Point_' + chart.storedPoints[0].point.index);
	                        var rectOpacity_1;
	                        if (element_1 && series_1.isRectSeries && !chart.tooltip.shared) {
	                            rectOpacity_1 = parseFloat(element_1.getAttribute('opacity'));
	                        }
	                        new ej2_base_3.Animation({}).animate(tooltipGroup_1, {
	                            duration: 200,
	                            progress: function (args) {
	                                tooltipGroup_1.style.animation = '';
	                                tooltipGroup_1.setAttribute('opacity', (opacity_1 - (args.timeStamp / args.duration)).toString());
	                                if (element_1 && series_1.isRectSeries && !chart.tooltip.shared) {
	                                    element_1.setAttribute('opacity', (rectOpacity_1 + (rectOpacity_1 * (args.timeStamp / args.duration))).toString());
	                                }
	                            },
	                            end: function (model) {
	                                _this.valueX = null;
	                                _this.valueY = null;
	                                if (element_1 && series_1.isRectSeries && !chart.tooltip.shared) {
	                                    element_1.setAttribute('opacity', series_1.opacity.toString());
	                                }
	                                _this.removeHighlight(chart, chart.tooltip.shared);
	                                if (isRemove) {
	                                    tooltipElement.outerHTML = '';
	                                    chart.storedPoints = [];
	                                }
	                                tooltipGroup_1.setAttribute('opacity', '0');
	                                if (chart.tooltip.template && !chart.tooltip.shared) {
	                                    tooltipGroup_1.style.display = 'none';
	                                }
	                                chart.trigger('animationComplete', {});
	                                _this.isComplete = true;
	                            }
	                        });
	                    }
	                }, 2000);
	            }
	        };
	        Tooltip.prototype.animateTooltipDiv = function (tooltipDiv, rect) {
	            var _this = this;
	            var x = parseFloat(tooltipDiv.style.left);
	            var y = parseFloat(tooltipDiv.style.top);
	            var currenDiff;
	            new ej2_base_3.Animation({}).animate(tooltipDiv, {
	                duration: 300,
	                progress: function (args) {
	                    currenDiff = (args.timeStamp / args.duration);
	                    tooltipDiv.style.left = (x + currenDiff * (rect.x - x)) + 'px';
	                    tooltipDiv.style.top = (y + currenDiff * (rect.y - y)) + 'px';
	                },
	                end: function (model) {
	                    _this.updateDiv(tooltipDiv, rect.x, rect.y);
	                }
	            });
	        };
	        Tooltip.prototype.updateDiv = function (tooltipDiv, x, y) {
	            tooltipDiv.style.left = x + 'px';
	            tooltipDiv.style.top = y + 'px';
	        };
	        Tooltip.prototype.getData = function (chart) {
	            var point = null;
	            var series = null;
	            var width;
	            var height;
	            for (var len = chart.visibleSeries.length, i = len - 1; i >= 0; i--) {
	                series = chart.visibleSeries[i];
	                width = (series.type === 'Scatter' || (!series.isRectSeries && series.marker.visible)) ? (series.marker.height + 5) / 2 : 0;
	                height = (series.type === 'Scatter' || (!series.isRectSeries && series.marker.visible)) ? (series.marker.width + 5) / 2 : 0;
	                if (series.visible && helper_1.withInBounds(chart.mouseX, chart.mouseY, series.clipRect, width, height)) {
	                    point = this.getRectPoint(series, series.clipRect, chart.mouseX, chart.mouseY);
	                }
	                if (point) {
	                    return new helper_1.PointData(point, series);
	                }
	            }
	            return new helper_1.PointData(point, series);
	        };
	        Tooltip.prototype.getRectPoint = function (series, rect, x, y) {
	            var currentRect;
	            for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
	                var point = _a[_i];
	                if (!point.region) {
	                    continue;
	                }
	                currentRect = new helper_1.Rect(rect.x + point.region.x, rect.y + point.region.y, point.region.width, point.region.height);
	                if (helper_1.withInBounds(x, y, currentRect)) {
	                    return point;
	                }
	            }
	            return null;
	        };
	        Tooltip.prototype.getModuleName = function () {
	            return 'Tooltip';
	        };
	        Tooltip.prototype.destroy = function (chart) {
	        };
	        return Tooltip;
	    }());
	    exports.Tooltip = Tooltip;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(3), __webpack_require__(39), __webpack_require__(8), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, helper_1, zooming_toolkit_1, theme_1, constants_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var Zoom = (function () {
	        function Zoom(chart) {
	            this.chart = chart;
	            this.isDevice = ej2_base_1.Browser.isDevice;
	            this.isPointer = ej2_base_1.Browser.isPointer;
	            this.browserName = ej2_base_1.Browser.info.name;
	            var zooming = chart.zoomSettings;
	            this.toolkit = new zooming_toolkit_1.Toolkit(chart);
	            this.zooming = zooming;
	            this.elementId = chart.element.id;
	            this.zoomingRect = new helper_1.Rect(0, 0, 0, 0);
	            this.zoomAxes = [];
	        }
	        Zoom.prototype.renderZooming = function (e, chart, isTouch) {
	            this.calculateZoomAxesRange(chart, chart.axisCollections);
	            if (this.zooming.enableSelectionZooming && (!isTouch
	                || (chart.isDoubleTap && this.touchStartList.length === 1)) && (!this.isPanning || chart.isDoubleTap)) {
	                this.isPanning = this.isDevice ? true : this.isPanning;
	                this.drawZoomingRectangle(chart);
	            }
	            else if (this.isPanning && chart.isChartDrag) {
	                if (!isTouch || (isTouch && this.touchStartList.length === 1)) {
	                    this.pinchTarget = isTouch ? e.target : null;
	                    this.doPan(chart, chart.axisCollections);
	                }
	            }
	        };
	        Zoom.prototype.drawZoomingRectangle = function (chart) {
	            var areaBounds = chart.chartAxisLayoutPanel.seriesClipRect;
	            var startLocation = new helper_1.ChartLocation(chart.previousMouseMoveX, chart.previousMouseMoveY);
	            var endLocation = new helper_1.ChartLocation(chart.mouseX, chart.mouseY);
	            var rect = this.zoomingRect = helper_1.getRectLocation(startLocation, endLocation, areaBounds);
	            if (rect.width > 0 && rect.height > 0) {
	                this.isZoomed = true;
	                chart.disableTrackTooltip = true;
	                chart.svgObject.setAttribute('cursor', 'crosshair');
	                if (this.zooming.mode === 'X') {
	                    rect.height = areaBounds.height;
	                    rect.y = areaBounds.y;
	                }
	                else if (this.zooming.mode === 'Y') {
	                    rect.width = areaBounds.width;
	                    rect.x = areaBounds.x;
	                }
	                chart.svgObject.appendChild(chart.renderer.drawRectangle(new helper_1.RectOption(this.elementId + '_ZoomArea', theme_1.Theme.selectionRectFill, { color: theme_1.Theme.selectionRectStroke, width: 1 }, 1, rect, 0, 0, '', '3')));
	            }
	        };
	        Zoom.prototype.doPan = function (chart, axes) {
	            var currentScale;
	            var offset;
	            this.isZoomed = true;
	            var translateX;
	            var translateY;
	            this.offset = !chart.delayRedraw ? chart.chartAxisLayoutPanel.seriesClipRect : this.offset;
	            chart.delayRedraw = true;
	            chart.disableTrackTooltip = true;
	            axes.forEach(function (axis) {
	                currentScale = Math.max(1 / helper_1.minMax(axis.zoomFactor, 0, 1), 1);
	                if (axis.orientation === 'Horizontal') {
	                    offset = (chart.previousMouseMoveX - chart.mouseX) / axis.rect.width / currentScale;
	                    axis.zoomPosition = helper_1.minMax(axis.zoomPosition + offset, 0, (1 - axis.zoomFactor));
	                }
	                else {
	                    offset = (chart.previousMouseMoveY - chart.mouseY) / axis.rect.height / currentScale;
	                    axis.zoomPosition = helper_1.minMax(axis.zoomPosition - offset, 0, (1 - axis.zoomFactor));
	                }
	            });
	            if (this.zooming.enableDeferredZooming) {
	                translateX = chart.mouseX - chart.mouseDownX;
	                translateY = chart.mouseY - chart.mouseDownY;
	                switch (this.zooming.mode) {
	                    case 'X':
	                        translateY = 0;
	                        break;
	                    case 'Y':
	                        translateX = 0;
	                        break;
	                }
	                this.setTransform(translateX, translateY, null, null, chart, false);
	                this.refreshAxis(chart.chartAxisLayoutPanel, chart, chart.axisCollections);
	            }
	            else {
	                this.performZoomRedraw(chart);
	            }
	            chart.previousMouseMoveX = chart.mouseX;
	            chart.previousMouseMoveY = chart.mouseY;
	        };
	        Zoom.prototype.performZoomRedraw = function (chart) {
	            var rect = this.zoomingRect;
	            chart.animateSeries = false;
	            if (this.isZoomed) {
	                if (rect.width > 0 && rect.height > 0) {
	                    chart.svgObject.setAttribute('cursor', 'auto');
	                    this.doZoom(chart, chart.axisCollections, chart.chartAxisLayoutPanel.seriesClipRect);
	                    chart.isDoubleTap = false;
	                }
	                else if (chart.disableTrackTooltip) {
	                    chart.disableTrackTooltip = false;
	                    chart.delayRedraw = false;
	                    chart.removeSvg();
	                    chart.refreshAxis();
	                    chart.refreshBound();
	                }
	            }
	        };
	        Zoom.prototype.refreshAxis = function (layout, chart, axes) {
	            var mode = chart.zoomSettings.mode;
	            layout.measureAxis(new helper_1.Rect(chart.initialClipRect.x, chart.initialClipRect.y, chart.initialClipRect.width, chart.initialClipRect.height));
	            axes.map(function (axis, index) {
	                if (axis.orientation === 'Horizontal' && mode !== 'Y') {
	                    layout.drawXAxisLabels(axis, index);
	                }
	                if (axis.orientation === 'Vertical' && mode !== 'X') {
	                    layout.drawYAxisLabels(axis, index);
	                }
	            });
	        };
	        Zoom.prototype.doZoom = function (chart, axes, bounds) {
	            var zoomRect = this.zoomingRect;
	            var mode = this.zooming.mode;
	            var argsData;
	            var previousZF;
	            var previousZP;
	            var currentZF;
	            var currentZP;
	            axes.forEach(function (axis) {
	                previousZF = currentZF = axis.zoomFactor;
	                previousZP = currentZP = axis.zoomPosition;
	                if (axis.orientation === 'Horizontal') {
	                    if (mode !== 'Y') {
	                        currentZP += Math.abs((zoomRect.x - bounds.x) / (bounds.width)) * axis.zoomFactor;
	                        currentZF *= (zoomRect.width / bounds.width);
	                    }
	                }
	                else {
	                    if (mode !== 'X') {
	                        currentZP += (1 - Math.abs((zoomRect.height + (zoomRect.y - bounds.y)) / (bounds.height))) * axis.zoomFactor;
	                        currentZF *= (zoomRect.height / bounds.height);
	                    }
	                }
	                argsData = {
	                    cancel: false, name: constants_1.zoomComplete, axis: axis, previousZoomFactor: previousZF, previousZoomPosition: previousZP,
	                    currentZoomFactor: currentZF, currentZoomPosition: currentZP
	                };
	                chart.trigger(constants_1.zoomComplete, argsData);
	                if (!argsData.cancel) {
	                    axis.zoomFactor = argsData.currentZoomFactor;
	                    axis.zoomPosition = argsData.currentZoomPosition;
	                }
	            });
	            this.zoomingRect = new helper_1.Rect(0, 0, 0, 0);
	            this.performZoomRedraw(chart);
	        };
	        Zoom.prototype.performMouseWheelZooming = function (e, mouseX, mouseY, chart, axes) {
	            var direction = (this.browserName === 'mozilla' && !this.isPointer) ?
	                -(e.detail) / 3 > 0 ? 1 : -1 : (e.wheelDelta / 120) > 0 ? 1 : -1;
	            var mode = this.zooming.mode;
	            var origin = 0.5;
	            var cumulative;
	            var zoomFactor;
	            var zoomPosition;
	            this.isZoomed = true;
	            this.calculateZoomAxesRange(chart, chart.axisCollections);
	            chart.disableTrackTooltip = true;
	            axes.forEach(function (axis) {
	                if ((axis.orientation === 'Vertical' && mode !== 'X') ||
	                    (axis.orientation === 'Horizontal' && mode !== 'Y')) {
	                    cumulative = Math.max(Math.max(1 / helper_1.minMax(axis.zoomFactor, 0, 1), 1) + (0.25 * direction), 1);
	                    if (cumulative >= 1) {
	                        origin = axis.orientation === 'Horizontal' ? mouseX / axis.rect.width : 1 - (mouseY / axis.rect.height);
	                        origin = origin > 1 ? 1 : origin < 0 ? 0 : origin;
	                        zoomFactor = (cumulative === 1) ? 1 : helper_1.minMax(1 / cumulative, 0, 1);
	                        zoomPosition = (cumulative === 1) ? 0 : axis.zoomPosition + ((axis.zoomFactor - zoomFactor) * origin);
	                        if (axis.zoomPosition !== zoomPosition || axis.zoomFactor !== zoomFactor) {
	                            zoomFactor = (zoomPosition + zoomFactor) > 1 ? (1 - zoomPosition) : zoomFactor;
	                        }
	                    }
	                    axis.zoomFactor = zoomFactor;
	                    axis.zoomPosition = zoomPosition;
	                }
	            });
	            this.performZoomRedraw(chart);
	        };
	        Zoom.prototype.performPinchZooming = function (e, chart) {
	            if (this.zoomingRect.width > 0 && this.zoomingRect.height > 0) {
	                return false;
	            }
	            this.calculateZoomAxesRange(chart, chart.axisCollections);
	            this.isZoomed = true;
	            this.isPanning = true;
	            this.offset = !chart.delayRedraw ? chart.chartAxisLayoutPanel.seriesClipRect : this.offset;
	            chart.delayRedraw = true;
	            chart.disableTrackTooltip = true;
	            var elementOffset = chart.element.getBoundingClientRect();
	            var touchDown = this.touchStartList;
	            var touchMove = this.touchMoveList;
	            var touch0StartX = touchDown[0].pageX - elementOffset.left;
	            var touch0StartY = touchDown[0].pageY - elementOffset.top;
	            var touch0EndX = touchMove[0].pageX - elementOffset.left;
	            var touch0EndY = touchMove[0].pageY - elementOffset.top;
	            var touch1StartX = touchDown[1].pageX - elementOffset.left;
	            var touch1StartY = touchDown[1].pageY - elementOffset.top;
	            var touch1EndX = touchMove[1].pageX - elementOffset.left;
	            var touch1EndY = touchMove[1].pageY - elementOffset.top;
	            var scaleX;
	            var scaleY;
	            var translateXValue;
	            var translateYValue;
	            var pinchRect;
	            var clipX;
	            var clipY;
	            scaleX = Math.abs(touch0EndX - touch1EndX) / Math.abs(touch0StartX - touch1StartX);
	            scaleY = Math.abs(touch0EndY - touch1EndY) / Math.abs(touch0StartY - touch1StartY);
	            clipX = ((this.offset.x - touch0EndX) / scaleX) + touch0StartX;
	            clipY = ((this.offset.y - touch0EndY) / scaleY) + touch0StartY;
	            pinchRect = new helper_1.Rect(clipX, clipY, this.offset.width / scaleX, this.offset.height / scaleY);
	            translateXValue = (touch0EndX - (scaleX * touch0StartX));
	            translateYValue = (touch0EndY - (scaleY * touch0StartY));
	            if (!isNaN(scaleX - scaleX) && !isNaN(scaleY - scaleY)) {
	                switch (this.zooming.mode) {
	                    case 'XY':
	                        this.setTransform(translateXValue, translateYValue, scaleX, scaleY, chart, true);
	                        break;
	                    case 'X':
	                        this.setTransform(translateXValue, 0, scaleX, 1, chart, true);
	                        break;
	                    case 'Y':
	                        this.setTransform(0, translateYValue, 1, scaleY, chart, true);
	                        break;
	                }
	            }
	            this.calculatePinchZoomFactor(chart, pinchRect);
	            this.refreshAxis(chart.chartAxisLayoutPanel, chart, chart.axisCollections);
	            return true;
	        };
	        Zoom.prototype.calculatePinchZoomFactor = function (chart, pinchRect) {
	            var _this = this;
	            var mode = this.zooming.mode;
	            var selectionMin;
	            var selectionMax;
	            var rangeMin;
	            var rangeMax;
	            var value;
	            var axisTrans;
	            chart.axisCollections.forEach(function (axis, index) {
	                if ((axis.orientation === 'Horizontal' && mode !== 'Y') ||
	                    (axis.orientation === 'Vertical' && mode !== 'X')) {
	                    if (axis.orientation === 'Horizontal') {
	                        value = pinchRect.x - _this.offset.x;
	                        axisTrans = axis.rect.width / _this.zoomAxes[index].delta;
	                        rangeMin = value / axisTrans + _this.zoomAxes[index].min;
	                        value = pinchRect.x + pinchRect.width - _this.offset.x;
	                        rangeMax = value / axisTrans + _this.zoomAxes[index].min;
	                    }
	                    else {
	                        value = pinchRect.y - _this.offset.y;
	                        axisTrans = axis.rect.height / _this.zoomAxes[index].delta;
	                        rangeMin = (value * -1 + axis.rect.height) / axisTrans + _this.zoomAxes[index].min;
	                        value = pinchRect.y + pinchRect.height - _this.offset.y;
	                        rangeMax = (value * -1 + axis.rect.height) / axisTrans + _this.zoomAxes[index].min;
	                    }
	                    selectionMin = Math.min(rangeMin, rangeMax);
	                    selectionMax = Math.max(rangeMin, rangeMax);
	                    axis.zoomPosition = (selectionMin - _this.zoomAxes[index].actualMin) / _this.zoomAxes[index].actualDelta;
	                    axis.zoomFactor = (selectionMax - selectionMin) / _this.zoomAxes[index].actualDelta;
	                    axis.zoomPosition = axis.zoomPosition < 0 ? 0 : axis.zoomPosition;
	                    axis.zoomFactor = axis.zoomFactor > 1 ? 1 : axis.zoomFactor;
	                }
	            });
	        };
	        Zoom.prototype.setTransform = function (transX, transY, scaleX, scaleY, chart, isPinch) {
	            chart.seriesElements.setAttribute('clip-path', 'url(#' + this.elementId + '_ChartAreaClipRect_)');
	            var translate;
	            var xAxisLoc;
	            var yAxisLoc;
	            var element;
	            if (transX !== null && transY !== null) {
	                chart.visibleSeries.forEach(function (value) {
	                    xAxisLoc = chart.requireInvertedAxis ? value.yAxis.rect.x : value.xAxis.rect.x;
	                    yAxisLoc = chart.requireInvertedAxis ? value.xAxis.rect.y : value.yAxis.rect.y;
	                    translate = 'translate(' + (transX + (isPinch ? (scaleX * xAxisLoc) : xAxisLoc)) +
	                        ',' + (transY + (isPinch ? (scaleY * yAxisLoc) : yAxisLoc)) + ')';
	                    translate = (scaleX || scaleY) ? translate + ' scale(' + scaleX + ' ' + scaleY + ')' : translate;
	                    value.seriesElement.setAttribute('transform', translate);
	                    element = helper_1.getElement(chart.element.id + '_Series_' + value.index + '_DataLabelCollections');
	                    if (value.symbolElement) {
	                        value.symbolElement.setAttribute('transform', translate);
	                    }
	                    if (value.textElement) {
	                        value.textElement.setAttribute('visibility', 'hidden');
	                        value.shapeElement.setAttribute('visibility', 'hidden');
	                    }
	                    if (element) {
	                        element.style.visibility = 'hidden';
	                    }
	                });
	            }
	        };
	        Zoom.prototype.calculateZoomAxesRange = function (chart, axes) {
	            var _this = this;
	            var range;
	            var axisRange;
	            chart.axisCollections.forEach(function (axis, index) {
	                axisRange = axis.actualRange;
	                if (_this.zoomAxes[index]) {
	                    if (!chart.delayRedraw) {
	                        _this.zoomAxes[index].min = axisRange.min;
	                        _this.zoomAxes[index].delta = axisRange.delta;
	                    }
	                }
	                else {
	                    range = {
	                        actualMin: axisRange.min,
	                        actualDelta: axisRange.delta,
	                        min: axisRange.min,
	                        delta: axisRange.delta
	                    };
	                    _this.zoomAxes[index] = range;
	                }
	            });
	        };
	        Zoom.prototype.showZoomingToolkit = function (chart) {
	            var toolboxItems = this.zooming.toolbarItems;
	            var areaBounds = chart.chartAxisLayoutPanel.seriesClipRect;
	            var spacing = 5;
	            var render = chart.renderer;
	            var length = this.isDevice ? 1 : toolboxItems.length;
	            var iconSize = this.isDevice ? helper_1.measureText('Reset Zoom', { size: '12px' }).width : 16;
	            var height = this.isDevice ? helper_1.measureText('Reset Zoom', { size: '12px' }).height : 22;
	            var width = (length * iconSize) + ((length + 1) * spacing) + ((length - 1) * spacing);
	            var transX = areaBounds.x + areaBounds.width - width - spacing;
	            var transY = (areaBounds.y + spacing);
	            var xPosition = spacing;
	            var outerElement;
	            var toolkit = this.toolkit;
	            var element;
	            var shadowElement = '<filter id="chart_shadow" height="130%"><feGaussianBlur in="SourceAlpha" stdDeviation="5"/>';
	            shadowElement += '<feOffset dx="-3" dy="4" result="offsetblur"/><feComponentTransfer><feFuncA type="linear" slope="1"/>';
	            shadowElement += '</feComponentTransfer><feMerge><feMergeNode/><feMergeNode in="SourceGraphic"/></feMerge></filter>';
	            if (length === 0 || helper_1.getElement(this.elementId + '_Zooming_KitCollection')) {
	                return false;
	            }
	            var defElement = render.createDefs();
	            toolboxItems = this.isDevice ? ['Reset'] : toolboxItems;
	            defElement.innerHTML = shadowElement;
	            this.toolkitElements = render.createGroup({
	                id: this.elementId + '_Zooming_KitCollection',
	                transform: 'translate(' + transX + ',' + transY + ')'
	            });
	            this.toolkitElements.appendChild(defElement);
	            this.toolkitElements.appendChild(render.drawRectangle(new helper_1.RectOption(this.elementId + '_Zooming_Rect', '#fafafa', { color: 'transparent', width: 1 }, 1, new helper_1.Rect(0, 0, width, (height + (spacing * 2))), 0, 0)));
	            outerElement = render.drawRectangle(new helper_1.RectOption(this.elementId + '_Zooming_Rect', '#fafafa', { color: 'transparent', width: 1 }, 0.1, new helper_1.Rect(0, 0, width, (height + (spacing * 2))), 0, 0));
	            outerElement.setAttribute('filter', 'url(#chart_shadow)');
	            this.toolkitElements.appendChild(outerElement);
	            var currentItem;
	            for (var i = 1; i <= length; i++) {
	                currentItem = toolboxItems[i - 1];
	                element = render.createGroup({
	                    transform: 'translate(' + xPosition + ',' + (this.isDevice ? spacing : (spacing + 3)) + ')'
	                });
	                switch (currentItem) {
	                    case 'Pan':
	                        toolkit.createPanButton(element, this.toolkitElements, chart);
	                        break;
	                    case 'Zoom':
	                        toolkit.createZoomButton(element, this.toolkitElements, chart);
	                        break;
	                    case 'ZoomIn':
	                        toolkit.createZoomInButton(element, this.toolkitElements, chart);
	                        break;
	                    case 'ZoomOut':
	                        toolkit.createZoomOutButton(element, this.toolkitElements, chart);
	                        break;
	                    case 'Reset':
	                        toolkit.createResetButton(element, this.toolkitElements, chart, this.isDevice);
	                        break;
	                }
	                xPosition += iconSize + (spacing * 2);
	            }
	            this.toolkitElements.setAttribute('opacity', this.isDevice ? '1' : '0.3');
	            this.toolkitElements.setAttribute('cursor', 'auto');
	            chart.svgObject.appendChild(this.toolkitElements);
	            if (!this.isDevice) {
	                ej2_base_1.EventHandler.add(this.toolkitElements, 'mousemove touchstart', this.zoomToolkitMove, this);
	                ej2_base_1.EventHandler.add(this.toolkitElements, 'mouseleave touchend', this.zoomToolkitLeave, this);
	                if (this.isPanning) {
	                    toolkit.pan();
	                }
	            }
	            return true;
	        };
	        Zoom.prototype.applyZoomToolkit = function (chart, axes) {
	            var showToolkit = false;
	            var toolkitElement = helper_1.getElement(this.elementId + '_Zooming_KitCollection');
	            axes.forEach(function (axis) {
	                showToolkit = (showToolkit || (axis.zoomFactor !== 1 || axis.zoomPosition !== 0));
	            });
	            if (showToolkit) {
	                this.showZoomingToolkit(chart);
	                this.isZoomed = true;
	            }
	            else {
	                this.toolkit.removeTooltip();
	                if (this.toolkitElements) {
	                    this.toolkitElements.remove();
	                }
	                this.isPanning = false;
	                this.isZoomed = false;
	            }
	        };
	        Zoom.prototype.zoomToolkitMove = function (e) {
	            var element = this.toolkitElements;
	            var opacity = +element.getAttribute('opacity');
	            element.setAttribute('opacity', '1');
	            return false;
	        };
	        Zoom.prototype.zoomToolkitLeave = function (e) {
	            var element = this.toolkitElements;
	            element.setAttribute('opacity', '0.3');
	            return false;
	        };
	        Zoom.prototype.getModuleName = function () {
	            return 'Zoom';
	        };
	        Zoom.prototype.destroy = function (chart) {
	        };
	        return Zoom;
	    }());
	    exports.Zoom = Zoom;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(4), __webpack_require__(3), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, ej2_base_2, helper_1, helper_2) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var Toolkit = (function () {
	        function Toolkit(chart) {
	            this.chart = chart;
	            this.elementId = chart.element.id;
	            this.selectionColor = '#ff4081';
	            this.fillColor = '#737373';
	        }
	        Toolkit.prototype.createPanButton = function (childElement, parentElement, chart) {
	            var render = this.chart.renderer;
	            var fillColor = this.chart.zoomModule.isPanning ? this.selectionColor : this.fillColor;
	            var direction = 'M5,3h2.3L7.275,5.875h1.4L8.65,3H11L8,0L5,3z M3,11V8.7l2.875,0.025v-1.4L3,7.35V5L0,8L3,';
	            direction += '11z M11,13H8.7l0.025-2.875h-1.4L7.35,13H5l3,3L11,13z M13,5v2.3l-2.875-0.025v1.4L13,8.65V11l3-3L13,5z';
	            childElement.id = this.elementId + '_Zooming_Pan';
	            childElement.setAttribute('aria-label', 'Pan');
	            this.panElements = childElement;
	            childElement.appendChild(render.drawRectangle(new helper_1.RectOption(this.elementId + '_Zooming_Pan_1', 'transparent', {}, 1, new helper_1.Rect(0, 0, 16, 16))));
	            childElement.appendChild(render.drawPath(new helper_1.PathOption(this.elementId + '_Zooming_Pan_2', fillColor, null, null, 1, null, direction)));
	            parentElement.appendChild(childElement);
	            this.wireEvents(childElement, this.pan);
	        };
	        Toolkit.prototype.createZoomButton = function (childElement, parentElement, chart) {
	            var render = this.chart.renderer;
	            var fillColor = this.chart.zoomModule.isPanning ? this.fillColor : this.selectionColor;
	            var direction = 'M0.001,14.629L1.372,16l4.571-4.571v-0.685l0.228-0.274c1.051,0.868,2.423,1.417,3.885,1.417c3.291,0,';
	            direction += '5.943-2.651,5.943-5.943S13.395,0,10.103,0S4.16,2.651,4.16,5.943c0,1.508,0.503,2.834,1.417,3.885l-0.274,0.228H4.571';
	            direction = direction + 'L0.001,14.629L0.001,14.629z M5.943,5.943c0-2.285,1.828-4.114,4.114-4.114s4.114,1.828,4.114,';
	            childElement.id = this.elementId + '_Zooming_Zoom';
	            childElement.setAttribute('aria-label', 'Zoom');
	            this.zoomElements = childElement;
	            childElement.appendChild(render.drawRectangle(new helper_1.RectOption(this.elementId + '_Zooming_Zoom_1', 'transparent', {}, 1, new helper_1.Rect(0, 0, 16, 16))));
	            childElement.appendChild(render.drawPath(new helper_1.PathOption(this.elementId + '_Zooming_Zoom_3', fillColor, null, null, 1, null, direction + '4.114s-1.828,4.114-4.114,4.114S5.943,8.229,5.943,5.943z')));
	            parentElement.appendChild(childElement);
	            this.wireEvents(childElement, this.zoom);
	        };
	        Toolkit.prototype.createZoomInButton = function (childElement, parentElement, chart) {
	            var render = this.chart.renderer;
	            var fillColor = this.fillColor;
	            var direction = 'M10.103,0C6.812,0,4.16,2.651,4.16,5.943c0,1.509,0.503,2.834,1.417,3.885l-0.274,0.229H4.571L0,';
	            direction += '14.628l0,0L1.372,16l4.571-4.572v-0.685l0.228-0.275c1.052,0.868,2.423,1.417,3.885,1.417c3.291,0,5.943-2.651,';
	            direction += '5.943-5.943C16,2.651,13.395,0,10.103,0z M10.058,10.058c-2.286,0-4.114-1.828-4.114-4.114c0-2.286,1.828-4.114,';
	            childElement.id = this.elementId + '_Zooming_ZoomIn';
	            childElement.setAttribute('aria-label', 'ZoomIn');
	            var polygonDirection = '12.749,5.466 10.749,5.466 10.749,3.466 9.749,3.466 9.749,5.466 7.749,5.466 7.749,6.466';
	            childElement.appendChild(render.drawRectangle(new helper_1.RectOption(this.elementId + '_Zooming_ZoomIn_1', 'transparent', {}, 1, new helper_1.Rect(0, 0, 16, 16))));
	            childElement.appendChild(render.drawPath(new helper_1.PathOption(this.elementId + '_Zooming_ZoomIn_2', fillColor, null, null, 1, null, direction + '4.114-4.114c2.286,0,4.114,1.828,4.114,4.114C14.172,8.229,12.344,10.058,10.058,10.058z')));
	            childElement.appendChild(render.drawPolygon(new helper_1.PolygonOption(this.elementId + '_Zooming_ZoomIn_3', polygonDirection + ' 9.749,6.466 9.749,8.466 10.749,8.466 10.749,6.466 12.749,6.466', fillColor)));
	            this.zoomInElements = childElement;
	            this.elementOpacity = chart.zoomModule.isPanning ? '0.2' : '1';
	            childElement.setAttribute('opacity', this.elementOpacity);
	            parentElement.appendChild(childElement);
	            this.wireEvents(childElement, this.zoomIn);
	        };
	        Toolkit.prototype.createZoomOutButton = function (childElement, parentElement, chart) {
	            var render = this.chart.renderer;
	            var fillColor = this.fillColor;
	            var direction = 'M0,14.622L1.378,16l4.533-4.533v-0.711l0.266-0.266c1.022,0.889,2.4,1.422,3.866,';
	            direction += '1.422c3.289,0,5.955-2.666,5.955-5.955S13.333,0,10.044,0S4.089,2.667,4.134,5.911c0,1.466,0.533,2.844,';
	            direction += '1.422,3.866l-0.266,0.266H4.578L0,14.622L0,14.622z M5.911,5.911c0-2.311,1.822-4.133,4.133-4.133s4.133,1.822,4.133,';
	            childElement.id = this.elementId + '_Zooming_ZoomOut';
	            childElement.setAttribute('aria-label', 'ZoomOut');
	            childElement.appendChild(render.drawRectangle(new helper_1.RectOption(this.elementId + '_Zooming_ZoomOut_1', 'transparent', {}, 1, new helper_1.Rect(0, 0, 16, 16))));
	            childElement.appendChild(render.drawPath(new helper_1.PathOption(this.elementId + '_Zooming_ZoomOut_2', fillColor, null, null, 1, null, direction + '4.133s-1.866,4.133-4.133,4.133S5.911,8.222,5.911,5.911z M12.567,6.466h-5v-1h5V6.466z')));
	            this.zoomOutElements = childElement;
	            this.elementOpacity = chart.zoomModule.isPanning ? '0.2' : '1';
	            childElement.setAttribute('opacity', this.elementOpacity);
	            parentElement.appendChild(childElement);
	            this.wireEvents(childElement, this.zoomOut);
	        };
	        Toolkit.prototype.createResetButton = function (childElement, parentElement, chart, isDevice) {
	            var render = this.chart.renderer;
	            var fillColor = this.fillColor;
	            var size;
	            var direction = 'M12.364,8h-2.182l2.909,3.25L16,8h-2.182c0-3.575-2.618-6.5-5.818-6.5c-1.128,0-2.218,0.366-3.091,';
	            direction += '1.016l1.055,1.178C6.581,3.328,7.272,3.125,8,3.125C10.4,3.125,12.363,5.319,12.364,8L12.364,8z M11.091,';
	            direction += '13.484l-1.055-1.178C9.419,12.672,8.728,12.875,8,12.875c-2.4,0-4.364-2.194-4.364-4.875h2.182L2.909,4.75L0,8h2.182c0,';
	            childElement.id = this.elementId + '_Zooming_Reset';
	            childElement.setAttribute('aria-label', 'Reset');
	            if (!isDevice) {
	                childElement.appendChild(render.drawRectangle(new helper_1.RectOption(this.elementId + '_Zooming_Reset_1', 'transparent', {}, 1, new helper_1.Rect(0, 0, 16, 16))));
	                childElement.appendChild(render.drawPath(new helper_1.PathOption(this.elementId + '_Zooming_Reset_2', fillColor, null, null, 1, null, direction + '3.575,2.618,6.5,5.818,6.5C9.128,14.5,10.219,14.134,11.091,13.484L11.091,13.484z')));
	            }
	            else {
	                size = helper_1.measureText('Reset Zoom', { size: '12px' });
	                childElement.appendChild(render.drawRectangle(new helper_1.RectOption(this.elementId + '_Zooming_Reset_1', 'transparent', {}, 1, new helper_1.Rect(0, 0, size.width, size.height))));
	                helper_2.textElement(new helper_2.TextOption(this.elementId + '_Zooming_Reset_2', 0 + size.width / 2, 0 + size.height * 3 / 4, 'middle', 'Reset Zoom', 'rotate(0,' + (0) + ',' + (0) + ')', 'auto'), { size: '12px' }, 'black', childElement);
	            }
	            parentElement.appendChild(childElement);
	            this.wireEvents(childElement, this.reset);
	        };
	        Toolkit.prototype.wireEvents = function (element, process) {
	            ej2_base_1.EventHandler.add(element, 'mousedown touchstart', process, this);
	            ej2_base_1.EventHandler.add(element, 'mouseover', this.showTooltip, this);
	            ej2_base_1.EventHandler.add(element, 'mouseout', this.removeTooltip, this);
	        };
	        Toolkit.prototype.showTooltip = function (event) {
	            var text = event.currentTarget.id.split('_Zooming_')[1];
	            var left = (event.pageX - (helper_1.measureText(text, { size: '10px' }).width + 5));
	            if (!this.chart.isTouch) {
	                helper_1.createTooltip('EJ2_Chart_ZoomTip', text, (event.pageY + 10), left, '10px');
	            }
	        };
	        Toolkit.prototype.removeTooltip = function () {
	            helper_1.removeElement('EJ2_Chart_ZoomTip');
	        };
	        Toolkit.prototype.reset = function () {
	            var chart = this.chart;
	            if (!chart.zoomModule.isDevice) {
	                ej2_base_2.remove(chart.zoomModule.toolkitElements);
	            }
	            this.removeTooltip();
	            chart.svgObject.setAttribute('cursor', 'auto');
	            chart.axisCollections.forEach(function (axis) {
	                axis.zoomFactor = 1;
	                axis.zoomPosition = 0;
	            });
	            chart.disableTrackTooltip = false;
	            chart.zoomModule.isZoomed = chart.zoomModule.isPanning = chart.isChartDrag = chart.delayRedraw = false;
	            chart.zoomModule.touchMoveList = chart.zoomModule.touchStartList = [];
	            chart.zoomModule.pinchTarget = null;
	            chart.removeSvg();
	            chart.refreshAxis();
	            chart.refreshBound();
	            this.elementOpacity = '1';
	            return false;
	        };
	        Toolkit.prototype.zoomIn = function (e) {
	            this.zoomInOutCalculation(1, this.chart, this.chart.axisCollections, this.chart.zoomSettings.mode);
	            return false;
	        };
	        Toolkit.prototype.zoomOut = function (e) {
	            this.zoomInOutCalculation(-1, this.chart, this.chart.axisCollections, this.chart.zoomSettings.mode);
	            return false;
	        };
	        Toolkit.prototype.zoom = function (e) {
	            this.chart.zoomModule.isPanning = false;
	            var zoomModule = this.chart.zoomModule;
	            this.elementOpacity = '1';
	            this.chart.svgObject.setAttribute('cursor', 'auto');
	            this.zoomInElements.setAttribute('opacity', this.elementOpacity);
	            this.zoomOutElements.setAttribute('opacity', this.elementOpacity);
	            this.applySelection(this.zoomElements.childNodes, this.selectionColor);
	            this.applySelection(this.panElements.childNodes, '#737373');
	            return false;
	        };
	        Toolkit.prototype.pan = function () {
	            var zoomModule = this.chart.zoomModule;
	            this.chart.zoomModule.isPanning = true;
	            this.chart.svgObject.setAttribute('cursor', 'pointer');
	            this.elementOpacity = '0.2';
	            this.zoomInElements.setAttribute('opacity', this.elementOpacity);
	            this.zoomOutElements.setAttribute('opacity', this.elementOpacity);
	            this.applySelection(this.panElements.childNodes, this.selectionColor);
	            this.applySelection(this.zoomElements.childNodes, '#737373');
	            return false;
	        };
	        Toolkit.prototype.zoomInOutCalculation = function (scale, chart, axes, mode) {
	            if (!chart.zoomModule.isPanning && this.elementOpacity !== '0.2') {
	                var zoomFactor_1;
	                var zoomPosition_1;
	                var cumulative_1;
	                chart.disableTrackTooltip = true;
	                chart.delayRedraw = true;
	                axes.forEach(function (axis) {
	                    if ((axis.orientation === 'Horizontal' && mode !== 'Y') ||
	                        (axis.orientation === 'Vertical' && mode !== 'X')) {
	                        cumulative_1 = Math.max(Math.max(1 / helper_1.minMax(axis.zoomFactor, 0, 1), 1) + (0.25 * scale), 1);
	                        zoomFactor_1 = (cumulative_1 === 1) ? 1 : helper_1.minMax(1 / cumulative_1, 0, 1);
	                        zoomPosition_1 = (cumulative_1 === 1) ? 0 : axis.zoomPosition + ((axis.zoomFactor - zoomFactor_1) * 0.5);
	                        if (axis.zoomPosition !== zoomPosition_1 || axis.zoomFactor !== zoomFactor_1) {
	                            zoomFactor_1 = (zoomPosition_1 + zoomFactor_1) > 1 ? (1 - zoomPosition_1) : zoomFactor_1;
	                        }
	                        axis.zoomFactor = zoomFactor_1;
	                        axis.zoomPosition = zoomPosition_1;
	                    }
	                });
	            }
	        };
	        Toolkit.prototype.applySelection = function (elements, color) {
	            for (var i = 1, length_1 = elements.length; i < length_1; i++) {
	                elements[i].setAttribute('fill', color);
	            }
	        };
	        return Toolkit;
	    }());
	    exports.Toolkit = Toolkit;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(4), __webpack_require__(3), __webpack_require__(7), __webpack_require__(8), __webpack_require__(12), __webpack_require__(41)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, ej2_base_2, helper_1, base_1, theme_1, constants_1, selection_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var Selection = (function (_super) {
	        __extends(Selection, _super);
	        function Selection(chart) {
	            var _this = _super.call(this, chart) || this;
	            _this.renderer = chart.renderer;
	            return _this;
	        }
	        Selection.prototype.initPrivateVariables = function (chart) {
	            this.styleId = chart.element.id + '_ej2_chart_selection';
	            this.unselected = chart.element.id + '_ej2_deselected';
	            this.closeIconId = chart.element.id + '_ej2_drag_close';
	            this.draggedRectGroup = chart.element.id + '_ej2_drag_group';
	            this.draggedRect = chart.element.id + '_ej2_drag_rect';
	            this.selectedDataIndexes = [];
	            this.rectPoints = null;
	            this.isSeriesMode = chart.selectionMode === 'Series';
	        };
	        Selection.prototype.invokeSelection = function (chart) {
	            this.initPrivateVariables(chart);
	            this.series = ej2_base_2.extend({}, chart.visibleSeries, null, true);
	            this.seriesStyles();
	            if (!(chart.selectionMode.indexOf('Drag') > -1)) {
	                this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));
	            }
	        };
	        Selection.prototype.generateStyle = function (series) {
	            if (series) {
	                return (series.selectionStyle || this.styleId + '_series_' + series.index);
	            }
	            return 'undefined';
	        };
	        Selection.prototype.selectDataIndex = function (chart, indexes) {
	            for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {
	                var index = indexes_1[_i];
	                this.performSelection(index, chart, this.getElementByIndex(chart, index));
	            }
	        };
	        Selection.prototype.getElementByIndex = function (chart, index) {
	            var elementId = chart.element.id + '_Series_' + index.series + '_Point_' + index.point;
	            elementId = (!chart.series[index.series].isRectSeries && chart.series[index.series].type !== 'Scatter' &&
	                chart.series[index.series].type !== 'Bubble' &&
	                chart.series[index.series].marker.visible) ? (elementId + '_Symbol') : elementId;
	            return document.getElementById(elementId);
	        };
	        Selection.prototype.getClusterElements = function (chart, index) {
	            var clusters = [];
	            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {
	                var series = _a[_i];
	                index = new base_1.Index(series.index, index.point);
	                clusters.push(this.getElementByIndex(chart, index));
	            }
	            return clusters;
	        };
	        Selection.prototype.findElements = function (chart, series, index) {
	            if (this.isSeriesMode) {
	                return this.getSeriesElements(series);
	            }
	            else if (chart.selectionMode === 'Cluster') {
	                return this.getClusterElements(chart, index);
	            }
	            else {
	                return [this.getElementByIndex(chart, index)];
	            }
	        };
	        Selection.prototype.calculateSelectedElements = function (chart, event) {
	            if (event.target.id.indexOf('_Series_') > -1) {
	                this.performSelection(this.indexFinder(event.target.id), chart, event.target);
	            }
	        };
	        Selection.prototype.performSelection = function (index, chart, element) {
	            this.isSeriesMode = chart.selectionMode === 'Series';
	            switch (chart.selectionMode) {
	                case 'Series':
	                    this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));
	                    this.blurEffect(chart.element.id, chart.visibleSeries);
	                    break;
	                case 'Point':
	                    if (!isNaN(index.point)) {
	                        this.selection(chart, index, [element]);
	                        this.blurEffect(chart.element.id, chart.visibleSeries);
	                    }
	                    break;
	                case 'Cluster':
	                    if (!isNaN(index.point)) {
	                        this.clusterSelection(chart, chart.series, index);
	                        this.blurEffect(chart.element.id, chart.visibleSeries);
	                    }
	                    break;
	            }
	        };
	        Selection.prototype.selection = function (chart, index, selectedElements) {
	            if (!chart.isMultiSelect && (chart.selectionMode.indexOf('Drag') === -1)) {
	                this.removeMultiSelectEelments(chart, this.selectedDataIndexes, index, chart.series);
	            }
	            var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');
	            if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {
	                this.removeStyles(selectedElements);
	                this.addOrRemoveIndex(this.selectedDataIndexes, index);
	            }
	            else {
	                this.applyStyles(selectedElements);
	                this.addOrRemoveIndex(this.selectedDataIndexes, index, true);
	            }
	        };
	        Selection.prototype.clusterSelection = function (chart, series, index) {
	            this.selection(chart, index, this.getClusterElements(chart, new base_1.Index(index.series, index.point)));
	        };
	        Selection.prototype.removeMultiSelectEelments = function (chart, index, currentIndex, seriesCollection) {
	            var series;
	            for (var i = 0; i < index.length; i++) {
	                series = seriesCollection[index[i].series];
	                if ((this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode)) ||
	                    (this.control.selectionMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false)) ||
	                    (!this.isSeriesMode && this.toEquals(index[i], currentIndex, true) && !this.toEquals(index[i], currentIndex, false))) {
	                    this.removeStyles(this.findElements(chart, series, index[i]));
	                    index.splice(i, 1);
	                    i--;
	                }
	            }
	        };
	        Selection.prototype.blurEffect = function (chartId, visibleSeries) {
	            var visibility = this.checkVisibility(this.selectedDataIndexes);
	            for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {
	                var series = visibleSeries_1[_i];
	                if (series.visible) {
	                    this.checkSelectionElements(document.getElementById(chartId + 'SeriesGroup' + series.index), this.generateStyle(series), visibility);
	                    if (!ej2_base_2.isNullOrUndefined(document.getElementById(chartId + 'SymbolGroup' + series.index))) {
	                        this.checkSelectionElements(document.getElementById(chartId + 'SymbolGroup' + series.index), this.generateStyle(series), visibility);
	                    }
	                }
	            }
	        };
	        Selection.prototype.checkSelectionElements = function (element, className, visibility) {
	            var children = (this.isSeriesMode ? [element] : element.childNodes);
	            var elementClassName;
	            var parentClassName;
	            for (var i = 0; i < children.length; i++) {
	                elementClassName = children[i].getAttribute('class') || '';
	                parentClassName = children[i].parentNode.getAttribute('class') || '';
	                if (elementClassName.indexOf(className) === -1 &&
	                    parentClassName.indexOf(className) === -1 && visibility) {
	                    this.addSvgClass(children[i], this.unselected);
	                }
	                else {
	                    this.removeSvgClass(children[i], this.unselected);
	                }
	            }
	        };
	        Selection.prototype.applyStyles = function (elements) {
	            for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
	                var element = elements_1[_i];
	                if (element) {
	                    this.removeSvgClass(element.parentNode, this.unselected);
	                    this.removeSvgClass(element, this.unselected);
	                    this.addSvgClass(element, this.getSelectionClass(element.id));
	                }
	            }
	        };
	        Selection.prototype.getSelectionClass = function (id) {
	            return this.generateStyle(this.control.series[this.indexFinder(id).series]);
	        };
	        Selection.prototype.removeStyles = function (elements) {
	            for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {
	                var element = elements_2[_i];
	                if (element) {
	                    this.removeSvgClass(element, this.getSelectionClass(element.id));
	                }
	            }
	        };
	        Selection.prototype.addOrRemoveIndex = function (indexes, index, add) {
	            for (var i = 0; i < indexes.length; i++) {
	                if (this.toEquals(indexes[i], index, this.isSeriesMode)) {
	                    indexes.splice(i, 1);
	                    i--;
	                }
	            }
	            if (add) {
	                indexes.push(index);
	            }
	        };
	        Selection.prototype.toEquals = function (first, second, checkSeriesOnly) {
	            return ((first.series === second.series || (this.control.selectionMode === 'Cluster' && !checkSeriesOnly))
	                && (checkSeriesOnly || (first.point === second.point)));
	        };
	        Selection.prototype.redrawSelection = function (chart, oldMode) {
	            this.isSeriesMode = oldMode === 'Series';
	            var selectedDataIndexes = ej2_base_2.extend([], this.selectedDataIndexes, null, true);
	            this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);
	            this.blurEffect(chart.element.id, chart.visibleSeries);
	            this.selectDataIndex(chart, selectedDataIndexes);
	        };
	        Selection.prototype.legendSelection = function (chart, series) {
	            var seriesStyle = this.generateStyle(chart.visibleSeries[series]);
	            var selectedElements = document.getElementsByClassName(seriesStyle);
	            this.isSeriesMode = chart.selectionMode === 'Series';
	            var isBlurEffectNeeded = true;
	            if (selectedElements.length > 0) {
	                var elements = [];
	                for (var i = 0; i < selectedElements.length; i++) {
	                    elements.push(selectedElements[i]);
	                }
	                this.removeStyles(elements);
	                this.isSeriesMode = true;
	                this.addOrRemoveIndex(this.selectedDataIndexes, new base_1.Index(series, NaN));
	                for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {
	                    var series_1 = _a[_i];
	                    seriesStyle = this.generateStyle(series_1);
	                    if (document.getElementsByClassName(seriesStyle).length > 0) {
	                        for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {
	                            var element = elements_3[_b];
	                            this.checkSelectionElements(element, seriesStyle, true);
	                        }
	                        isBlurEffectNeeded = false;
	                        break;
	                    }
	                }
	                if (isBlurEffectNeeded) {
	                    this.isSeriesMode = chart.selectionMode === 'Series';
	                    this.blurEffect(chart.element.id, chart.visibleSeries);
	                }
	            }
	            else {
	                var seriesElements = this.getSeriesElements(chart.visibleSeries[series]);
	                for (var _c = 0, seriesElements_1 = seriesElements; _c < seriesElements_1.length; _c++) {
	                    var seriesElement = seriesElements_1[_c];
	                    this.checkSelectionElements(seriesElement, seriesStyle, false);
	                }
	                this.isSeriesMode = true;
	                this.selection(chart, new base_1.Index(series, NaN), seriesElements);
	                this.isSeriesMode = chart.selectionMode === 'Series';
	                this.blurEffect(chart.element.id, chart.visibleSeries);
	            }
	        };
	        Selection.prototype.getSeriesElements = function (series) {
	            var seriesElements = [series.seriesElement];
	            if (series.marker.visible && !series.isRectSeries) {
	                seriesElements.push(series.symbolElement);
	            }
	            return seriesElements;
	        };
	        Selection.prototype.indexFinder = function (id) {
	            var ids = ['NaN', 'NaN'];
	            if (id.indexOf('SeriesGroup') > -1) {
	                ids = id.split('SeriesGroup');
	                ids[0] = ids[1];
	            }
	            else if (id.indexOf('SymbolGroup') > -1) {
	                ids = id.split('SymbolGroup');
	                ids[0] = ids[1];
	            }
	            else if (id.indexOf('_Point_') > -1) {
	                ids = id.split('_Series_')[1].split('_Point_');
	            }
	            else if (id.indexOf('_Series_') > -1) {
	                ids[0] = id.split('_Series_')[1];
	            }
	            return new base_1.Index(parseInt(ids[0], 10), parseInt(ids[1], 10));
	        };
	        Selection.prototype.calculateDragSelectedElements = function (chart, dragRect) {
	            this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);
	            var rect = new helper_1.Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);
	            var axisOffset = new helper_1.ChartLocation(chart.chartAxisLayoutPanel.seriesClipRect.x, chart.chartAxisLayoutPanel.seriesClipRect.y);
	            this.removeOffset(rect, axisOffset);
	            var points;
	            var index;
	            var selectedPointValues = [];
	            var selectedSeriesValues = [];
	            this.isSeriesMode = false;
	            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {
	                var series = _a[_i];
	                if (series.visible) {
	                    points = series.points;
	                    selectedPointValues = [];
	                    var xAxisOffset = void 0;
	                    var yAxisOffset = void 0;
	                    if (series.type.indexOf('Bar') !== -1) {
	                        xAxisOffset = series.xAxis.rect.y - axisOffset.y;
	                        yAxisOffset = series.yAxis.rect.x - axisOffset.x;
	                    }
	                    else {
	                        xAxisOffset = series.xAxis.rect.x - axisOffset.x;
	                        yAxisOffset = series.yAxis.rect.y - axisOffset.y;
	                    }
	                    for (var j = 0; j < points.length; j++) {
	                        if (points[j].symbolLocation && helper_1.withInBounds(points[j].symbolLocation.x + xAxisOffset, points[j].symbolLocation.y + yAxisOffset, rect)) {
	                            index = new base_1.Index(series.index, points[j].index);
	                            this.selection(chart, index, this.findElements(chart, series, index));
	                            selectedPointValues.push({ x: points[j].xValue.toString(), y: points[j].yValue });
	                        }
	                    }
	                    selectedSeriesValues.push(selectedPointValues);
	                }
	            }
	            this.blurEffect(chart.element.id, chart.visibleSeries);
	            this.rectPoints = new helper_1.Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);
	            this.createCloseButton((dragRect.x + dragRect.width), dragRect.y);
	            var args = {
	                name: constants_1.dragComplete,
	                selectedDataValues: selectedSeriesValues,
	                cancel: false
	            };
	            chart.trigger(constants_1.dragComplete, args);
	        };
	        Selection.prototype.removeOffset = function (rect, clip) {
	            rect.x -= clip.x;
	            rect.y -= clip.y;
	        };
	        Selection.prototype.drawDraggingRect = function (chart, dragRect) {
	            var cartesianLayout = chart.chartAxisLayoutPanel.seriesClipRect;
	            switch (chart.selectionMode) {
	                case 'DragX':
	                    dragRect.y = cartesianLayout.y;
	                    dragRect.height = cartesianLayout.height;
	                    break;
	                case 'DragY':
	                    dragRect.x = cartesianLayout.x;
	                    dragRect.width = cartesianLayout.width;
	                    break;
	            }
	            if (dragRect.width < 5 || dragRect.height < 5) {
	                return null;
	            }
	            var element = document.getElementById(this.draggedRect);
	            if (this.closeIcon) {
	                helper_1.removeElement(this.closeIconId);
	            }
	            if (element) {
	                this.setAttributes(element, dragRect);
	            }
	            else {
	                var dragGroup = this.renderer.createGroup({ id: this.draggedRectGroup });
	                chart.svgObject.appendChild(dragGroup);
	                element = this.renderer.drawRectangle(new helper_1.RectOption(this.draggedRect, theme_1.Theme.selectionRectFill, { color: theme_1.Theme.selectionRectStroke, width: 1 }, 1, dragRect));
	                element.setAttribute('style', 'cursor:move;');
	                dragGroup.appendChild(element);
	            }
	        };
	        Selection.prototype.createCloseButton = function (x, y) {
	            var closeIcon = this.renderer.createGroup({
	                id: this.closeIconId,
	                style: 'cursor:pointer; visibility: visible;'
	            });
	            closeIcon.appendChild(this.renderer.drawCircle(new helper_1.CircleOption(this.closeIconId + '_circle', '#FFFFFF', { color: theme_1.Theme.selectionRectStroke, width: 1 }, 1, x, y, 10)));
	            var direction = 'M ' + (x - 4) + ' ' + (y - 4) + ' L ' + (x + 4) + ' ' + (y + 4) + ' M ' + (x - 4) + ' ' + (y + 4) +
	                ' L ' + (x + 4) + ' ' + (y - 4);
	            closeIcon.appendChild(this.renderer.drawPath({
	                id: this.closeIconId + '_cross', d: direction, stroke: theme_1.Theme.selectionRectStroke,
	                'stroke-width': 2, fill: theme_1.Theme.selectionRectStroke
	            }));
	            this.closeIcon = closeIcon;
	            document.getElementById(this.draggedRectGroup).appendChild(closeIcon);
	        };
	        Selection.prototype.removeDraggedElements = function (chart, event) {
	            if ((event.target.id.indexOf(this.closeIconId) > -1) && (event.type.indexOf('move') === -1)) {
	                this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);
	                this.blurEffect(chart.element.id, chart.visibleSeries);
	                ej2_base_1.remove(document.getElementById(this.draggedRectGroup));
	                this.changeCursorStyle(false, chart.svgObject, 'auto');
	                this.rectPoints = null;
	            }
	        };
	        Selection.prototype.resizingSelectionRect = function (chart, location, tapped) {
	            var rect = new helper_1.Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);
	            var resize = this.findResizeMode(chart.svgObject, rect, location);
	            if (this.resizing) {
	                rect = helper_1.getDraggedRectLocation(rect.x, rect.y, (rect.x + rect.width), (rect.y + rect.height), chart.chartAxisLayoutPanel.seriesClipRect);
	                this.drawDraggingRect(chart, rect);
	                this.dragRect = rect;
	            }
	            if (tapped) {
	                this.resizing = resize;
	            }
	        };
	        Selection.prototype.findResizeMode = function (chartSvgObject, rect, location) {
	            var cursorStyle = 'se-resize';
	            var resize = false;
	            if (!this.resizing) {
	                var resizeEdges = [new helper_1.Rect(rect.x, (rect.y - 10), rect.width - 5, 20),
	                    new helper_1.Rect((rect.x - 10), rect.y, 20, rect.height),
	                    new helper_1.Rect(rect.x, (rect.y + rect.height - 10), rect.width - 10, 20),
	                    new helper_1.Rect((rect.x + rect.width - 10), rect.y + 5, 20, rect.height - 15),
	                    new helper_1.Rect((rect.x + rect.width - 10), (rect.y + rect.height - 10), 20, 20)];
	                for (var i = 0; i < resizeEdges.length; i++) {
	                    if (helper_1.withInBounds(location.x, location.y, resizeEdges[i])) {
	                        cursorStyle = (i === 4) ? cursorStyle : (i % 2 === 0) ? 'ns-resize' : 'ew-resize';
	                        resize = true;
	                        this.resizeMode = i;
	                        break;
	                    }
	                }
	            }
	            else {
	                var x = rect.x;
	                var y = rect.y;
	                var width = (location.x - x);
	                var height = (location.y - y);
	                switch (this.resizeMode) {
	                    case 0:
	                        height = Math.abs((rect.height + rect.y) - location.y);
	                        rect.y = Math.min((rect.height + rect.y), location.y);
	                        rect.height = height;
	                        break;
	                    case 1:
	                        width = Math.abs((rect.width + rect.x) - location.x);
	                        rect.x = Math.min((rect.width + rect.x), location.x);
	                        rect.width = width;
	                        break;
	                    case 2:
	                        rect.height = Math.abs(height);
	                        rect.y = Math.min(location.y, y);
	                        break;
	                    case 3:
	                        rect.width = Math.abs(width);
	                        rect.x = Math.min(location.x, x);
	                        break;
	                    case 4:
	                        rect.width = Math.abs(width);
	                        rect.height = Math.abs(height);
	                        rect.x = Math.min(location.x, x);
	                        rect.y = Math.min(location.y, y);
	                        break;
	                }
	            }
	            this.changeCursorStyle(resize, document.getElementById(this.draggedRect), cursorStyle);
	            this.changeCursorStyle(resize, chartSvgObject, cursorStyle);
	            return resize;
	        };
	        Selection.prototype.changeCursorStyle = function (isResize, rectelement, cursorStyle) {
	            cursorStyle = isResize ? cursorStyle : (this.control.svgObject === rectelement) ? 'auto' : 'move';
	            rectelement.setAttribute('style', 'cursor:' + cursorStyle + ';');
	        };
	        Selection.prototype.removeSelectedElements = function (chart, index, seriesCollection) {
	            index.splice(0, index.length);
	            var seriesElements;
	            for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {
	                var series = seriesCollection_1[_i];
	                seriesElements = this.getSeriesElements(series);
	                this.removeStyles(seriesElements);
	                for (var _a = 0, seriesElements_2 = seriesElements; _a < seriesElements_2.length; _a++) {
	                    var seriesElement = seriesElements_2[_a];
	                    this.removeStyles(this.getChildren(seriesElement));
	                }
	            }
	        };
	        Selection.prototype.setAttributes = function (ele, object) {
	            var keys = Object.keys(object);
	            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
	                var key = keys_1[_i];
	                ele.setAttribute(key, object[key]);
	            }
	        };
	        Selection.prototype.draggedRectMoved = function (chart, grabbedPoint, doDrawing) {
	            var rect = new helper_1.Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);
	            rect.x -= (grabbedPoint.x - chart.mouseX);
	            rect.y -= (grabbedPoint.y - chart.mouseY);
	            rect = helper_1.getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.height + rect.y, chart.chartAxisLayoutPanel.seriesClipRect);
	            if (doDrawing) {
	                this.drawDraggingRect(chart, rect);
	            }
	            else {
	                this.calculateDragSelectedElements(chart, rect);
	            }
	        };
	        Selection.prototype.completeSelection = function (chart, e) {
	            if ((this.dragging || this.resizing) && this.dragRect.width > 5 && this.dragRect.height > 5) {
	                this.calculateDragSelectedElements(chart, this.dragRect);
	            }
	            else if (this.rectGrabbing && this.rectPoints.width && this.rectPoints.height) {
	                this.draggedRectMoved(chart, this.dragRect);
	            }
	            this.dragging = false;
	            this.rectGrabbing = false;
	            this.resizing = false;
	            this.removeDraggedElements(chart, e);
	        };
	        Selection.prototype.getDragRect = function (chart, seriesClipRect) {
	            return helper_1.getDraggedRectLocation(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY, seriesClipRect);
	        };
	        Selection.prototype.dragStart = function (chart, seriesClipRect, mouseDownX, mouseDownY, event) {
	            this.dragging = (chart.selectionMode.indexOf('Drag') > -1) && (chart.isDoubleTap || !chart.isTouch);
	            if (this.dragging) {
	                this.dragRect = new helper_1.Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);
	                if (chart.mouseDownX < seriesClipRect.x || chart.mouseDownX > (seriesClipRect.x + seriesClipRect.width) ||
	                    chart.mouseDownY < seriesClipRect.y || chart.mouseDownY > (seriesClipRect.y + seriesClipRect.height)) {
	                    this.dragging = false;
	                }
	            }
	            if (this.rectPoints) {
	                this.dragRect = new helper_1.Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);
	                this.resizingSelectionRect(chart, new helper_1.ChartLocation(mouseDownX, mouseDownY), true);
	                this.rectGrabbing = helper_1.withInBounds(mouseDownX, mouseDownY, this.rectPoints);
	            }
	        };
	        Selection.prototype.mouseMove = function (chart, event) {
	            var insideMoving = helper_1.withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect);
	            if (insideMoving) {
	                if (this.rectGrabbing && !this.resizing) {
	                    this.draggedRectMoved(chart, this.dragRect, true);
	                }
	                else if (this.dragging && !this.resizing) {
	                    this.dragRect = this.getDragRect(chart, chart.chartAxisLayoutPanel.seriesClipRect);
	                    this.drawDraggingRect(chart, this.dragRect);
	                }
	                if (this.rectPoints) {
	                    this.resizingSelectionRect(chart, new helper_1.ChartLocation(chart.mouseX, chart.mouseY));
	                }
	            }
	            else {
	                this.completeSelection(chart, event);
	            }
	        };
	        Selection.prototype.getModuleName = function () {
	            return 'Selection';
	        };
	        Selection.prototype.destroy = function (chart) {
	        };
	        return Selection;
	    }(selection_1.BaseSelection));
	    exports.Selection = Selection;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var BaseSelection = (function () {
	        function BaseSelection(control) {
	            this.control = control;
	        }
	        BaseSelection.prototype.seriesStyles = function () {
	            var seriesclass;
	            var style = document.getElementById(this.styleId);
	            if (ej2_base_1.isNullOrUndefined(style)) {
	                style = document.createElement('style');
	                style.setAttribute('id', this.styleId);
	                for (var _i = 0, _a = this.control.visibleSeries; _i < _a.length; _i++) {
	                    var series = _a[_i];
	                    seriesclass = series.selectionStyle || this.styleId + '_series_' + series.index;
	                    style.innerHTML += series.selectionStyle ? '' : '.' + seriesclass + ' { } ';
	                }
	                style.innerHTML += '.' + this.unselected + ' { opacity:' + (0.3) + ';} ';
	                document.body.appendChild(style);
	            }
	        };
	        BaseSelection.prototype.concatIndexes = function (userIndexes, localIndexes) {
	            return userIndexes.concat(localIndexes);
	        };
	        BaseSelection.prototype.checkVisibility = function (selectedIndexes) {
	            var visible = false;
	            var uniqueSeries = [];
	            for (var _i = 0, selectedIndexes_1 = selectedIndexes; _i < selectedIndexes_1.length; _i++) {
	                var index = selectedIndexes_1[_i];
	                if (uniqueSeries.indexOf(index.series) === -1) {
	                    uniqueSeries.push(index.series);
	                }
	            }
	            for (var _a = 0, uniqueSeries_1 = uniqueSeries; _a < uniqueSeries_1.length; _a++) {
	                var index = uniqueSeries_1[_a];
	                if (this.control.series[index].visible) {
	                    visible = true;
	                    break;
	                }
	            }
	            return visible;
	        };
	        BaseSelection.prototype.addSvgClass = function (element, className) {
	            var elementClassName = element.getAttribute('class') || '';
	            elementClassName += ((elementClassName !== '') ? ' ' : '');
	            if (elementClassName.indexOf(className) === -1) {
	                element.setAttribute('class', elementClassName + className);
	            }
	        };
	        BaseSelection.prototype.removeSvgClass = function (element, className) {
	            var elementClassName = element.getAttribute('class') || '';
	            if (elementClassName.indexOf(className) > -1) {
	                element.setAttribute('class', elementClassName.replace(className, ''));
	            }
	        };
	        BaseSelection.prototype.getChildren = function (parent) {
	            var children = [];
	            for (var i = 0; i < parent.childNodes.length; i++) {
	                if (parent.childNodes[i].tagName !== 'defs') {
	                    children.push(parent.childNodes[i]);
	                }
	            }
	            return children;
	        };
	        return BaseSelection;
	    }());
	    exports.BaseSelection = BaseSelection;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(3), __webpack_require__(12), __webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, helper_2, constants_1, helper_3, ej2_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var DataLabel = (function () {
	        function DataLabel(chart) {
	            this.chart = chart;
	        }
	        DataLabel.prototype.initPrivateVariables = function (series, marker) {
	            this.markerHeight = ((series.type === 'Scatter' || marker.visible) && !series.isRectSeries) ? (marker.height / 2) : 0;
	            this.commonId = this.chart.element.id + '_Series_' + series.index + '_Point_';
	        };
	        DataLabel.prototype.render = function (series, chart, dataLabel) {
	            var _this = this;
	            this.initPrivateVariables(series, series.marker);
	            var rect;
	            var rgbValue;
	            var contrast;
	            var argsData;
	            var border;
	            var textSize;
	            this.yAxisInversed = series.yAxis.isInversed;
	            var element = ej2_base_1.createElement('div', {
	                id: chart.element.id + '_Series_' + series.index + '_DataLabelCollections'
	            });
	            series.points.map(function (point, index) {
	                _this.margin = dataLabel.margin;
	                var labelText = [];
	                var labelLength;
	                border = { width: dataLabel.border.width, color: dataLabel.border.color };
	                if (point.symbolLocation) {
	                    labelText = helper_2.getLabelText(point, series, chart);
	                    labelLength = labelText.length;
	                    for (var i = 0; i < labelLength; i++) {
	                        argsData = {
	                            cancel: false, name: constants_1.textRender, series: series,
	                            point: point, text: labelText[i], border: border,
	                            color: dataLabel.fill, template: dataLabel.template
	                        };
	                        chart.trigger(constants_1.textRender, argsData);
	                        if (!argsData.cancel) {
	                            _this.fontBackground = argsData.color;
	                            _this.isDataLabelShape(argsData);
	                            _this.markerHeight = series.type === 'Bubble' ? (point.region.height / 2) : _this.markerHeight;
	                            if (argsData.template !== null) {
	                                _this.createDataLabelTemplate(element, series, dataLabel, point, argsData, i);
	                            }
	                            else {
	                                textSize = helper_2.measureText(argsData.text, dataLabel.font);
	                                rect = _this.calculateTextPosition(point, series, textSize, dataLabel, i);
	                                if (!helper_1.isCollide(rect, chart.dataLabelCollections)) {
	                                    chart.dataLabelCollections.push(rect);
	                                    if (_this.isShape) {
	                                        series.shapeElement.appendChild(chart.renderer.drawRectangle(new helper_1.RectOption(_this.commonId + index + '_TextShape_' + i, argsData.color, argsData.border, dataLabel.opacity, rect, dataLabel.rx, dataLabel.ry)));
	                                    }
	                                    rgbValue = helper_2.convertHexToColor(helper_2.colorNameToHex(_this.fontBackground));
	                                    contrast = Math.round((rgbValue.r * 299 + rgbValue.g * 587 + rgbValue.b * 114) / 1000);
	                                    helper_2.textElement(new helper_1.TextOption(_this.commonId + index + '_Text_' + i, rect.x + _this.margin.left + textSize.width / 2, rect.y + _this.margin.top + textSize.height * 3 / 4, 'middle', argsData.text, 'rotate(0,' + (rect.x) + ',' + (rect.y) + ')', 'auto'), dataLabel.font, dataLabel.font.color || (contrast >= 128 ? 'black' : 'white'), series.textElement);
	                                }
	                            }
	                        }
	                    }
	                }
	            });
	            if (element.childElementCount) {
	                helper_3.getElement(chart.element.id + '_Secondary_Element').appendChild(element);
	            }
	        };
	        DataLabel.prototype.createDataLabelTemplate = function (parentElement, series, dataLabel, point, data, labelIndex) {
	            this.margin = { left: 0, right: 0, bottom: 0, top: 0 };
	            var childElement = helper_3.createTemplate(ej2_base_1.createElement('div', {
	                id: this.chart.element.id + '_Series_' + series.index + '_DataLabel_'
	                    + point.index + (labelIndex ? ('_' + labelIndex) : ''),
	                styles: 'position: absolute;background-color:' + data.color + ';' +
	                    helper_3.getFontStyle(dataLabel.font) + ';border:' + data.border.width + 'px solid ' + data.border.color + ';'
	            }), point.index, data.template, this.chart, point, series);
	            var elementRect = helper_3.measureElementRect(childElement);
	            var rect = this.calculateTextPosition(point, series, { width: elementRect.width, height: elementRect.height }, dataLabel, labelIndex);
	            childElement.style.left = (series.clipRect.x + rect.x) + 'px';
	            childElement.style.top = (series.clipRect.y + rect.y) + 'px';
	            var rgbValue = helper_2.convertHexToColor(helper_2.colorNameToHex(this.fontBackground));
	            childElement.style.color = dataLabel.font.color ||
	                ((Math.round((rgbValue.r * 299 + rgbValue.g * 587 + rgbValue.b * 114) / 1000)) >= 128 ? 'black' : 'white');
	            if (childElement.childElementCount && !helper_1.isCollide(rect, this.chart.dataLabelCollections)
	                && (point.yValue === undefined || helper_3.withIn(point.yValue, series.yAxis.visibleRange))
	                && helper_3.withIn(point.xValue, series.xAxis.visibleRange)) {
	                this.chart.dataLabelCollections.push(rect);
	                parentElement.appendChild(childElement);
	                if (series.animation.enable && this.chart.animateSeries) {
	                    this.doDataLabelAnimation(series, childElement);
	                }
	            }
	        };
	        DataLabel.prototype.calculateTextPosition = function (point, series, textSize, dataLabel, labelIndex) {
	            var location = new helper_1.ChartLocation(point.symbolLocation.x, point.symbolLocation.y);
	            var padding = 5;
	            var clipRect = series.clipRect;
	            var rect;
	            if (!this.chart.requireInvertedAxis) {
	                this.locationX = location.x;
	                var alignmentValue = textSize.height + (this.borderWidth * 2) + this.markerHeight +
	                    this.margin.bottom + this.margin.top + padding;
	                location.y = dataLabel.position === 'Auto' ? location.y :
	                    this.calculateAlignment(alignmentValue, location.y, dataLabel.alignment, series.isRectSeries ? point.yValue < 0 : false);
	                location.y = !series.isRectSeries ? this.calculatePathPosition(location.y, dataLabel.position, series, point, textSize) :
	                    this.calculateRectPosition(location.y, point.region, point.yValue < 0 !== series.yAxis.isInversed, dataLabel.position, series, textSize, labelIndex);
	            }
	            else {
	                this.locationY = location.y;
	                var alignmentValue = textSize.width + this.borderWidth + this.margin.left + this.margin.right - padding;
	                location.x = dataLabel.position === 'Auto' ? location.x :
	                    this.calculateAlignment(alignmentValue, location.x, dataLabel.alignment, point.yValue < 0);
	                location.x = this.calculateRectPosition(location.x, point.region, point.yValue < 0 !== series.yAxis.isInversed, dataLabel.position, series, textSize, labelIndex);
	            }
	            rect = helper_2.calculateRect(location, textSize, this.margin);
	            if (!((rect.y > clipRect.height) || (rect.x > clipRect.width) ||
	                (rect.x + rect.width < 0) || (rect.y + rect.height < 0))) {
	                rect.x = rect.x < 0 ? padding : rect.x;
	                rect.y = rect.y < 0 ? padding : rect.y;
	                rect.x -= (rect.x + rect.width) > clipRect.width ? (rect.x + rect.width) - clipRect.width + padding : 0;
	                rect.y -= (rect.y + rect.height) > clipRect.height ? (rect.y + rect.height) - clipRect.height + padding : 0;
	                this.fontBackground = this.fontBackground === 'transparent' ? this.chart.chartArea.background : this.fontBackground;
	            }
	            return rect;
	        };
	        DataLabel.prototype.calculateRectPosition = function (y, rect, isMinus, position, series, textSize, labelIndex) {
	            var padding = 5;
	            var margin = this.margin;
	            var textLength = !this.chart.requireInvertedAxis ? textSize.height : textSize.width;
	            var extraSpace = this.borderWidth + textLength / 2 + padding;
	            if (series.type.indexOf('Stacking') > -1) {
	                position = position === 'Outer' ? 'Top' : position;
	            }
	            else if (series.type.indexOf('Range') > -1) {
	                position = (position === 'Outer' || position === 'Top') ? position : 'Auto';
	            }
	            switch (position) {
	                case 'Bottom':
	                    y = !this.chart.requireInvertedAxis ?
	                        isMinus ? (y - rect.height + extraSpace + margin.top) : (y + rect.height - extraSpace - margin.bottom) :
	                        isMinus ? (y + rect.width - extraSpace - margin.left) : (y - rect.width + extraSpace + margin.right);
	                    break;
	                case 'Middle':
	                    y = !this.chart.requireInvertedAxis ? (isMinus ? y - (rect.height / 2) : y + (rect.height / 2)) :
	                        (isMinus ? y + (rect.width / 2) : y - (rect.width / 2));
	                    break;
	                case 'Auto':
	                    y = this.calculateRectActualPosition(y, rect, isMinus, series, textSize, labelIndex);
	                    break;
	                default:
	                    if (series.type === 'RangeColumn') {
	                        if (labelIndex === 0) {
	                            y = position !== 'Outer' !== this.yAxisInversed ? y + extraSpace + margin.bottom :
	                                y - extraSpace - margin.top;
	                        }
	                        else {
	                            var height = this.yAxisInversed ? -rect.height : rect.height;
	                            y = position !== 'Outer' !== this.yAxisInversed ? y + height - extraSpace - margin.bottom :
	                                y + height + extraSpace + margin.top;
	                        }
	                    }
	                    else {
	                        if ((isMinus && position === 'Top') || (!isMinus && position === 'Outer')) {
	                            y = !this.chart.requireInvertedAxis ? y - extraSpace - margin.bottom : y + extraSpace + margin.right;
	                        }
	                        else {
	                            y = !this.chart.requireInvertedAxis ? y + extraSpace + margin.top : y - extraSpace - margin.left;
	                        }
	                    }
	                    break;
	            }
	            var check = !this.chart.requireInvertedAxis ? (y < rect.y || y > rect.y + rect.height) :
	                (y < rect.x || y > rect.x + rect.width);
	            this.fontBackground = check ?
	                (this.fontBackground === 'transparent' ? this.chart.chartArea.background : this.fontBackground)
	                : this.fontBackground === 'transparent' ? series.fill : this.fontBackground;
	            return y;
	        };
	        DataLabel.prototype.calculatePathPosition = function (y, position, series, point, size) {
	            var padding = 5;
	            if ((series.type.indexOf('Area') > -1) && this.yAxisInversed && series.marker.dataLabel.position !== 'Auto') {
	                position = position === 'Top' ? 'Bottom' : position === 'Bottom' ? 'Top' : position;
	            }
	            this.fontBackground = this.fontBackground === 'transparent' ? this.chart.chartArea.background : this.fontBackground;
	            switch (position) {
	                case 'Top':
	                case 'Outer':
	                    y = y - this.markerHeight - this.borderWidth - size.height / 2 - this.margin.bottom - padding;
	                    break;
	                case 'Bottom':
	                    y = y + this.markerHeight + this.borderWidth + size.height / 2 + this.margin.top + padding;
	                    break;
	                case 'Auto':
	                    y = this.calculatePathActualPosition(y, this.markerHeight, series, point, size);
	                    break;
	            }
	            return y;
	        };
	        DataLabel.prototype.isDataLabelShape = function (style) {
	            this.isShape = (style.color !== 'transparent' || style.border.width > 0);
	            this.borderWidth = style.border.width;
	            if (!this.isShape) {
	                this.margin = { left: 0, right: 0, bottom: 0, top: 0 };
	            }
	        };
	        DataLabel.prototype.calculateRectActualPosition = function (y, rect, isMinus, series, size, labelIndex) {
	            var location;
	            var labelRect;
	            var isOverLap = true;
	            var position = 0;
	            var collection = this.chart.dataLabelCollections;
	            var finalPosition = series.type === 'RangeColumn' ? 2 : 4;
	            while (isOverLap && position < finalPosition) {
	                location = this.calculateRectPosition(y, rect, isMinus, this.getPosition(position), series, size, labelIndex);
	                if (!this.chart.requireInvertedAxis) {
	                    labelRect = helper_2.calculateRect(new helper_1.ChartLocation(this.locationX, location), size, this.margin);
	                    isOverLap = labelRect.y < 0 || helper_1.isCollide(labelRect, collection) || labelRect.y > series.clipRect.height;
	                }
	                else {
	                    labelRect = helper_2.calculateRect(new helper_1.ChartLocation(location, this.locationY), size, this.margin);
	                    isOverLap = labelRect.x < 0 || helper_1.isCollide(labelRect, collection) || labelRect.x > series.clipRect.width;
	                }
	                position++;
	            }
	            return location;
	        };
	        DataLabel.prototype.calculatePathActualPosition = function (y, markerSize, series, point, size) {
	            var points = series.points;
	            var index = point.index;
	            var yValue = points[index].yValue;
	            var position;
	            var nextPoint = points.length - 1 > index ? points[index + 1] : null;
	            var previousPoint = index > 0 ? points[index - 1] : null;
	            var yLocation;
	            var isOverLap = true;
	            var labelRect;
	            var isBottom;
	            var positionIndex;
	            var collection = this.chart.dataLabelCollections;
	            if (series.type === 'Bubble') {
	                position = 'Top';
	            }
	            else if (series.type.indexOf('Step') > -1) {
	                position = 'Top';
	                if (index) {
	                    position = (!previousPoint || !previousPoint.visible || (yValue > previousPoint.yValue !== this.yAxisInversed)
	                        || yValue === previousPoint.yValue) ? 'Top' : 'Bottom';
	                }
	            }
	            else {
	                if (index === 0) {
	                    position = (!nextPoint || !nextPoint.visible || yValue > nextPoint.yValue ||
	                        (yValue < nextPoint.yValue && this.yAxisInversed)) ? 'Top' : 'Bottom';
	                }
	                else if (index === points.length - 1) {
	                    position = (!previousPoint || !previousPoint.visible || yValue > previousPoint.yValue ||
	                        (yValue < previousPoint.yValue && this.yAxisInversed)) ? 'Top' : 'Bottom';
	                }
	                else {
	                    if (!nextPoint.visible && !(previousPoint && previousPoint.visible)) {
	                        position = 'Top';
	                    }
	                    else if (!nextPoint.visible || !previousPoint) {
	                        position = (nextPoint.yValue > yValue || (previousPoint && previousPoint.yValue > yValue)) ?
	                            'Bottom' : 'Top';
	                    }
	                    else {
	                        var slope = (nextPoint.yValue - previousPoint.yValue) / 2;
	                        var intersectY = (slope * index) + (nextPoint.yValue - (slope * (index + 1)));
	                        position = !this.yAxisInversed ? intersectY < yValue ? 'Top' : 'Bottom' :
	                            intersectY < yValue ? 'Bottom' : 'Top';
	                    }
	                }
	            }
	            isBottom = position === 'Bottom';
	            positionIndex = ['Outer', 'Top', 'Bottom', 'Middle', 'Auto'].indexOf(position);
	            while (isOverLap && positionIndex < 4) {
	                yLocation = this.calculatePathPosition(y, this.getPosition(positionIndex), series, point, size);
	                labelRect = helper_2.calculateRect(new helper_1.ChartLocation(this.locationX, yLocation), size, this.margin);
	                isOverLap = labelRect.y < 0 || helper_1.isCollide(labelRect, collection)
	                    || (labelRect.y + labelRect.height) > series.clipRect.height;
	                positionIndex = isBottom ? positionIndex - 1 : positionIndex + 1;
	                isBottom = false;
	            }
	            return yLocation;
	        };
	        DataLabel.prototype.calculateAlignment = function (value, y, alignment, isMinus) {
	            switch (alignment) {
	                case 'Far':
	                    y = !this.chart.requireInvertedAxis ? (isMinus ? y + value : y - value) :
	                        (isMinus ? y - value : y + value);
	                    break;
	                case 'Near':
	                    y = !this.chart.requireInvertedAxis ? (isMinus ? y - value : y + value) :
	                        (isMinus ? y + value : y - value);
	                    break;
	                case 'Center':
	                    y = y;
	                    break;
	            }
	            return y;
	        };
	        DataLabel.prototype.doDataLabelAnimation = function (series, element) {
	            var shapeElements = series.shapeElement.childNodes;
	            var textNode = series.textElement.childNodes;
	            var delay = series.animation.delay + series.animation.duration;
	            var location;
	            var length = element ? 1 : textNode.length;
	            for (var i = 0; i < length; i++) {
	                if (element) {
	                    helper_3.templateAnimate(element, delay, 200);
	                }
	                else {
	                    location = new helper_1.ChartLocation((+textNode[i].getAttribute('x')) + ((+textNode[i].getAttribute('width')) / 2), (+textNode[i].getAttribute('y')) + ((+textNode[i].getAttribute('height')) / 2));
	                    helper_1.markerAnimate(textNode[i], delay, 200, series, null, location, true);
	                    if (shapeElements[i]) {
	                        location = new helper_1.ChartLocation((+shapeElements[i].getAttribute('x')) + ((+shapeElements[i].getAttribute('width')) / 2), (+shapeElements[i].getAttribute('y')) + ((+shapeElements[i].getAttribute('height')) / 2));
	                        helper_1.markerAnimate(shapeElements[i], delay, 200, series, null, location, true);
	                    }
	                }
	            }
	        };
	        DataLabel.prototype.getPosition = function (index) {
	            return (['Outer', 'Top', 'Bottom', 'Middle', 'Auto'][index]);
	        };
	        DataLabel.prototype.getModuleName = function () {
	            return 'DataLabel';
	        };
	        DataLabel.prototype.destroy = function (chart) {
	        };
	        return DataLabel;
	    }());
	    exports.DataLabel = DataLabel;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(4), __webpack_require__(17), __webpack_require__(3), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, ej2_base_2, legend_1, helper_1, constants_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var Legend = (function (_super) {
	        __extends(Legend, _super);
	        function Legend(chart) {
	            var _this = _super.call(this, chart) || this;
	            _this.library = _this;
	            return _this;
	        }
	        Legend.prototype.getLegendOptions = function (visibleSeriesCollection) {
	            this.legendCollections = [];
	            for (var _i = 0, visibleSeriesCollection_1 = visibleSeriesCollection; _i < visibleSeriesCollection_1.length; _i++) {
	                var series = visibleSeriesCollection_1[_i];
	                this.legendCollections.push(new legend_1.LegendOptions(series.name, series.interior, series.legendShape, series.visible, series.type, series.marker.shape, series.marker.visible));
	            }
	        };
	        Legend.prototype.getLegendBounds = function (availableSize, legendBounds, legend) {
	            var padding = legend.padding;
	            var extraHeight = 0;
	            var extraWidth = 0;
	            if (!this.isVertical) {
	                extraHeight = !legend.height ? ((availableSize.height / 100) * 5) : 0;
	            }
	            else {
	                extraWidth = !legend.width ? ((availableSize.width / 100) * 5) : 0;
	            }
	            legendBounds.height += extraHeight;
	            legendBounds.width += extraWidth;
	            var shapeHeight = legend.shapeHeight;
	            var shapeWidth = legend.shapeWidth;
	            var shapePadding = legend.shapePadding;
	            var maximumWidth = 0;
	            var rowWidth = 0;
	            var legendWidth = 0;
	            var columnHeight = 0;
	            var rowCount = 0;
	            var legendEventArgs;
	            this.maxItemHeight = Math.max(helper_1.measureText('MeasureText', legend.textStyle).height, legend.shapeHeight);
	            var render = false;
	            for (var _i = 0, _a = this.legendCollections; _i < _a.length; _i++) {
	                var legendOption = _a[_i];
	                legendEventArgs = { fill: legendOption.fill, text: legendOption.text, shape: legendOption.shape,
	                    markerShape: legendOption.markerShape, name: constants_1.legendRender, cancel: false };
	                this.chart.trigger(constants_1.legendRender, legendEventArgs);
	                legendOption.render = !legendEventArgs.cancel;
	                legendOption.text = legendEventArgs.text;
	                legendOption.fill = legendEventArgs.fill;
	                legendOption.shape = legendEventArgs.shape;
	                legendOption.markerShape = legendEventArgs.markerShape;
	                legendOption.textSize = helper_1.measureText(legendOption.text, legend.textStyle);
	                if (legendOption.render && legendOption.text !== '') {
	                    render = true;
	                    legendWidth = shapeWidth + shapePadding + legendOption.textSize.width + padding;
	                    rowWidth = rowWidth + legendWidth;
	                    if (legendBounds.width < (padding + rowWidth) || this.isVertical) {
	                        maximumWidth = Math.max(maximumWidth, (rowWidth + padding - (this.isVertical ? 0 : legendWidth)));
	                        if (rowCount === 0 && (legendWidth !== rowWidth)) {
	                            rowCount = 1;
	                        }
	                        rowWidth = this.isVertical ? 0 : legendWidth;
	                        rowCount++;
	                        columnHeight = (rowCount * (this.maxItemHeight + padding)) + padding;
	                    }
	                }
	            }
	            columnHeight = Math.max(columnHeight, (this.maxItemHeight + padding) + padding);
	            this.isPaging = legendBounds.height < columnHeight;
	            this.totalPages = rowCount;
	            if (render) {
	                this.setBounds(Math.max((rowWidth + padding), maximumWidth), columnHeight, legend, legendBounds);
	            }
	            else {
	                this.setBounds(0, 0, legend, legendBounds);
	            }
	        };
	        Legend.prototype.getRenderPoint = function (legendOption, start, textPadding, prevLegend, rect, count, firstLegend) {
	            var padding = this.legend.padding;
	            var previousBound = (prevLegend.location.x + textPadding + prevLegend.textSize.width);
	            if ((previousBound + (legendOption.textSize.width + textPadding)) > (rect.x + rect.width + this.legend.shapeWidth / 2) ||
	                this.isVertical) {
	                legendOption.location.x = start.x;
	                legendOption.location.y = (count === firstLegend) ? prevLegend.location.y :
	                    prevLegend.location.y + this.maxItemHeight + padding;
	            }
	            else {
	                legendOption.location.x = (count === firstLegend) ? prevLegend.location.x : previousBound;
	                legendOption.location.y = prevLegend.location.y;
	            }
	            var availwidth = (this.legendBounds.x + this.legendBounds.width) - (legendOption.location.x +
	                textPadding - this.legend.shapeWidth / 2);
	            legendOption.text = helper_1.textTrim(availwidth, legendOption.text, this.legend.textStyle);
	        };
	        Legend.prototype.LegendClick = function (seriesIndex) {
	            var chart = this.chart;
	            var series = chart.visibleSeries[seriesIndex];
	            var legend = this.legendCollections[seriesIndex];
	            var selectedDataIndexes = [];
	            if (chart.selectionModule) {
	                selectedDataIndexes = ej2_base_2.extend([], chart.selectionModule.selectedDataIndexes, null, true);
	            }
	            if (chart.legendSettings.toggleVisibility) {
	                if (!series.visible) {
	                    series.visible = true;
	                }
	                else {
	                    series.visible = false;
	                }
	                legend.visible = (series.visible);
	                if (chart.svgObject.childNodes.length > 0) {
	                    while (chart.svgObject.lastChild) {
	                        chart.svgObject.removeChild(chart.svgObject.lastChild);
	                    }
	                    ej2_base_1.remove(chart.svgObject);
	                }
	                chart.animateSeries = false;
	                chart.removeSvg();
	                chart.refreshAxis();
	                series.refreshAxisLabel();
	                this.refreshSeries(chart.visibleSeries);
	                chart.refreshBound();
	                if (selectedDataIndexes.length > 0) {
	                    chart.selectionModule.selectedDataIndexes = selectedDataIndexes;
	                    chart.selectionModule.redrawSelection(chart, chart.selectionMode);
	                }
	            }
	            else if (chart.selectionModule) {
	                chart.selectionModule.legendSelection(chart, seriesIndex);
	            }
	        };
	        Legend.prototype.refreshSeries = function (seriesCollection) {
	            for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {
	                var series = seriesCollection_1[_i];
	                series.position = undefined;
	            }
	        };
	        Legend.prototype.click = function (event) {
	            var targetId = event.target.id;
	            var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_marker_',
	                this.legendID + '_shape_'];
	            var seriesIndex;
	            for (var _i = 0, legendItemsId_1 = legendItemsId; _i < legendItemsId_1.length; _i++) {
	                var id = legendItemsId_1[_i];
	                if (targetId.indexOf(id) > -1) {
	                    seriesIndex = parseInt(targetId.split(id)[1], 10);
	                    this.LegendClick(seriesIndex);
	                }
	            }
	            if (targetId.indexOf(this.legendID + '_pageup') > -1) {
	                this.changePage(event, true);
	            }
	            else if (targetId.indexOf(this.legendID + '_pagedown') > -1) {
	                this.changePage(event, false);
	            }
	        };
	        Legend.prototype.getModuleName = function () {
	            return 'Legend';
	        };
	        Legend.prototype.destroy = function (chart) {
	        };
	        return Legend;
	    }(legend_1.BaseLegend));
	    exports.Legend = Legend;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(45), __webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, annotation_1, helper_1, ej2_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var ChartAnnotation = (function (_super) {
	        __extends(ChartAnnotation, _super);
	        function ChartAnnotation(control, annotations) {
	            var _this = _super.call(this, control) || this;
	            _this.chart = control;
	            _this.annotations = annotations;
	            return _this;
	        }
	        ChartAnnotation.prototype.renderAnnotations = function (element) {
	            var _this = this;
	            var annotationElement;
	            var location;
	            this.parentElement = ej2_base_1.createElement('div', {
	                id: this.chart.element.id + '_Annotation_Collections'
	            });
	            this.annotations.map(function (annotation, index) {
	                annotationElement = _this.render(annotation, index);
	                location = new helper_1.ChartLocation(0, 0);
	                if (_this['setAnnotation' + annotation.coordinateUnits + 'Value'](location)) {
	                    _this.setElementStyle(location, annotationElement, _this.parentElement);
	                }
	            });
	            helper_1.appendElement(this.parentElement, element);
	        };
	        ChartAnnotation.prototype.destroy = function (control) {
	        };
	        ChartAnnotation.prototype.getModuleName = function () {
	            return 'Annotation';
	        };
	        return ChartAnnotation;
	    }(annotation_1.AnnotationBase));
	    exports.ChartAnnotation = ChartAnnotation;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(3), __webpack_require__(3), __webpack_require__(4), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, helper_2, helper_3, ej2_base_1, constants_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var AnnotationBase = (function () {
	        function AnnotationBase(control) {
	            this.control = control;
	        }
	        AnnotationBase.prototype.render = function (annotation, index) {
	            this.isChart = this.control.getModuleName() === 'chart';
	            this.annotation = annotation;
	            var childElement = helper_1.createTemplate(ej2_base_1.createElement('div', {
	                id: this.control.element.id + '_Annotation_' + index,
	                styles: 'position: absolute;'
	            }), index, annotation.content, this.control);
	            return childElement;
	        };
	        AnnotationBase.prototype.setAnnotationPixelValue = function (location) {
	            var rect;
	            rect = this.annotation.region === 'Chart' ?
	                new helper_2.Rect(0, 0, this.control.availableSize.width, this.control.availableSize.height) :
	                this.isChart ?
	                    this.control.chartAxisLayoutPanel.seriesClipRect :
	                    this.control.series[0].accumulationBound;
	            location.x = ((typeof this.annotation.x !== 'string') ?
	                ((typeof this.annotation.x === 'number') ? this.annotation.x : 0) :
	                helper_2.stringToNumber(this.annotation.x, rect.width)) + rect.x;
	            location.y = ((typeof this.annotation.y === 'number') ? this.annotation.y :
	                helper_2.stringToNumber(this.annotation.y, rect.height)) + rect.y;
	            return true;
	        };
	        AnnotationBase.prototype.setAnnotationPointValue = function (location) {
	            var symbolLocation = new helper_2.ChartLocation(0, 0);
	            if (this.isChart) {
	                var xAxis = void 0;
	                var yAxis = void 0;
	                var chart = this.control;
	                var annotation = this.annotation;
	                var xValue = void 0;
	                var isLog = false;
	                var xAxisName = annotation.xAxisName;
	                var yAxisName = annotation.yAxisName;
	                var isInverted = chart.requireInvertedAxis;
	                var withinRange = void 0;
	                for (var _i = 0, _a = chart.axisCollections; _i < _a.length; _i++) {
	                    var axis = _a[_i];
	                    if (xAxisName === axis.name || (xAxisName == null && axis.name === 'primaryXAxis')) {
	                        xAxis = axis;
	                        if (xAxis.valueType === 'Category') {
	                            if (xAxis.labels.indexOf(annotation.x) < 0) {
	                                return false;
	                            }
	                            else {
	                                xValue = xAxis.labels.indexOf(annotation.x);
	                            }
	                        }
	                        else if (xAxis.valueType === 'DateTime') {
	                            var option = { skeleton: 'full', type: 'dateTime' };
	                            xValue = (typeof this.annotation.x === 'object') ?
	                                Date.parse(chart.intl.getDateParser(option)(chart.intl.getDateFormat(option)(annotation.x))) : 0;
	                        }
	                        else {
	                            xValue = +annotation.x;
	                        }
	                    }
	                    else if (yAxisName === axis.name || (yAxisName == null && axis.name === 'primaryYAxis')) {
	                        yAxis = axis;
	                        isLog = yAxis.valueType === 'Logarithmic';
	                    }
	                }
	                if (xAxis && yAxis && helper_2.withIn(xAxis.valueType === 'Logarithmic' ? helper_1.logBase(xValue, xAxis.logBase) : xValue, xAxis.visibleRange)) {
	                    withinRange = helper_2.withIn((isLog ? helper_1.logBase(+this.annotation.y, yAxis.logBase) : +this.annotation.y), yAxis.visibleRange);
	                    symbolLocation = isInverted ? helper_3.getPoint(withinRange ? +annotation.y :
	                        isLog ?
	                            Math.pow(yAxis.logBase, yAxis.visibleRange.max) :
	                            +annotation.y > yAxis.visibleRange.max ? yAxis.visibleRange.max : yAxis.visibleRange.min, xValue, yAxis, xAxis) : helper_3.getPoint(xValue, withinRange ? +annotation.y :
	                        isLog ? Math.pow(yAxis.logBase, yAxis.visibleRange.max) :
	                            +annotation.y > yAxis.visibleRange.max ? yAxis.visibleRange.max : yAxis.visibleRange.min, xAxis, yAxis);
	                    location.x = symbolLocation.x + (isInverted ? yAxis.rect.x : xAxis.rect.x);
	                    location.y = symbolLocation.y + (isInverted ? xAxis.rect.y : yAxis.rect.y);
	                }
	                else {
	                    return false;
	                }
	                return true;
	            }
	            else {
	                return this.setAccumulationPointValue(location);
	            }
	        };
	        AnnotationBase.prototype.setAccumulationPointValue = function (location) {
	            var accumulation = this.control;
	            var point;
	            for (var _i = 0, _a = accumulation.visibleSeries[0].points; _i < _a.length; _i++) {
	                var accPoint = _a[_i];
	                if (typeof accPoint.x === 'object') {
	                    if (Date.parse(accPoint.x) === Date.parse(this.annotation.x) &&
	                        accPoint.y === this.annotation.y) {
	                        point = accPoint;
	                        break;
	                    }
	                }
	                else {
	                    if (accPoint.x === this.annotation.x && accPoint.y === this.annotation.y) {
	                        point = accPoint;
	                        break;
	                    }
	                }
	            }
	            if (point && point.visible) {
	                location.x = point.symbolLocation.x;
	                location.y = point.symbolLocation.y;
	                return true;
	            }
	            else {
	                return false;
	            }
	        };
	        AnnotationBase.prototype.setElementStyle = function (location, element, parentElement) {
	            var elementRect = helper_1.measureElementRect(element);
	            var argsData = {
	                cancel: false, name: constants_1.annotationRender, content: element,
	                location: location
	            };
	            this.control.trigger(constants_1.annotationRender, argsData);
	            if (!argsData.cancel) {
	                argsData.content.style.left = this.setAlignmentValue(this.annotation.horizontalAlignment, elementRect.width, argsData.location.x) + 'px';
	                argsData.content.style.top = this.setAlignmentValue(this.annotation.verticalAlignment, elementRect.height, argsData.location.y) + 'px';
	                argsData.content.setAttribute('aria-label', this.annotation.description || 'Annotation');
	                helper_2.appendElement(argsData.content, parentElement);
	            }
	        };
	        AnnotationBase.prototype.setAlignmentValue = function (alignment, size, value) {
	            switch (alignment) {
	                case 'Top':
	                case 'Near':
	                    value -= size;
	                    break;
	                case 'Bottom':
	                case 'Far':
	                    value += 0;
	                    break;
	                case 'Middle':
	                case 'Center':
	                    value -= (size / 2);
	                    break;
	            }
	            return value;
	        };
	        return AnnotationBase;
	    }());
	    exports.AnnotationBase = AnnotationBase;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(49), __webpack_require__(48), __webpack_require__(50), __webpack_require__(47), __webpack_require__(52), __webpack_require__(53), __webpack_require__(55), __webpack_require__(56)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, accumulation_1, acc_base_1, pie_series_1, legend_1, dataLabel_1, tooltip_1, selection_1, annotation_1) {
	    "use strict";
	    function __export(m) {
	        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	    }
	    Object.defineProperty(exports, "__esModule", { value: true });
	    __export(accumulation_1);
	    __export(acc_base_1);
	    __export(pie_series_1);
	    __export(legend_1);
	    __export(dataLabel_1);
	    __export(tooltip_1);
	    __export(selection_1);
	    __export(annotation_1);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(48), __webpack_require__(17), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, acc_base_1, legend_1, helper_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var AccumulationLegend = (function (_super) {
	        __extends(AccumulationLegend, _super);
	        function AccumulationLegend(chart) {
	            var _this = _super.call(this, chart) || this;
	            _this.library = _this;
	            _this.titleRect = new helper_1.Rect(0, chart.margin.top, 0, 0);
	            return _this;
	        }
	        AccumulationLegend.prototype.getLegendOptions = function (chart, series) {
	            this.legendCollections = [];
	            for (var i = 0; i < 1; i++) {
	                var seriesType = (series[i].innerRadius !== '0' && series[i].innerRadius !== '0%') ?
	                    'Doughnut' : 'Pie';
	                for (var _i = 0, _a = series[i].points; _i < _a.length; _i++) {
	                    var point = _a[_i];
	                    if (!ej2_base_1.isNullOrUndefined(point.x) && !ej2_base_1.isNullOrUndefined(point.y)) {
	                        this.legendCollections.push(new legend_1.LegendOptions(point.x.toString(), point.color, series[i].legendShape, point.visible, seriesType, null, null, point.index, series[i].index));
	                    }
	                }
	            }
	        };
	        AccumulationLegend.prototype.getLegendBounds = function (availableSize, legendBounds, legend) {
	            var extraWidth = 0;
	            var extraHeight = 0;
	            var padding = legend.padding;
	            if (!this.isVertical) {
	                extraHeight = !legend.height ? ((availableSize.height / 100) * 5) : 0;
	            }
	            else {
	                extraWidth = !legend.width ? ((availableSize.width / 100) * 5) : 0;
	            }
	            legendBounds.width += extraWidth;
	            legendBounds.height += extraHeight;
	            var shapePadding = legend.shapePadding;
	            var maximumWidth = 0;
	            var shapeWidth = legend.shapeWidth;
	            var rowWidth = 0;
	            var rowCount = 0;
	            var columnWidth = [];
	            var columnHeight = 0;
	            var legendWidth = 0;
	            this.maxItemHeight = Math.max(helper_1.measureText('MeasureText', legend.textStyle).height, legend.shapeHeight);
	            var legendEventArgs;
	            for (var _i = 0, _a = this.legendCollections; _i < _a.length; _i++) {
	                var legendOption = _a[_i];
	                legendEventArgs = { fill: legendOption.fill, text: legendOption.text, shape: legendOption.shape,
	                    name: 'legendRender', cancel: false };
	                this.chart.trigger('legendRender', legendEventArgs);
	                legendOption.render = !legendEventArgs.cancel;
	                legendOption.text = legendEventArgs.text;
	                legendOption.fill = legendEventArgs.fill;
	                legendOption.shape = legendEventArgs.shape;
	                legendOption.textSize = helper_1.measureText(legendOption.text, legend.textStyle);
	                if (legendOption.render && legendOption.text !== '') {
	                    legendWidth = shapeWidth + shapePadding + legendOption.textSize.width + padding;
	                    if (this.isVertical) {
	                        ++rowCount;
	                        columnHeight = (rowCount * (this.maxItemHeight + padding)) + padding;
	                        if ((rowCount * (this.maxItemHeight + padding)) + padding > legendBounds.height) {
	                            columnHeight = Math.max(columnHeight, (rowCount * (this.maxItemHeight + padding)) + padding);
	                            rowWidth = rowWidth + maximumWidth;
	                            columnWidth.push(maximumWidth);
	                            this.totalPages = Math.max(rowCount, this.totalPages || 1);
	                            maximumWidth = 0;
	                            rowCount = 1;
	                        }
	                        maximumWidth = Math.max(legendWidth, maximumWidth);
	                    }
	                    else {
	                        rowWidth = rowWidth + legendWidth;
	                        if (legendBounds.width < (padding + rowWidth)) {
	                            maximumWidth = Math.max(maximumWidth, (rowWidth + padding - legendWidth));
	                            if (rowCount === 0 && (legendWidth !== rowWidth)) {
	                                rowCount = 1;
	                            }
	                            rowWidth = legendWidth;
	                            rowCount++;
	                            columnHeight = (rowCount * (this.maxItemHeight + padding)) + padding;
	                        }
	                    }
	                }
	            }
	            if (this.isVertical) {
	                rowWidth = rowWidth + maximumWidth;
	                this.isPaging = legendBounds.width < (rowWidth + padding);
	                columnHeight = Math.max(columnHeight, ((this.totalPages || 1) * (this.maxItemHeight + padding)) + padding);
	                this.isPaging = this.isPaging && (this.totalPages > 1);
	                if (columnWidth[columnWidth.length - 1] !== maximumWidth) {
	                    columnWidth.push(maximumWidth);
	                }
	            }
	            else {
	                this.isPaging = legendBounds.height < columnHeight;
	                this.totalPages = this.totalRowCount = rowCount;
	                columnHeight = Math.max(columnHeight, (this.maxItemHeight + padding) + padding);
	            }
	            this.maxColumns = 0;
	            var width = this.isVertical ? this.getMaxColumn(columnWidth, legendBounds.width, padding, rowWidth + padding) :
	                Math.max(rowWidth + padding, maximumWidth);
	            if (columnHeight) {
	                this.setBounds(width, columnHeight, legend, legendBounds);
	            }
	            else {
	                this.setBounds(0, 0, legend, legendBounds);
	            }
	        };
	        AccumulationLegend.prototype.getMaxColumn = function (columns, width, padding, rowWidth) {
	            var maxPageColumn = padding;
	            this.maxColumnWidth = Math.max.apply(null, columns);
	            for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
	                var column = columns_1[_i];
	                maxPageColumn += this.maxColumnWidth;
	                this.maxColumns++;
	                if (maxPageColumn + padding > width) {
	                    maxPageColumn -= this.maxColumnWidth;
	                    this.maxColumns--;
	                    break;
	                }
	            }
	            this.isPaging = (maxPageColumn < rowWidth) && (this.totalPages > 1);
	            if (maxPageColumn === padding) {
	                maxPageColumn = width;
	            }
	            this.maxColumns = Math.max(1, this.maxColumns);
	            this.maxWidth = maxPageColumn;
	            return maxPageColumn;
	        };
	        AccumulationLegend.prototype.getAvailWidth = function (tx, width, legendX) {
	            if (this.isVertical) {
	                width = this.maxWidth;
	            }
	            return width - ((this.legend.padding * 2) + this.legend.shapeWidth + this.legend.shapePadding);
	        };
	        AccumulationLegend.prototype.getRenderPoint = function (legendOption, start, textPadding, prevLegend, rect, count, firstLegend) {
	            var padding = this.legend.padding;
	            if (this.isVertical) {
	                if (count === firstLegend || (prevLegend.location.y + (this.maxItemHeight * 1.5) + (padding * 2) > rect.y + rect.height)) {
	                    legendOption.location.x = prevLegend.location.x + ((count === firstLegend) ? 0 : this.maxColumnWidth);
	                    legendOption.location.y = start.y;
	                    this.pageXCollections.push(legendOption.location.x - (this.legend.shapeWidth / 2) - padding);
	                    this.totalPages++;
	                }
	                else {
	                    legendOption.location.x = prevLegend.location.x;
	                    legendOption.location.y = prevLegend.location.y + this.maxItemHeight + padding;
	                }
	            }
	            else {
	                var previousBound = (prevLegend.location.x + textPadding + prevLegend.textSize.width);
	                if ((previousBound + (legendOption.textSize.width + textPadding)) > (rect.x + rect.width + this.legend.shapeWidth / 2)) {
	                    legendOption.location.y = (count === firstLegend) ? prevLegend.location.y :
	                        prevLegend.location.y + this.maxItemHeight + padding;
	                    legendOption.location.x = start.x;
	                }
	                else {
	                    legendOption.location.y = prevLegend.location.y;
	                    legendOption.location.x = (count === firstLegend) ? prevLegend.location.x : previousBound;
	                }
	                this.totalPages = this.totalRowCount;
	            }
	            var availablewidth = this.getAvailWidth(legendOption.location.x, this.legendBounds.width, this.legendBounds.x);
	            legendOption.text = helper_1.textTrim(availablewidth, legendOption.text, this.legend.textStyle);
	        };
	        AccumulationLegend.prototype.getSmartLegendLocation = function (labelBound, legendBound, margin) {
	            var space;
	            switch (this.position) {
	                case 'Left':
	                    space = ((labelBound.x - legendBound.width) - margin.left) / 2;
	                    legendBound.x = (labelBound.x - legendBound.width) < margin.left ? legendBound.x :
	                        (labelBound.x - legendBound.width) - space;
	                    break;
	                case 'Right':
	                    space = ((this.chart.availableSize.width - margin.right) - (labelBound.x + labelBound.width + legendBound.width)) / 2;
	                    legendBound.x = (labelBound.x + labelBound.width + legendBound.width) > (this.chart.availableSize.width - margin.right) ?
	                        legendBound.x : (labelBound.x + labelBound.width + space);
	                    break;
	                case 'Top':
	                    this.getTitleRect(this.chart);
	                    space = ((labelBound.y - legendBound.height) - (this.titleRect.y + this.titleRect.height)) / 2;
	                    legendBound.y = (labelBound.y - legendBound.height) < margin.top ? legendBound.y :
	                        (labelBound.y - legendBound.height) - space;
	                    break;
	                case 'Bottom':
	                    space = ((this.chart.availableSize.height - margin.bottom) - (labelBound.y + labelBound.height + legendBound.height)) / 2;
	                    legendBound.y = labelBound.y + labelBound.height + legendBound.height > (this.chart.availableSize.height - margin.bottom) ?
	                        legendBound.y : (labelBound.y + labelBound.height) + space;
	                    break;
	            }
	        };
	        AccumulationLegend.prototype.getTitleRect = function (accumulation) {
	            if (!accumulation.title) {
	                return null;
	            }
	            var titleSize = helper_1.measureText(accumulation.title, accumulation.titleStyle);
	            this.titleRect = new helper_1.Rect(accumulation.availableSize.width / 2 - titleSize.width / 2, accumulation.margin.top, titleSize.width, titleSize.height);
	        };
	        AccumulationLegend.prototype.legendByIndex = function (index, legendCollections) {
	            for (var _i = 0, legendCollections_1 = legendCollections; _i < legendCollections_1.length; _i++) {
	                var legend = legendCollections_1[_i];
	                if (legend.pointIndex === index) {
	                    return legend;
	                }
	            }
	            return null;
	        };
	        AccumulationLegend.prototype.click = function (event) {
	            var targetId = event.target.id;
	            var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_',
	                this.legendID + '_shape_marker_'];
	            var selectedDataIndexes = [];
	            if (this.chart.accumulationSelectionModule) {
	                selectedDataIndexes = ej2_base_1.extend([], this.chart.accumulationSelectionModule.selectedDataIndexes, null, true);
	            }
	            for (var _i = 0, legendItemsId_1 = legendItemsId; _i < legendItemsId_1.length; _i++) {
	                var id = legendItemsId_1[_i];
	                if (targetId.indexOf(id) > -1) {
	                    var pointIndex = parseInt(targetId.split(id)[1], 10);
	                    var currentSeries = this.chart.visibleSeries[0];
	                    var point = acc_base_1.pointByIndex(pointIndex, currentSeries.points);
	                    var legendOption = this.legendByIndex(pointIndex, this.legendCollections);
	                    if (this.chart.legendSettings.toggleVisibility) {
	                        point.visible = !point.visible;
	                        legendOption.visible = point.visible;
	                        this.chart.removeSvg();
	                        if (point.visible) {
	                            currentSeries.sumOfPoints += point.y;
	                        }
	                        else {
	                            currentSeries.sumOfPoints -= point.y;
	                        }
	                        this.chart.refreshPoints(currentSeries.points);
	                        this.chart.renderElements();
	                    }
	                    else if (this.chart.accumulationSelectionModule) {
	                        this.chart.accumulationSelectionModule.legendSelection(this.chart, 0, pointIndex);
	                    }
	                }
	            }
	            if (targetId.indexOf(this.legendID + '_pageup') > -1) {
	                this.changePage(event, true);
	            }
	            else if (targetId.indexOf(this.legendID + '_pagedown') > -1) {
	                this.changePage(event, false);
	            }
	        };
	        AccumulationLegend.prototype.getModuleName = function () {
	            return 'AccumulationLegend';
	        };
	        AccumulationLegend.prototype.destroy = function (chart) {
	        };
	        return AccumulationLegend;
	    }(legend_1.BaseLegend));
	    exports.AccumulationLegend = AccumulationLegend;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(4), __webpack_require__(7), __webpack_require__(3), __webpack_require__(12), __webpack_require__(8), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, ej2_base_2, base_1, helper_1, constants_1, theme_1, helper_2) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var AccumulationAnnotationSettings = (function (_super) {
	        __extends(AccumulationAnnotationSettings, _super);
	        function AccumulationAnnotationSettings() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return AccumulationAnnotationSettings;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(null)
	    ], AccumulationAnnotationSettings.prototype, "content", void 0);
	    __decorate([
	        ej2_base_1.Property('0')
	    ], AccumulationAnnotationSettings.prototype, "x", void 0);
	    __decorate([
	        ej2_base_1.Property('0')
	    ], AccumulationAnnotationSettings.prototype, "y", void 0);
	    __decorate([
	        ej2_base_1.Property('Pixel')
	    ], AccumulationAnnotationSettings.prototype, "coordinateUnits", void 0);
	    __decorate([
	        ej2_base_1.Property('Chart')
	    ], AccumulationAnnotationSettings.prototype, "region", void 0);
	    __decorate([
	        ej2_base_1.Property('Middle')
	    ], AccumulationAnnotationSettings.prototype, "verticalAlignment", void 0);
	    __decorate([
	        ej2_base_1.Property('Center')
	    ], AccumulationAnnotationSettings.prototype, "horizontalAlignment", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], AccumulationAnnotationSettings.prototype, "description", void 0);
	    exports.AccumulationAnnotationSettings = AccumulationAnnotationSettings;
	    var Connector = (function (_super) {
	        __extends(Connector, _super);
	        function Connector() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return Connector;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property('Line')
	    ], Connector.prototype, "type", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], Connector.prototype, "color", void 0);
	    __decorate([
	        ej2_base_1.Property(1)
	    ], Connector.prototype, "width", void 0);
	    __decorate([
	        ej2_base_1.Property('4%')
	    ], Connector.prototype, "length", void 0);
	    exports.Connector = Connector;
	    var AccumulationDataLabelSettings = (function (_super) {
	        __extends(AccumulationDataLabelSettings, _super);
	        function AccumulationDataLabelSettings() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return AccumulationDataLabelSettings;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(false)
	    ], AccumulationDataLabelSettings.prototype, "visible", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], AccumulationDataLabelSettings.prototype, "name", void 0);
	    __decorate([
	        ej2_base_1.Property('transparent')
	    ], AccumulationDataLabelSettings.prototype, "fill", void 0);
	    __decorate([
	        ej2_base_1.Property('Inside')
	    ], AccumulationDataLabelSettings.prototype, "position", void 0);
	    __decorate([
	        ej2_base_1.Property(5)
	    ], AccumulationDataLabelSettings.prototype, "rx", void 0);
	    __decorate([
	        ej2_base_1.Property(5)
	    ], AccumulationDataLabelSettings.prototype, "ry", void 0);
	    __decorate([
	        ej2_base_1.Complex({ width: null, color: null }, base_1.Border)
	    ], AccumulationDataLabelSettings.prototype, "border", void 0);
	    __decorate([
	        ej2_base_1.Complex({ size: '11px', color: null }, base_1.Font)
	    ], AccumulationDataLabelSettings.prototype, "font", void 0);
	    __decorate([
	        ej2_base_1.Complex({}, Connector)
	    ], AccumulationDataLabelSettings.prototype, "connectorStyle", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], AccumulationDataLabelSettings.prototype, "template", void 0);
	    exports.AccumulationDataLabelSettings = AccumulationDataLabelSettings;
	    var AccumulationTooltipSettings = (function (_super) {
	        __extends(AccumulationTooltipSettings, _super);
	        function AccumulationTooltipSettings() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        return AccumulationTooltipSettings;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property(false)
	    ], AccumulationTooltipSettings.prototype, "enable", void 0);
	    __decorate([
	        ej2_base_1.Property(true)
	    ], AccumulationTooltipSettings.prototype, "enableAnimation", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], AccumulationTooltipSettings.prototype, "format", void 0);
	    __decorate([
	        ej2_base_1.Property('#FFFFFF')
	    ], AccumulationTooltipSettings.prototype, "fill", void 0);
	    __decorate([
	        ej2_base_1.Complex({ color: null }, base_1.Border)
	    ], AccumulationTooltipSettings.prototype, "border", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], AccumulationTooltipSettings.prototype, "template", void 0);
	    __decorate([
	        ej2_base_1.Complex(theme_1.Theme.tooltipLabelFont, base_1.Font)
	    ], AccumulationTooltipSettings.prototype, "textStyle", void 0);
	    exports.AccumulationTooltipSettings = AccumulationTooltipSettings;
	    var AccPoints = (function () {
	        function AccPoints() {
	            this.visible = true;
	            this.symbolLocation = null;
	            this.labelRegion = null;
	            this.labelVisible = true;
	        }
	        return AccPoints;
	    }());
	    exports.AccPoints = AccPoints;
	    var AccumulationSeries = (function (_super) {
	        __extends(AccumulationSeries, _super);
	        function AccumulationSeries() {
	            var _this = _super !== null && _super.apply(this, arguments) || this;
	            _this.points = [];
	            _this.sumOfPoints = 0;
	            return _this;
	        }
	        AccumulationSeries.prototype.refreshDataManager = function (accumulation) {
	            var _this = this;
	            var dataManager = this.dataModule.getData(this.dataModule.generateQuery().requiresCount());
	            dataManager.then(function (e) { return _this.dataManagerSuccess(e, accumulation); });
	        };
	        AccumulationSeries.prototype.dataManagerSuccess = function (e, accumulation) {
	            var argsData = {
	                name: constants_1.seriesRender, series: this, data: e.result,
	            };
	            accumulation.trigger(constants_1.seriesRender, argsData);
	            this.resultData = e.result;
	            this.getPoints(e.result, accumulation);
	            if (++accumulation.seriesCounts === accumulation.visibleSeries.length) {
	                accumulation.refreshChart();
	            }
	        };
	        AccumulationSeries.prototype.getPoints = function (result, accumulation) {
	            var length = Object.keys(result).length;
	            this.sumOfPoints = 0;
	            if (length === 0) {
	                return null;
	            }
	            this.findSumOfPoints(result);
	            this.points = [];
	            this.sumOfClub = 0;
	            var point;
	            var colors = this.palettes.length ? this.palettes : theme_1.getSeriesColor(accumulation.theme);
	            var clubValue = helper_1.stringToNumber(this.groupTo, this.sumOfPoints);
	            for (var i = 0; i < length; i++) {
	                point = this.setPoints(result[i]);
	                if (!this.isClub(point, clubValue)) {
	                    if (ej2_base_2.isNullOrUndefined(point.y)) {
	                        point.visible = false;
	                    }
	                    this.pushPoints(point, colors);
	                }
	            }
	            this.lastGroupTo = this.groupTo;
	            if (this.sumOfClub > 0) {
	                var clubPoint = new AccPoints();
	                clubPoint.x = 'Others';
	                clubPoint.y = this.sumOfClub;
	                clubPoint.text = clubPoint.x + ': ' + this.sumOfClub;
	                this.pushPoints(clubPoint, colors);
	            }
	        };
	        AccumulationSeries.prototype.pushPoints = function (point, colors) {
	            point.index = this.points.length;
	            point.color = colors[point.index % colors.length];
	            this.points.push(point);
	        };
	        AccumulationSeries.prototype.isClub = function (point, clubValue) {
	            if (Math.abs(point.y) < clubValue) {
	                this.sumOfClub += Math.abs(point.y);
	                return true;
	            }
	            return false;
	        };
	        AccumulationSeries.prototype.findSumOfPoints = function (result) {
	            var length = Object.keys(result).length;
	            for (var i = 0; i < length; i++) {
	                if (!ej2_base_2.isNullOrUndefined(result[i][this.yName])) {
	                    this.sumOfPoints += Math.abs(result[i][this.yName]);
	                }
	            }
	        };
	        AccumulationSeries.prototype.setPoints = function (data) {
	            var point = new AccPoints();
	            point.x = data[this.xName];
	            point.y = data[this.yName];
	            point.text = data[this.dataLabel.name];
	            return point;
	        };
	        AccumulationSeries.prototype.renderSeries = function (accumulation) {
	            var seriesGroup = accumulation.renderer.createGroup({ id: accumulation.element.id + '_Series_' + this.index });
	            this.renderPoints(accumulation, seriesGroup);
	            var datalabelGroup;
	            if (accumulation.accumulationDataLabelModule && this.dataLabel.visible) {
	                datalabelGroup = accumulation.renderer.createGroup({ id: accumulation.element.id + '_datalabel_Series_' + this.index });
	                datalabelGroup.style.visibility = (this.animation.enable && accumulation.animateSeries) ? 'hidden' : 'visible';
	                this.renderDataLabel(accumulation, datalabelGroup);
	            }
	            this.findMaxBounds(this.labelBound, this.accumulationBound);
	            accumulation.pieSeriesModule.animateSeries(accumulation, this.animation, this, seriesGroup);
	            if (accumulation.accumulationLegendModule) {
	                this.labelBound.x -= accumulation.explodeDistance;
	                this.labelBound.y -= accumulation.explodeDistance;
	                this.labelBound.height += (accumulation.explodeDistance - this.labelBound.y);
	                this.labelBound.width += (accumulation.explodeDistance - this.labelBound.x);
	            }
	        };
	        AccumulationSeries.prototype.renderPoints = function (accumulation, seriesGroup) {
	            var pointId = accumulation.element.id + '_Series_' + this.index + '_Point_';
	            var option;
	            for (var _i = 0, _a = this.points; _i < _a.length; _i++) {
	                var point = _a[_i];
	                var argsData = {
	                    cancel: false, name: constants_1.pointRender, series: this, point: point, fill: point.color, border: this.border
	                };
	                accumulation.trigger(constants_1.pointRender, argsData);
	                point.color = argsData.fill;
	                if (point.visible) {
	                    option = new helper_1.PathOption(pointId + point.index, point.color, this.border.width || 1, this.border.color || point.color, 1, '', '');
	                    accumulation.pieSeriesModule.renderPoint(point, option, this.sumOfPoints);
	                    seriesGroup.appendChild(accumulation.renderer.drawPath(option));
	                }
	            }
	            accumulation.getSeriesElement().appendChild(seriesGroup);
	        };
	        AccumulationSeries.prototype.renderDataLabel = function (accumulation, datalabelGroup) {
	            accumulation.accumulationDataLabelModule.initProperties(accumulation, this);
	            accumulation.accumulationDataLabelModule.findAreaRect();
	            var element = ej2_base_1.createElement('div', {
	                id: accumulation.element.id + '_Series_0' + '_DataLabelCollections'
	            });
	            for (var _i = 0, _a = this.points; _i < _a.length; _i++) {
	                var point = _a[_i];
	                if (point.visible) {
	                    accumulation.accumulationDataLabelModule.renderDataLabel(point, this.dataLabel, datalabelGroup, this.points, this.index, element);
	                }
	            }
	            if (this.dataLabel.template !== null && element.childElementCount) {
	                helper_2.getElement(accumulation.element.id + '_Secondary_Element').appendChild(element);
	            }
	            accumulation.getSeriesElement().appendChild(datalabelGroup);
	        };
	        AccumulationSeries.prototype.findMaxBounds = function (totalbound, bound) {
	            totalbound.x = bound.x < totalbound.x ? bound.x : totalbound.x;
	            totalbound.y = bound.y < totalbound.y ? bound.y : totalbound.y;
	            totalbound.height = (bound.y + bound.height) > totalbound.height ? (bound.y + bound.height) : totalbound.height;
	            totalbound.width = (bound.x + bound.width) > totalbound.width ? (bound.x + bound.width) : totalbound.width;
	        };
	        return AccumulationSeries;
	    }(ej2_base_1.ChildProperty));
	    __decorate([
	        ej2_base_1.Property('')
	    ], AccumulationSeries.prototype, "dataSource", void 0);
	    __decorate([
	        ej2_base_1.Property()
	    ], AccumulationSeries.prototype, "query", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], AccumulationSeries.prototype, "xName", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], AccumulationSeries.prototype, "name", void 0);
	    __decorate([
	        ej2_base_1.Property('')
	    ], AccumulationSeries.prototype, "yName", void 0);
	    __decorate([
	        ej2_base_1.Property(true)
	    ], AccumulationSeries.prototype, "visible", void 0);
	    __decorate([
	        ej2_base_1.Complex({ color: null, width: 0 }, base_1.Border)
	    ], AccumulationSeries.prototype, "border", void 0);
	    __decorate([
	        ej2_base_1.Complex(null, base_1.Animation)
	    ], AccumulationSeries.prototype, "animation", void 0);
	    __decorate([
	        ej2_base_1.Property('SeriesType')
	    ], AccumulationSeries.prototype, "legendShape", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], AccumulationSeries.prototype, "selectionStyle", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], AccumulationSeries.prototype, "groupTo", void 0);
	    __decorate([
	        ej2_base_1.Complex({}, AccumulationDataLabelSettings)
	    ], AccumulationSeries.prototype, "dataLabel", void 0);
	    __decorate([
	        ej2_base_1.Property([])
	    ], AccumulationSeries.prototype, "palettes", void 0);
	    __decorate([
	        ej2_base_1.Property(0)
	    ], AccumulationSeries.prototype, "startAngle", void 0);
	    __decorate([
	        ej2_base_1.Property(360)
	    ], AccumulationSeries.prototype, "endAngle", void 0);
	    __decorate([
	        ej2_base_1.Property('80%')
	    ], AccumulationSeries.prototype, "radius", void 0);
	    __decorate([
	        ej2_base_1.Property('0')
	    ], AccumulationSeries.prototype, "innerRadius", void 0);
	    __decorate([
	        ej2_base_1.Property('Pie')
	    ], AccumulationSeries.prototype, "type", void 0);
	    __decorate([
	        ej2_base_1.Property(true)
	    ], AccumulationSeries.prototype, "enableTooltip", void 0);
	    __decorate([
	        ej2_base_1.Property(false)
	    ], AccumulationSeries.prototype, "explode", void 0);
	    __decorate([
	        ej2_base_1.Property('30%')
	    ], AccumulationSeries.prototype, "explodeOffset", void 0);
	    __decorate([
	        ej2_base_1.Property(false)
	    ], AccumulationSeries.prototype, "explodeAll", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], AccumulationSeries.prototype, "explodeIndex", void 0);
	    exports.AccumulationSeries = AccumulationSeries;
	    function getSeriesFromIndex(index, visibleSeries) {
	        for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {
	            var series = visibleSeries_1[_i];
	            if (index === series.index) {
	                return series;
	            }
	        }
	        return visibleSeries[0];
	    }
	    exports.getSeriesFromIndex = getSeriesFromIndex;
	    function pointByIndex(index, points) {
	        for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {
	            var point = points_1[_i];
	            if (point.index === index) {
	                return point;
	            }
	        }
	        return null;
	    }
	    exports.pointByIndex = pointByIndex;
	    function indexFinder(id) {
	        var ids = ['NaN', 'NaN'];
	        if (id.indexOf('_Point_') > -1) {
	            ids = id.split('_Series_')[1].split('_Point_');
	        }
	        else if (id.indexOf('_shape_') > -1) {
	            ids = id.split('_shape_');
	            ids[0] = '0';
	        }
	        else if (id.indexOf('_text_') > -1) {
	            ids = id.split('_text_');
	            ids[0] = '0';
	        }
	        return new base_1.Index(parseInt(ids[0], 10), parseInt(ids[1], 10));
	    }
	    exports.indexFinder = indexFinder;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(4), __webpack_require__(4), __webpack_require__(7), __webpack_require__(48), __webpack_require__(8), __webpack_require__(12), __webpack_require__(12), __webpack_require__(17), __webpack_require__(3), __webpack_require__(3), __webpack_require__(15), __webpack_require__(50), __webpack_require__(48)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, base_1, acc_base_1, theme_1, constants_1, constants_2, legend_1, helper_1, helper_2, data_1, pie_series_1, acc_base_2) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var AccumulationChart = (function (_super) {
	        __extends(AccumulationChart, _super);
	        function AccumulationChart(options, element) {
	            var _this = _super.call(this, options, element) || this;
	            _this.explodeDistance = 0;
	            _this.type = 'Pie';
	            return _this;
	        }
	        AccumulationChart.prototype.preRender = function () {
	            this.unWireEvents();
	            this.setCulture();
	            this.animateSeries = true;
	            helper_2.calculateSize(this);
	            this.wireEvents();
	        };
	        AccumulationChart.prototype.render = function () {
	            this.trigger(constants_1.load, { accumulation: this });
	            this.calculateAreaType();
	            this.calculateVisibleSeries();
	            this.processData();
	        };
	        AccumulationChart.prototype.unWireEvents = function () {
	            var isIE11Pointer = ej2_base_2.Browser.isPointer;
	            var start = ej2_base_2.Browser.touchStartEvent;
	            var move = ej2_base_2.Browser.touchMoveEvent;
	            var stop = ej2_base_2.Browser.touchEndEvent;
	            var cancel = isIE11Pointer ? 'pointerleave' : 'mouseleave';
	            ej2_base_2.EventHandler.remove(this.element, move, this.accumulationMouseMove);
	            ej2_base_2.EventHandler.remove(this.element, stop, this.accumulationMouseEnd);
	            ej2_base_2.EventHandler.remove(this.element, start, this.accumulationMouseStart);
	            ej2_base_2.EventHandler.remove(this.element, 'click', this.accumulationOnMouseClick);
	            ej2_base_2.EventHandler.remove(this.element, 'contextmenu', this.accumulationRightClick);
	            ej2_base_2.EventHandler.remove(this.element, cancel, this.accumulationMouseLeave);
	            ej2_base_2.EventHandler.remove(window, (ej2_base_2.Browser.isTouch && ('orientation' in window && 'onorientationchange' in window)) ? 'orientationchange' : 'resize', this.accumulationResize);
	        };
	        AccumulationChart.prototype.wireEvents = function () {
	            var isIE11Pointer = ej2_base_2.Browser.isPointer;
	            var start = ej2_base_2.Browser.touchStartEvent;
	            var stop = ej2_base_2.Browser.touchEndEvent;
	            var move = ej2_base_2.Browser.touchMoveEvent;
	            var cancel = isIE11Pointer ? 'pointerleave' : 'mouseleave';
	            ej2_base_2.EventHandler.add(this.element, move, this.accumulationMouseMove, this);
	            ej2_base_2.EventHandler.add(this.element, stop, this.accumulationMouseEnd, this);
	            ej2_base_2.EventHandler.add(this.element, start, this.accumulationMouseStart, this);
	            ej2_base_2.EventHandler.add(this.element, 'click', this.accumulationOnMouseClick, this);
	            ej2_base_2.EventHandler.add(this.element, 'contextmenu', this.accumulationRightClick, this);
	            ej2_base_2.EventHandler.add(this.element, cancel, this.accumulationMouseLeave, this);
	            ej2_base_2.EventHandler.add(window, (ej2_base_2.Browser.isTouch && ('orientation' in window && 'onorientationchange' in window)) ? 'orientationchange' : 'resize', this.accumulationResize, this);
	            new ej2_base_2.Touch(this.element);
	            this.setStyle(this.element);
	        };
	        AccumulationChart.prototype.setMouseXY = function (e) {
	            var pageX;
	            var pageY;
	            if (e.type.indexOf('touch') > -1) {
	                this.isTouch = true;
	                var touchArg = e;
	                pageY = touchArg.changedTouches[0].clientY;
	                pageX = touchArg.changedTouches[0].clientX;
	            }
	            else {
	                this.isTouch = e.pointerType === 'touch' || e.pointerType === '2';
	                pageX = e.clientX;
	                pageY = e.clientY;
	            }
	            this.mouseY = pageY;
	            this.mouseX = pageX;
	        };
	        AccumulationChart.prototype.accumulationMouseEnd = function (e) {
	            this.setMouseXY(e);
	            this.trigger(constants_2.chartMouseUp, { target: e.target.id, x: this.mouseX, y: this.mouseY });
	            if (this.isTouch) {
	                this.titleTooltip(e, this.mouseX, this.mouseY, this.isTouch);
	                if (this.accumulationTooltipModule && this.accumulationTooltipModule.tooltip) {
	                    this.pieSeriesModule.getTooltipPoint(e, this, this.mouseX, this.mouseY);
	                    this.accumulationTooltipModule.fadeOutTooltip();
	                }
	                if (this.accumulationDataLabelModule && this.visibleSeries[0].dataLabel.visible) {
	                    this.accumulationDataLabelModule.move(e, this.mouseX, this.mouseY, this.isTouch);
	                }
	                if (this.accumulationLegendModule && this.legendSettings.visible) {
	                    this.accumulationLegendModule.move(e, this.mouseX, this.mouseY, this.isTouch);
	                }
	            }
	            return false;
	        };
	        AccumulationChart.prototype.accumulationMouseStart = function (e) {
	            this.setMouseXY(e);
	            this.trigger(constants_1.chartMouseDown, { target: e.target.id, x: this.mouseX, y: this.mouseY });
	            return false;
	        };
	        AccumulationChart.prototype.accumulationResize = function (e) {
	            var _this = this;
	            var args = {
	                accumulation: this,
	                previousSize: new helper_1.Size(this.availableSize.width, this.availableSize.height),
	                name: constants_2.resized,
	                currentSize: new helper_1.Size(0, 0)
	            };
	            if (this.resizeTo) {
	                clearTimeout(this.resizeTo);
	            }
	            this.resizeTo = setTimeout(function () {
	                args.currentSize = _this.availableSize;
	                _this.trigger(constants_2.resized, args);
	                _this.refreshSeries();
	                _this.refreshChart();
	            }, 500);
	            return false;
	        };
	        AccumulationChart.prototype.setStyle = function (element) {
	            element.style.touchAction = 'element';
	            element.style.msTouchAction = 'element';
	            element.style.msContentZooming = 'none';
	            element.style.msUserSelect = 'none';
	            element.style.webkitUserSelect = 'none';
	            element.style.position = 'relative';
	        };
	        AccumulationChart.prototype.accumulationMouseMove = function (e) {
	            this.setMouseXY(e);
	            this.trigger(constants_2.chartMouseMove, { target: e.target.id, x: this.mouseX, y: this.mouseY });
	            if (this.accumulationLegendModule && this.legendSettings.visible) {
	                this.accumulationLegendModule.move(e, this.mouseX, this.mouseY);
	            }
	            if (this.accumulationDataLabelModule && this.visibleSeries[0] && this.visibleSeries[0].dataLabel.visible) {
	                this.accumulationDataLabelModule.move(e, this.mouseX, this.mouseY);
	            }
	            if (this.accumulationTooltipModule && this.pieSeriesModule && this.tooltip.enable && !this.isTouch) {
	                this.pieSeriesModule.getTooltipPoint(e, this, this.mouseX, this.mouseY);
	            }
	            if (!this.isTouch) {
	                this.titleTooltip(e, this.mouseX, this.mouseY);
	            }
	            return false;
	        };
	        AccumulationChart.prototype.titleTooltip = function (event, x, y, isTouch) {
	            var targetId = event.target.id;
	            if ((event.target.textContent.indexOf('...') > -1) && (targetId === (this.element.id + '_title'))) {
	                helper_1.showTooltip(this.title, x, y, this.element.offsetWidth, this.element.id + '_EJ2_Title_Tooltip', isTouch);
	            }
	            else {
	                helper_2.removeElement(this.element.id + '_EJ2_Title_Tooltip');
	            }
	        };
	        AccumulationChart.prototype.accumulationOnMouseClick = function (e) {
	            this.setMouseXY(e);
	            if (this.accumulationLegendModule && this.legendSettings.visible) {
	                this.accumulationLegendModule.click(e);
	            }
	            if (this.selectionMode !== 'None' && this.accumulationSelectionModule) {
	                this.accumulationSelectionModule.calculateSelectedElements(this, e);
	            }
	            if (this.visibleSeries[0].explode) {
	                this.pieSeriesModule.processExplode(e);
	            }
	            this.trigger(constants_1.chartMouseClick, { target: e.target.id, x: this.mouseX, y: this.mouseY });
	            return false;
	        };
	        AccumulationChart.prototype.accumulationRightClick = function (event) {
	            if (event.buttons === 2 || event.pointerType === 'touch') {
	                event.preventDefault();
	                event.stopPropagation();
	                return false;
	            }
	            return true;
	        };
	        AccumulationChart.prototype.accumulationMouseLeave = function (e) {
	            this.setMouseXY(e);
	            this.trigger(constants_2.chartMouseLeave, { target: e.target.id, x: this.mouseX, y: this.mouseY });
	            if (this.accumulationTooltipModule && this.tooltip.enable) {
	                this.accumulationTooltipModule.tooltip.close();
	            }
	            return false;
	        };
	        AccumulationChart.prototype.setCulture = function () {
	            this.intl = new ej2_base_2.Internationalization();
	        };
	        AccumulationChart.prototype.createPieSvg = function () {
	            this.removeSvg();
	            helper_2.createSvg(this);
	        };
	        AccumulationChart.prototype.removeSvg = function () {
	            helper_2.removeElement(this.element.id + '_Secondary_Element');
	            if (this.svgObject) {
	                while (this.svgObject.childNodes.length > 0) {
	                    this.svgObject.removeChild(this.svgObject.firstChild);
	                }
	                if (!this.svgObject.hasChildNodes() && this.svgObject.parentNode) {
	                    ej2_base_3.remove(this.svgObject);
	                }
	            }
	            helper_2.removeElement('EJ2_legend_tooltip');
	            helper_2.removeElement('EJ2_datalabel_tooltip');
	        };
	        AccumulationChart.prototype.createSecondaryElement = function () {
	            this.element.appendChild(ej2_base_3.createElement('div', {
	                id: this.element.id + '_Secondary_Element',
	                styles: 'position: relative'
	            }));
	        };
	        AccumulationChart.prototype.calculateAreaType = function () {
	            var series = this.series[0];
	            if (series) {
	                this.type = series.type;
	            }
	            this.pieSeriesModule = new pie_series_1.PieSeries();
	        };
	        AccumulationChart.prototype.calculateVisibleSeries = function () {
	            this.visibleSeries = [];
	            for (var i = 0, length_1 = this.series.length; i < length_1; i++) {
	                this.series[i].index = i;
	                if (this.series[i].type === this.type && this.visibleSeries.length === 0) {
	                    this.visibleSeries.push(this.series[i]);
	                    break;
	                }
	            }
	        };
	        AccumulationChart.prototype.processData = function () {
	            this.seriesCounts = 0;
	            for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {
	                var series = _a[_i];
	                series.dataModule = new data_1.Data(series.dataSource, series.query);
	                series.refreshDataManager(this);
	            }
	        };
	        AccumulationChart.prototype.refreshChart = function () {
	            this.doGrouppingProcess();
	            this.createPieSvg();
	            this.calculateBounds();
	            this.renderElements();
	        };
	        AccumulationChart.prototype.doGrouppingProcess = function () {
	            var series = this.visibleSeries[0];
	            if (!ej2_base_3.isNullOrUndefined(series.resultData) && ((!ej2_base_3.isNullOrUndefined(series.lastGroupTo) &&
	                series.lastGroupTo !== series.groupTo))) {
	                series.getPoints(series.resultData, this);
	            }
	        };
	        AccumulationChart.prototype.calculateBounds = function () {
	            this.initialClipRect = new helper_1.Rect(this.margin.left, this.margin.top, this.availableSize.width, this.availableSize.height);
	            helper_1.subtractRect(this.initialClipRect, new helper_1.Rect(0, helper_1.measureText(this.title, this.titleStyle).height, this.margin.right + this.margin.left, this.margin.bottom + this.margin.top));
	            this.calculateLegendBounds();
	        };
	        AccumulationChart.prototype.calculateLegendBounds = function () {
	            if (!this.accumulationLegendModule || !this.legendSettings.visible) {
	                return null;
	            }
	            this.accumulationLegendModule.getLegendOptions(this, this.visibleSeries);
	            this.accumulationLegendModule.calculateLegendBounds(this.initialClipRect, this.availableSize);
	        };
	        AccumulationChart.prototype.renderElements = function () {
	            this.renderBorder();
	            this.renderTitle();
	            this.createSecondaryElement();
	            this.renderSeries();
	            this.renderLegend();
	            this.element.appendChild(this.svgObject);
	            this.processSelection();
	            this.processExplode();
	            this.renderAnnotation();
	            this.trigger('loaded', { accumulation: this });
	            this.animateSeries = false;
	        };
	        AccumulationChart.prototype.renderAnnotation = function () {
	            if (this.annotationModule) {
	                this.annotationModule.renderAnnotations(helper_2.getElement(this.element.id + '_Secondary_Element'));
	            }
	        };
	        AccumulationChart.prototype.processExplode = function () {
	            if (!this.visibleSeries[0].explode) {
	                return null;
	            }
	            this.pieSeriesModule.invokeExplode();
	        };
	        AccumulationChart.prototype.renderSeries = function () {
	            this.svgObject.appendChild(this.renderer.createGroup({ id: this.element.id + '_SeriesCollection' }));
	            for (var i = 0, length_2 = this.visibleSeries.length; i < length_2; i++) {
	                if (this.visibleSeries[i].visible) {
	                    this.pieSeriesModule.initProperties(this, this.visibleSeries[i]);
	                    this.visibleSeries[i].renderSeries(this);
	                }
	            }
	        };
	        AccumulationChart.prototype.renderBorder = function () {
	            var padding = this.border.width;
	            this.svgObject.appendChild(this.renderer.drawRectangle(new helper_1.RectOption(this.element.id + '_border', this.background, this.border, 1, new helper_1.Rect(padding / 2, padding / 2, this.availableSize.width - padding, this.availableSize.height - padding))));
	        };
	        AccumulationChart.prototype.renderLegend = function () {
	            if (!this.accumulationLegendModule || !this.legendSettings.visible) {
	                return null;
	            }
	            if (this.accumulationLegendModule.legendCollections.length) {
	                this.accumulationLegendModule.getSmartLegendLocation(this.visibleSeries[0].labelBound, this.accumulationLegendModule.legendBounds, this.margin);
	                this.accumulationLegendModule.renderLegend(this, this.legendSettings, this.accumulationLegendModule.legendBounds);
	            }
	        };
	        AccumulationChart.prototype.processSelection = function () {
	            if (!this.accumulationSelectionModule || this.selectionMode === 'None') {
	                return null;
	            }
	            var selectedDataIndexes = ej2_base_3.extend([], this.accumulationSelectionModule.selectedDataIndexes, null, true);
	            this.accumulationSelectionModule.invokeSelection(this);
	            if (selectedDataIndexes.length > 0) {
	                this.accumulationSelectionModule.selectedDataIndexes = selectedDataIndexes;
	                this.accumulationSelectionModule.redrawSelection(this, this.selectionMode);
	            }
	        };
	        AccumulationChart.prototype.renderTitle = function () {
	            if (!this.title) {
	                return null;
	            }
	            var height = helper_1.measureText(this.title, this.titleStyle).height;
	            helper_2.textElement(new helper_2.TextOption(this.element.id + '_title', this.availableSize.width / 2, this.margin.top + (height * 3 / 4), 'middle', helper_1.textTrim(this.availableSize.width, this.title, this.titleStyle), '', 'auto'), this.titleStyle, this.titleStyle.color, this.svgObject);
	        };
	        AccumulationChart.prototype.getSeriesElement = function () {
	            return this.svgObject.getElementsByTagName('g')[0];
	        };
	        AccumulationChart.prototype.refreshSeries = function () {
	            for (var _i = 0, _a = this.visibleSeries; _i < _a.length; _i++) {
	                var series = _a[_i];
	                this.refreshPoints(series.points);
	            }
	        };
	        AccumulationChart.prototype.refreshPoints = function (points) {
	            for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {
	                var point = points_1[_i];
	                point.labelRegion = null;
	                point.labelVisible = true;
	            }
	        };
	        AccumulationChart.prototype.getModuleName = function () {
	            return 'accumulationchart';
	        };
	        AccumulationChart.prototype.destroy = function () {
	            this.unWireEvents();
	            _super.prototype.destroy.call(this);
	            this.element.classList.remove('e-accumulationchart');
	        };
	        AccumulationChart.prototype.requiredModules = function () {
	            var modules = [];
	            var enableAnnotation = false;
	            modules.push({
	                member: this.type + 'Series',
	                args: [this]
	            });
	            if (this.legendSettings.visible) {
	                modules.push({
	                    member: 'AccumulationLegend',
	                    args: [this]
	                });
	            }
	            if (this.findDatalabelVisibility()) {
	                modules.push({
	                    member: 'AccumulationDataLabel',
	                    args: [this]
	                });
	            }
	            if (this.tooltip.enable) {
	                modules.push({
	                    member: 'AccumulationTooltip',
	                    args: [this]
	                });
	            }
	            if (this.selectionMode !== 'None') {
	                modules.push({
	                    member: 'AccumulationSelection',
	                    args: [this]
	                });
	            }
	            enableAnnotation = this.annotations.some(function (value) {
	                return (value.content !== null);
	            });
	            if (enableAnnotation) {
	                modules.push({
	                    member: 'Annotation',
	                    args: [this, this.annotations]
	                });
	            }
	            return modules;
	        };
	        AccumulationChart.prototype.findDatalabelVisibility = function () {
	            for (var _i = 0, _a = this.series; _i < _a.length; _i++) {
	                var series = _a[_i];
	                if (series.dataLabel.visible) {
	                    return true;
	                }
	            }
	            return false;
	        };
	        AccumulationChart.prototype.getPersistData = function () {
	            return '';
	        };
	        AccumulationChart.prototype.onPropertyChanged = function (newProp, oldProp) {
	            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
	                var prop = _a[_i];
	                switch (prop) {
	                    case 'theme':
	                        this.animateSeries = true;
	                        break;
	                }
	            }
	            this.refreshSeries();
	            this.refreshChart();
	        };
	        return AccumulationChart;
	    }(ej2_base_1.Component));
	    __decorate([
	        ej2_base_1.Property(null)
	    ], AccumulationChart.prototype, "width", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], AccumulationChart.prototype, "height", void 0);
	    __decorate([
	        ej2_base_1.Property(null)
	    ], AccumulationChart.prototype, "title", void 0);
	    __decorate([
	        ej2_base_1.Complex(theme_1.Theme.chartTitleFont, base_1.Font)
	    ], AccumulationChart.prototype, "titleStyle", void 0);
	    __decorate([
	        ej2_base_1.Complex({}, legend_1.LegendSettings)
	    ], AccumulationChart.prototype, "legendSettings", void 0);
	    __decorate([
	        ej2_base_1.Complex({}, acc_base_1.AccumulationTooltipSettings)
	    ], AccumulationChart.prototype, "tooltip", void 0);
	    __decorate([
	        ej2_base_1.Property('None')
	    ], AccumulationChart.prototype, "selectionMode", void 0);
	    __decorate([
	        ej2_base_1.Property(false)
	    ], AccumulationChart.prototype, "isMultiSelect", void 0);
	    __decorate([
	        ej2_base_1.Collection([], base_1.Indexes)
	    ], AccumulationChart.prototype, "selectedDataIndexes", void 0);
	    __decorate([
	        ej2_base_1.Complex({}, base_1.Margin)
	    ], AccumulationChart.prototype, "margin", void 0);
	    __decorate([
	        ej2_base_1.Property(true)
	    ], AccumulationChart.prototype, "enableSmartLabels", void 0);
	    __decorate([
	        ej2_base_1.Complex({ color: '#DDDDDD', width: 0 }, base_1.Border)
	    ], AccumulationChart.prototype, "border", void 0);
	    __decorate([
	        ej2_base_1.Property(theme_1.Theme.chartBackgroundColor)
	    ], AccumulationChart.prototype, "background", void 0);
	    __decorate([
	        ej2_base_1.Collection([{}], acc_base_1.AccumulationSeries)
	    ], AccumulationChart.prototype, "series", void 0);
	    __decorate([
	        ej2_base_1.Collection([{}], acc_base_2.AccumulationAnnotationSettings)
	    ], AccumulationChart.prototype, "annotations", void 0);
	    __decorate([
	        ej2_base_1.Property('Material')
	    ], AccumulationChart.prototype, "theme", void 0);
	    __decorate([
	        ej2_base_2.Event()
	    ], AccumulationChart.prototype, "loaded", void 0);
	    __decorate([
	        ej2_base_2.Event()
	    ], AccumulationChart.prototype, "load", void 0);
	    __decorate([
	        ej2_base_2.Event()
	    ], AccumulationChart.prototype, "seriesRender", void 0);
	    __decorate([
	        ej2_base_2.Event()
	    ], AccumulationChart.prototype, "legendRender", void 0);
	    __decorate([
	        ej2_base_2.Event()
	    ], AccumulationChart.prototype, "textRender", void 0);
	    __decorate([
	        ej2_base_2.Event()
	    ], AccumulationChart.prototype, "tooltipRender", void 0);
	    __decorate([
	        ej2_base_2.Event()
	    ], AccumulationChart.prototype, "pointRender", void 0);
	    __decorate([
	        ej2_base_2.Event()
	    ], AccumulationChart.prototype, "annotationRender", void 0);
	    __decorate([
	        ej2_base_2.Event()
	    ], AccumulationChart.prototype, "chartMouseMove", void 0);
	    __decorate([
	        ej2_base_2.Event()
	    ], AccumulationChart.prototype, "chartMouseClick", void 0);
	    __decorate([
	        ej2_base_2.Event()
	    ], AccumulationChart.prototype, "animationComplete", void 0);
	    __decorate([
	        ej2_base_2.Event()
	    ], AccumulationChart.prototype, "chartMouseDown", void 0);
	    __decorate([
	        ej2_base_2.Event()
	    ], AccumulationChart.prototype, "chartMouseLeave", void 0);
	    __decorate([
	        ej2_base_2.Event()
	    ], AccumulationChart.prototype, "chartMouseUp", void 0);
	    __decorate([
	        ej2_base_2.Event()
	    ], AccumulationChart.prototype, "resized", void 0);
	    AccumulationChart = __decorate([
	        ej2_base_1.NotifyPropertyChanges
	    ], AccumulationChart);
	    exports.AccumulationChart = AccumulationChart;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(3), __webpack_require__(51)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, helper_1, pie_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var PieSeries = (function (_super) {
	        __extends(PieSeries, _super);
	        function PieSeries() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        PieSeries.prototype.renderPoint = function (point, option, sum) {
	            var degree = ((Math.abs(point.y) / sum) * (this.totalAngle));
	            option.d = this.getPathOption(point, degree);
	            point.midAngle = (this.startAngle - (degree / 2)) % 360;
	            point.endAngle = this.startAngle % 360;
	            point.symbolLocation = helper_1.degreeToLocation(point.midAngle, (this.radius + this.innerRadius) / 2, this.center);
	            return option;
	        };
	        PieSeries.prototype.getPathOption = function (point, degree) {
	            var path = this.getPathArc(this.center, this.startAngle % 360, (this.startAngle + degree) % 360, this.radius, this.innerRadius);
	            this.startAngle += degree;
	            return path;
	        };
	        PieSeries.prototype.animateSeries = function (accumulation, option, series, slice) {
	            var groupId = accumulation.element.id + 'SeriesGroup' + series.index;
	            if (series.animation.enable && accumulation.animateSeries) {
	                var clippath = accumulation.renderer.createClipPath({ id: groupId + '_clipPath' });
	                var path = new helper_1.PathOption(groupId + '_slice', 'transparent', 1, 'transparent', 1, '', '');
	                var clipslice = accumulation.renderer.drawPath(path);
	                clippath.appendChild(clipslice);
	                accumulation.svgObject.appendChild(clippath);
	                slice.setAttribute('style', 'clip-path:url(#' + clippath.id + ')');
	                this.doAnimation(clipslice, series);
	            }
	        };
	        PieSeries.prototype.getModuleName = function () {
	            return 'PieSeries';
	        };
	        PieSeries.prototype.destroy = function (accumulation) {
	        };
	        return PieSeries;
	    }(pie_base_1.PieBase));
	    exports.PieSeries = PieSeries;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(4), __webpack_require__(3), __webpack_require__(12), __webpack_require__(48)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, ej2_base_2, helper_1, constants_1, acc_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var PieBase = (function () {
	        function PieBase() {
	        }
	        PieBase.prototype.findCenter = function (accumulation) {
	            this.accumulation = accumulation;
	            this.center = {
	                x: helper_1.stringToNumber('50%', accumulation.initialClipRect.width) + (accumulation.initialClipRect.x),
	                y: helper_1.stringToNumber('50%', accumulation.initialClipRect.height) + (accumulation.initialClipRect.y)
	            };
	            var accumulationRect = this.getSeriesBound(accumulation.visibleSeries[0]);
	            var accumulationRectCenter = new helper_1.ChartLocation(accumulationRect.x + accumulationRect.width / 2, accumulationRect.y + accumulationRect.height / 2);
	            this.center.x += (this.center.x - accumulationRectCenter.x);
	            this.center.y += (this.center.y - accumulationRectCenter.y);
	            this.accumulation.center = this.center;
	        };
	        PieBase.prototype.initProperties = function (chart, series) {
	            var size = Math.min(chart.initialClipRect.width, chart.initialClipRect.height);
	            this.initAngles(series);
	            this.radius = helper_1.stringToNumber(series.radius, size / 2);
	            this.innerRadius = helper_1.stringToNumber(series.innerRadius, this.radius);
	            this.labelRadius = series.dataLabel.position === 'Inside' ? (((this.radius - this.innerRadius) / 2) + this.innerRadius) :
	                (this.radius + helper_1.stringToNumber(series.dataLabel.connectorStyle.length, size / 2));
	            this.findCenter(chart);
	            chart.explodeDistance = series.explode ? helper_1.stringToNumber(series.explodeOffset, this.radius) : 0;
	            this.defaultLabelBound(series, series.dataLabel.visible, series.dataLabel.position);
	            this.totalAngle -= 0.001;
	        };
	        PieBase.prototype.initAngles = function (series) {
	            this.totalAngle = (series.endAngle - series.startAngle) % 360;
	            this.startAngle = series.startAngle - 90;
	            this.totalAngle = this.totalAngle <= 0 ? (360 + this.totalAngle) : this.totalAngle;
	            this.startAngle = (this.startAngle < 0 ? (this.startAngle + 360) : this.startAngle) % 360;
	        };
	        PieBase.prototype.defaultLabelBound = function (series, visible, position) {
	            var accumulationBound = this.getSeriesBound(series);
	            series.accumulationBound = accumulationBound;
	            series.labelBound = new helper_1.Rect(accumulationBound.x, accumulationBound.y, accumulationBound.width + accumulationBound.x, accumulationBound.height + accumulationBound.y);
	            if (visible && position === 'Outside') {
	                series.labelBound = new helper_1.Rect(Infinity, Infinity, -Infinity, -Infinity);
	            }
	        };
	        PieBase.prototype.getSeriesBound = function (series) {
	            var rect = new helper_1.Rect(Infinity, Infinity, -Infinity, -Infinity);
	            this.initAngles(series);
	            var start = this.startAngle;
	            var total = this.totalAngle;
	            var end = (this.startAngle + total) % 360;
	            end = (end === 0) ? 360 : end;
	            series.findMaxBounds(rect, this.getRectFromAngle(start));
	            series.findMaxBounds(rect, this.getRectFromAngle(end));
	            series.findMaxBounds(rect, new helper_1.Rect(this.center.x, this.center.y, 0, 0));
	            var nextQuandrant = (Math.floor(start / 90) * 90 + 90) % 360;
	            var lastQuadrant = (Math.floor(end / 90) * 90) % 360;
	            lastQuadrant = (lastQuadrant === 0) ? 360 : lastQuadrant;
	            if (total >= 90 || lastQuadrant === nextQuandrant) {
	                series.findMaxBounds(rect, this.getRectFromAngle(nextQuandrant));
	                series.findMaxBounds(rect, this.getRectFromAngle(lastQuadrant));
	            }
	            if (start === 0 || (start + total >= 360)) {
	                series.findMaxBounds(rect, this.getRectFromAngle(0));
	            }
	            var length = nextQuandrant === lastQuadrant ? 0 : Math.floor(total / 90);
	            for (var i = 1; i < length; i++) {
	                nextQuandrant = nextQuandrant + 90;
	                if ((nextQuandrant < lastQuadrant || end < start) || total === 360) {
	                    series.findMaxBounds(rect, this.getRectFromAngle(nextQuandrant));
	                }
	            }
	            rect.width -= rect.x;
	            rect.height -= rect.y;
	            return rect;
	        };
	        PieBase.prototype.getRectFromAngle = function (angle) {
	            var location = helper_1.degreeToLocation(angle, this.radius, this.center);
	            return new helper_1.Rect(location.x, location.y, 0, 0);
	        };
	        PieBase.prototype.getPathArc = function (center, start, end, radius, innerRadius) {
	            var degree = end - start;
	            degree = degree < 0 ? (degree + 360) : degree;
	            var flag = (degree < 180) ? 0 : 1;
	            if (!innerRadius && innerRadius === 0) {
	                return this.getPiePath(center, helper_1.degreeToLocation(start, radius, center), helper_1.degreeToLocation(end, radius, center), radius, flag);
	            }
	            else {
	                return this.getDoughnutPath(center, helper_1.degreeToLocation(start, radius, center), helper_1.degreeToLocation(end, radius, center), radius, helper_1.degreeToLocation(start, innerRadius, center), helper_1.degreeToLocation(end, innerRadius, center), innerRadius, flag);
	            }
	        };
	        PieBase.prototype.getPiePath = function (center, start, end, radius, clockWise) {
	            return 'M ' + center.x + ' ' + center.y + ' L ' + start.x + ' ' + start.y + ' A ' + radius + ' ' +
	                radius + ' 0 ' + clockWise + ' 1 ' + end.x + ' ' + end.y + ' Z';
	        };
	        PieBase.prototype.getDoughnutPath = function (center, start, end, radius, innerStart, innerEnd, innerRadius, clockWise) {
	            return 'M ' + start.x + ' ' + start.y + ' A ' + radius + ' ' + radius + ' 0 ' + clockWise +
	                ' 1 ' + end.x + ' ' + end.y + ' L ' + innerEnd.x + ' ' + innerEnd.y + ' A ' + innerRadius +
	                ' ' + innerRadius + ' 0 ' + clockWise + ',0 ' + innerStart.x + ' ' + innerStart.y + ' Z';
	        };
	        PieBase.prototype.getTooltipPoint = function (e, accumulation, x, y) {
	            var target = e.target;
	            target = accumulation.isTouch ? document.elementFromPoint(x, y) : target;
	            var id = target.id.split(accumulation.element.id + '_Series_');
	            if (id[1]) {
	                var seriesIndex = parseInt(id[1].split('_Point_')[0], 10);
	                var pointIndex = parseInt(id[1].split('_Point_')[1], 10);
	                if (!ej2_base_1.isNullOrUndefined(seriesIndex) && !isNaN(seriesIndex) && !ej2_base_1.isNullOrUndefined(pointIndex) && !isNaN(pointIndex)) {
	                    var series = this.getSeriesFromIndex(seriesIndex, accumulation.visibleSeries);
	                    if (series.enableTooltip) {
	                        accumulation.accumulationTooltipModule.renderTooltip(series.points[pointIndex], series.index);
	                    }
	                }
	            }
	            else if (accumulation.accumulationTooltipModule && accumulation.accumulationTooltipModule.tooltip && !this.isDataLabel(target)) {
	                accumulation.accumulationTooltipModule.tooltip.close();
	            }
	        };
	        PieBase.prototype.isDataLabel = function (target) {
	            if (target.id.indexOf(this.accumulation.element.id + '_datalabel_Series_') > -1) {
	                return true;
	            }
	            return false;
	        };
	        PieBase.prototype.getSeriesFromIndex = function (index, visibleSeries) {
	            return visibleSeries[0];
	        };
	        PieBase.prototype.processExplode = function (event) {
	            if (event.target.id.indexOf('_Series_') > -1 || event.target.id.indexOf('_datalabel_') > -1) {
	                var pointIndex = acc_base_1.indexFinder(event.target.id).point;
	                if (isNaN(pointIndex)) {
	                    return null;
	                }
	                this.explodePoints(pointIndex);
	                this.deExplodeAll(pointIndex);
	            }
	        };
	        PieBase.prototype.invokeExplode = function () {
	            if (this.accumulation.visibleSeries[0].explodeAll) {
	                for (var _i = 0, _a = this.accumulation.visibleSeries[0].points; _i < _a.length; _i++) {
	                    var point = _a[_i];
	                    this.explodePoints(point.index);
	                }
	            }
	            else if (!ej2_base_1.isNullOrUndefined(this.accumulation.visibleSeries[0].explodeIndex)) {
	                this.explodePoints(this.accumulation.visibleSeries[0].explodeIndex);
	            }
	            if (this.accumulation.accumulationSelectionModule && this.accumulation.selectionMode !== 'None' &&
	                this.accumulation.accumulationSelectionModule.selectedDataIndexes.length) {
	                for (var _b = 0, _c = this.accumulation.accumulationSelectionModule.selectedDataIndexes; _b < _c.length; _b++) {
	                    var index = _c[_b];
	                    this.explodePoints(index.point, true);
	                    this.deExplodeAll(index.point);
	                }
	            }
	        };
	        PieBase.prototype.deExplodeAll = function (index) {
	            var pointId = this.accumulation.element.id + '_Series_0_Point_';
	            var points = this.accumulation.visibleSeries[0].points;
	            for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {
	                var currentPoint = points_1[_i];
	                if (index !== currentPoint.index) {
	                    this.deExplodeSlice(currentPoint.index, pointId, this.center);
	                }
	            }
	        };
	        PieBase.prototype.explodePoints = function (index, explode) {
	            if (explode === void 0) { explode = false; }
	            var pointId = this.accumulation.element.id + '_Series_0_Point_';
	            var translate;
	            var points = this.accumulation.visibleSeries[0].points;
	            var point = acc_base_1.pointByIndex(index, this.accumulation.visibleSeries[0].points);
	            if (ej2_base_1.isNullOrUndefined(point)) {
	                return null;
	            }
	            translate = helper_1.degreeToLocation(point.midAngle, this.accumulation.explodeDistance, this.center);
	            if (this.isExplode(pointId + index) || explode) {
	                this.explodeSlice(index, translate, pointId, this.center);
	            }
	            else {
	                this.deExplodeSlice(index, pointId, this.center);
	            }
	        };
	        PieBase.prototype.isExplode = function (id) {
	            var element = helper_1.getElement(id);
	            if (element && (element.getAttribute('transform') === 'translate(0, 0)' || element.getAttribute('transform') === null ||
	                element.getAttribute('transform') === 'translate(0)')) {
	                return true;
	            }
	            else {
	                return false;
	            }
	        };
	        PieBase.prototype.deExplodeSlice = function (index, sliceId, center) {
	            var position = 'translate(0, 0)';
	            this.setTranslate(index, sliceId, position);
	        };
	        PieBase.prototype.setTranslate = function (index, sliceId, position) {
	            this.setElementTransform(sliceId + index, position);
	            if (this.accumulation.visibleSeries[0].dataLabel.visible) {
	                sliceId = this.accumulation.element.id + '_datalabel_Series_0_';
	                this.setElementTransform(sliceId + 'shape_' + index, position);
	                this.setElementTransform(sliceId + 'text_' + index, position);
	                this.setElementTransform(sliceId + 'connector_' + index, position);
	            }
	        };
	        PieBase.prototype.setElementTransform = function (id, position) {
	            var element = helper_1.getElement(id);
	            if (element) {
	                element.setAttribute('transform', position);
	            }
	        };
	        PieBase.prototype.explodeSlice = function (index, translate, sliceId, center) {
	            var position = 'translate(' + (translate.x - center.x) + ', ' + (translate.y - center.y) + ')';
	            this.setTranslate(index, sliceId, position);
	        };
	        PieBase.prototype.doAnimation = function (slice, series) {
	            var _this = this;
	            var startAngle = series.startAngle - 90;
	            var value;
	            var radius = Math.max(this.accumulation.availableSize.height, this.accumulation.availableSize.width) * 0.75;
	            radius += radius * (0.414);
	            var effect = helper_1.getAnimationFunction('Linear');
	            new ej2_base_2.Animation({}).animate(slice, {
	                duration: series.animation.duration,
	                delay: series.animation.delay,
	                progress: function (args) {
	                    value = effect(args.timeStamp, startAngle, _this.totalAngle, args.duration);
	                    slice.setAttribute('d', _this.getPathArc(_this.center, startAngle, value, radius, 0));
	                },
	                end: function (args) {
	                    slice.setAttribute('d', _this.getPathArc(_this.center, 0, 359.99999, radius, 0));
	                    _this.accumulation.trigger(constants_1.animationComplete, { series: series, accumulation: _this.accumulation });
	                    var datalabelGroup = helper_1.getElement(_this.accumulation.element.id + '_datalabel_Series_' + series.index);
	                    datalabelGroup.style.visibility = 'visible';
	                }
	            });
	        };
	        return PieBase;
	    }());
	    exports.PieBase = PieBase;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(3), __webpack_require__(3), __webpack_require__(3), __webpack_require__(48), __webpack_require__(12), __webpack_require__(51), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, helper_1, helper_2, helper_3, acc_base_1, constants_1, pie_base_1, helper_4) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var AccumulationDataLabel = (function (_super) {
	        __extends(AccumulationDataLabel, _super);
	        function AccumulationDataLabel(accumulation) {
	            var _this = _super.call(this) || this;
	            _this.accumulation = accumulation;
	            _this.id = accumulation.element.id + '_datalabel_Series_';
	            if (accumulation.title) {
	                var titleSize = helper_2.measureText(accumulation.title, accumulation.titleStyle);
	                _this.titleRect = new helper_1.Rect(accumulation.availableSize.width / 2 - titleSize.width / 2, accumulation.margin.top, titleSize.width, titleSize.height);
	            }
	            return _this;
	        }
	        AccumulationDataLabel.prototype.getDataLabelPosition = function (point, midAngle, dataLabel, textSize, points, parent, id) {
	            this.getLabelbound(point, midAngle, dataLabel.position, textSize, this.labelRadius, this.marginValue);
	            point.labelAngle = midAngle;
	            point.labelPosition = dataLabel.position;
	            if (this.accumulation.enableSmartLabels) {
	                this.getSmartLabel(point, midAngle, dataLabel, textSize, points, parent, id);
	            }
	        };
	        AccumulationDataLabel.prototype.getLabelbound = function (point, midAngle, position, textSize, labelRadius, margin, endAngle) {
	            if (endAngle === void 0) { endAngle = 0; }
	            var labelAngle = endAngle || midAngle;
	            var space = 10;
	            var location = helper_1.degreeToLocation(labelAngle, labelRadius, this.center);
	            location.y = (position === 'Inside') ? (location.y - textSize.height / 2) : location.y;
	            location.x = (position === 'Inside') ? (location.x - textSize.width / 2) : location.x;
	            point.labelRegion = new helper_1.Rect(location.x, location.y, textSize.width + (margin * 2), textSize.height + (margin * 2));
	            if (position === 'Outside') {
	                point.labelRegion.y -= point.labelRegion.height / 2;
	                if (labelAngle >= 90 && labelAngle <= 270) {
	                    point.labelRegion.x -= (point.labelRegion.width + space);
	                }
	                else {
	                    point.labelRegion.x += space;
	                }
	            }
	        };
	        AccumulationDataLabel.prototype.getSmartLabel = function (point, midAngle, dataLabel, textSize, points, parent, id) {
	            var labelRadius = this.radius + helper_1.stringToNumber(dataLabel.connectorStyle.length, this.radius);
	            var previousPoint = this.findPreviousPoint(points, point.index, point.labelPosition);
	            if (dataLabel.position === 'Inside') {
	                if (previousPoint && previousPoint.labelRegion && (helper_1.isOverlap(point.labelRegion, previousPoint.labelRegion)
	                    || this.isOverlapping(point, points))) {
	                    point.labelPosition = 'Outside';
	                    this.getLabelbound(point, midAngle, point.labelPosition, textSize, labelRadius, this.marginValue);
	                    previousPoint = this.findPreviousPoint(points, point.index, point.labelPosition);
	                    if (previousPoint && (helper_1.isOverlap(point.labelRegion, previousPoint.labelRegion) ||
	                        this.isConnectorLineOverlapping(point, previousPoint))) {
	                        this.setOuterSmartLabel(previousPoint, point, midAngle, dataLabel.border.width, labelRadius, textSize, this.marginValue);
	                    }
	                }
	            }
	            else {
	                if (previousPoint && previousPoint.labelRegion && (helper_1.isOverlap(point.labelRegion, previousPoint.labelRegion)
	                    || this.isOverlapping(point, points) || this.isConnectorLineOverlapping(point, previousPoint))) {
	                    this.setOuterSmartLabel(previousPoint, point, midAngle, dataLabel.border.width, labelRadius, textSize, this.marginValue);
	                }
	            }
	            if (this.isOverlapping(point, points) || (this.titleRect && point.labelRegion && helper_1.isOverlap(point.labelRegion, this.titleRect))) {
	                this.setPointVisibileFalse(point);
	            }
	            if (this.accumulation.accumulationLegendModule && point.labelVisible && point.labelRegion) {
	                this.textTrimming(point, this.accumulation.accumulationLegendModule.legendBounds, dataLabel.font, this.accumulation.accumulationLegendModule.position);
	            }
	            if (point.labelVisible && point.labelRegion) {
	                var position = (point.labelRegion.x >= this.center.x) ? 'InsideRight' : 'InsideLeft';
	                this.textTrimming(point, this.areaRect, dataLabel.font, position);
	            }
	            if (point.labelVisible && point.labelRegion && ((point.labelRegion.y + point.labelRegion.height >
	                this.areaRect.y + this.areaRect.height || point.labelRegion.y < this.areaRect.y) || (point.labelRegion.x < this.areaRect.x ||
	                point.labelRegion.x + point.labelRegion.width > this.areaRect.x + this.areaRect.width))) {
	                this.setPointVisibileFalse(point);
	            }
	        };
	        AccumulationDataLabel.prototype.move = function (e, x, y, isTouch) {
	            var _this = this;
	            if (e.target.textContent.indexOf('...') > -1) {
	                var targetId = e.target.id.split(this.id);
	                if (targetId.length === 2) {
	                    var seriesIndex = parseInt(targetId[1].split('_text_')[0], 10);
	                    var pointIndex = parseInt(targetId[1].split('_text_')[1], 10);
	                    if (!isNaN(seriesIndex) && !isNaN(pointIndex)) {
	                        if (isTouch) {
	                            helper_2.removeElement(this.accumulation.element.id + '_EJ2_Datalabel_Tooltip');
	                        }
	                        var point = acc_base_1.getSeriesFromIndex(seriesIndex, (this.accumulation).visibleSeries).points[pointIndex];
	                        helper_3.showTooltip(point.text || point.y.toString(), x, y, this.areaRect.width, this.accumulation.element.id + '_EJ2_Datalabel_Tooltip');
	                    }
	                }
	            }
	            else {
	                helper_2.removeElement(this.accumulation.element.id + '_EJ2_Datalabel_Tooltip');
	            }
	            if (isTouch) {
	                clearTimeout(this.clearTooltip);
	                this.clearTooltip = setTimeout(function () { helper_2.removeElement(_this.accumulation.element.id + '_EJ2_Datalabel_Tooltip'); }, 1000);
	            }
	        };
	        AccumulationDataLabel.prototype.findPreviousPoint = function (points, index, position) {
	            var point = points[0];
	            for (var i = index - 1; i >= 0; i--) {
	                point = points[i];
	                if (point.visible && point.labelVisible && point.labelRegion && point.labelPosition === position) {
	                    return point;
	                }
	            }
	            return null;
	        };
	        AccumulationDataLabel.prototype.isOverlapping = function (currentPoint, points) {
	            for (var i = currentPoint.index - 1; i >= 0; i--) {
	                if (points[i].visible && points[i].labelVisible && points[i].labelRegion && currentPoint.labelRegion &&
	                    currentPoint.labelVisible && helper_1.isOverlap(currentPoint.labelRegion, points[i].labelRegion)) {
	                    return true;
	                }
	            }
	            return false;
	        };
	        AccumulationDataLabel.prototype.textTrimming = function (point, rect, font, position) {
	            if (helper_1.isOverlap(point.labelRegion, rect)) {
	                var size = point.labelRegion.width;
	                if (position === 'Right') {
	                    size = rect.x - point.labelRegion.x;
	                }
	                else if (position === 'Left') {
	                    size = point.labelRegion.x - (rect.x + rect.width);
	                }
	                else if (position === 'InsideRight') {
	                    size = (rect.x + rect.width) - point.labelRegion.x;
	                }
	                else if (position === 'InsideLeft') {
	                    size = (point.labelRegion.x + point.labelRegion.width) - rect.x;
	                    if (size < point.labelRegion.width) {
	                        point.labelRegion.x = rect.x;
	                    }
	                }
	                else {
	                    this.setPointVisibileFalse(point);
	                }
	                if (point.labelVisible && point.labelRegion) {
	                    if (size < point.labelRegion.width) {
	                        point.label = helper_2.textTrim(size - (this.marginValue * 2), point.label, font);
	                        point.labelRegion.width = size;
	                    }
	                    if (point.label.length === 3 && point.label.indexOf('...') > -1) {
	                        this.setPointVisibileFalse(point);
	                    }
	                }
	            }
	        };
	        AccumulationDataLabel.prototype.setPointVisibileFalse = function (point) {
	            point.labelVisible = false;
	            point.labelRegion = null;
	        };
	        AccumulationDataLabel.prototype.setOuterSmartLabel = function (previousPoint, point, midAngle, border, labelRadius, textsize, margin) {
	            var labelAngle = this.getOverlappedAngle(previousPoint.labelRegion, point.labelRegion, midAngle, border * 2);
	            this.getLabelbound(point, midAngle, 'Outside', textsize, labelRadius, margin, labelAngle);
	            if (labelAngle > point.endAngle) {
	                this.setPointVisibileFalse(point);
	            }
	            point.labelAngle = labelAngle;
	            while (point.labelVisible && (helper_1.isOverlap(previousPoint.labelRegion, point.labelRegion) || labelAngle <= previousPoint.labelAngle
	                || this.isConnectorLineOverlapping(point, previousPoint))) {
	                if (labelAngle > point.endAngle) {
	                    this.setPointVisibileFalse(point);
	                    break;
	                }
	                point.labelAngle = labelAngle;
	                this.getLabelbound(point, midAngle, 'Outside', textsize, labelRadius, margin, labelAngle);
	                labelAngle += 0.1;
	            }
	        };
	        AccumulationDataLabel.prototype.isConnectorLineOverlapping = function (point, previous) {
	            var start = helper_1.degreeToLocation(point.midAngle, this.radius, this.center);
	            var end = new helper_1.ChartLocation(0, 0);
	            this.getEdgeOfLabel(point.labelRegion, point.labelAngle, end);
	            var previousstart = helper_1.degreeToLocation(previous.midAngle, this.radius, this.center);
	            var previousend = new helper_1.ChartLocation(0, 0);
	            this.getEdgeOfLabel(previous.labelRegion, previous.labelAngle, previousend);
	            return this.isLineRectangleIntersect(start, end, point.labelRegion) ||
	                this.isLineRectangleIntersect(start, end, previous.labelRegion) ||
	                this.isLineRectangleIntersect(previousstart, previousend, point.labelRegion);
	        };
	        AccumulationDataLabel.prototype.isLineRectangleIntersect = function (line1, line2, rect) {
	            var rectPoints = [
	                new helper_1.ChartLocation(Math.round(rect.x), Math.round(rect.y)),
	                new helper_1.ChartLocation(Math.round((rect.x + rect.width)), Math.round(rect.y)),
	                new helper_1.ChartLocation(Math.round((rect.x + rect.width)), Math.round((rect.y + rect.height))),
	                new helper_1.ChartLocation(Math.round(rect.x), Math.round((rect.y + rect.height)))
	            ];
	            line1.x = Math.round(line1.x);
	            line1.y = Math.round(line1.y);
	            line2.x = Math.round(line2.x);
	            line2.y = Math.round(line2.y);
	            for (var i = 0; i < rectPoints.length; i++) {
	                if (this.isLinesIntersect(line1, line2, rectPoints[i], rectPoints[(i + 1) % rectPoints.length])) {
	                    return true;
	                }
	            }
	            return false;
	        };
	        AccumulationDataLabel.prototype.isLinesIntersect = function (point1, point2, point11, point12) {
	            var a1 = point2.y - point1.y;
	            var b1 = point1.x - point2.x;
	            var c1 = a1 * point1.x + b1 * point1.y;
	            var a2 = point12.y - point11.y;
	            var b2 = point11.x - point12.x;
	            var c2 = a2 * point11.x + b2 * point11.y;
	            var delta = a1 * b2 - a2 * b1;
	            if (delta !== 0) {
	                var x = (b2 * c1 - b1 * c2) / delta;
	                var y = (a1 * c2 - a2 * c1) / delta;
	                var lies = Math.min(point1.x, point2.x) <= x && x <= Math.max(point1.x, point2.x);
	                lies = lies && Math.min(point1.y, point2.y) <= y && y <= Math.max(point1.y, point2.y);
	                lies = lies && Math.min(point11.x, point12.x) <= x && x <= Math.max(point11.x, point12.x);
	                lies = lies && Math.min(point11.y, point12.y) <= y && y <= Math.max(point11.y, point12.y);
	                return lies;
	            }
	            return false;
	        };
	        AccumulationDataLabel.prototype.getOverlappedAngle = function (first, second, angle, padding) {
	            var x = first.x;
	            if (angle >= 90 && angle <= 270) {
	                second.y = first.y - (padding + second.height / 2);
	                x = first.x + first.width;
	            }
	            else {
	                second.y = first.y + first.height + padding;
	            }
	            return helper_1.getAngle(this.center, new helper_1.ChartLocation(x, second.y));
	        };
	        AccumulationDataLabel.prototype.getConnectorPath = function (label, midAngle, connector, labelRadius, end) {
	            if (labelRadius === void 0) { labelRadius = null; }
	            if (end === void 0) { end = 0; }
	            var start = helper_1.degreeToLocation(midAngle, this.radius - connector.width, this.center);
	            var labelAngle = end || midAngle;
	            labelRadius = labelRadius || this.labelRadius;
	            var middle = new helper_1.ChartLocation(0, 0);
	            var endPoint = this.getEdgeOfLabel(label, labelAngle, middle, connector.width);
	            if (connector.type === 'Curve') {
	                var r = labelRadius - this.radius;
	                middle = helper_1.degreeToLocation(labelAngle, labelRadius - (r / 2), this.center);
	                return 'M ' + start.x + ' ' + start.y + ' Q' + middle.x + ',' + middle.y + ' ' + endPoint.x + ',' + endPoint.y;
	            }
	            else {
	                return 'M ' + start.x + ' ' + start.y + ' L ' + middle.x + ' ' + middle.y + ' L ' + endPoint.x + ' ' + endPoint.y;
	            }
	        };
	        AccumulationDataLabel.prototype.getEdgeOfLabel = function (labelshape, angle, middle, border) {
	            if (border === void 0) { border = 1; }
	            var edge = new helper_1.ChartLocation(labelshape.x, labelshape.y);
	            if (angle >= 90 && angle <= 270) {
	                edge.x += labelshape.width + border / 2;
	                edge.y += labelshape.height / 2;
	                middle.x = edge.x + 10;
	                middle.y = edge.y;
	            }
	            else {
	                edge.x -= border / 2;
	                edge.y += labelshape.height / 2;
	                middle.x = edge.x - 10;
	                middle.y = edge.y;
	            }
	            return edge;
	        };
	        AccumulationDataLabel.prototype.findAreaRect = function () {
	            this.areaRect = new helper_1.Rect(0, 0, this.accumulation.availableSize.width, this.accumulation.availableSize.height);
	            var margin = this.accumulation.margin;
	            helper_2.subtractThickness(this.areaRect, new helper_2.Thickness(margin.left, margin.right, margin.top, margin.bottom));
	        };
	        AccumulationDataLabel.prototype.renderDataLabel = function (point, dataLabel, parent, points, series, templateElement) {
	            var id = this.accumulation.element.id + '_datalabel_Series_' + series + '_';
	            var datalabelGroup = this.accumulation.renderer.createGroup({ id: id + 'g_' + point.index });
	            point.label = point.text || point.y.toString();
	            var argsData = {
	                cancel: false, name: constants_1.textRender, series: this.accumulation.visibleSeries[0], point: point,
	                text: point.label, border: dataLabel.border, color: dataLabel.fill, template: dataLabel.template
	            };
	            this.accumulation.trigger(constants_1.textRender, argsData);
	            var isTemplate = argsData.template !== null;
	            point.labelVisible = !argsData.cancel;
	            point.text = point.label = argsData.text;
	            this.marginValue = argsData.border.width ? (5 + argsData.border.width) : 1;
	            var childElement = ej2_base_1.createElement('div', {
	                id: this.accumulation.element.id + '_Series_' + 0 + '_DataLabel_' + point.index,
	                styles: 'position: absolute;background-color:' + argsData.color + ';' +
	                    helper_4.getFontStyle(dataLabel.font) + ';border:' + argsData.border.width + 'px solid ' + argsData.border.color + ';'
	            });
	            var textSize = isTemplate ? this.getTemplateSize(childElement, point, argsData) :
	                helper_2.measureText(point.label, dataLabel.font);
	            textSize.height += 4;
	            textSize.width += 4;
	            this.getDataLabelPosition(point, point.midAngle, dataLabel, textSize, points, datalabelGroup, id);
	            if (point.labelVisible) {
	                this.correctLabelRegion(point.labelRegion, textSize);
	                if (isTemplate) {
	                    this.setTemplateStyle(childElement, point, templateElement, dataLabel.font.color, argsData.color);
	                }
	                else {
	                    datalabelGroup.appendChild(this.accumulation.renderer.drawRectangle(new helper_2.RectOption(id + 'shape_' + point.index, argsData.color, argsData.border, 1, point.labelRegion, dataLabel.rx, dataLabel.ry)));
	                    helper_2.textElement(new helper_1.TextOption(id + 'text_' + point.index, point.labelRegion.x + this.marginValue, point.labelRegion.y + (textSize.height * 3 / 4) + this.marginValue, 'start', point.label, '', 'auto'), dataLabel.font, dataLabel.font.color || this.getSaturatedColor(point, argsData.color), datalabelGroup);
	                }
	                if (this.accumulation.accumulationLegendModule && (dataLabel.position === 'Outside' || this.accumulation.enableSmartLabels)) {
	                    this.accumulation.visibleSeries[0].findMaxBounds(this.accumulation.visibleSeries[0].labelBound, point.labelRegion);
	                }
	                if (point.labelPosition === 'Outside') {
	                    var path = this.getConnectorPath(ej2_base_1.extend({}, point.labelRegion, null, true), point.midAngle, dataLabel.connectorStyle, null, point.labelAngle);
	                    var pathElement = this.accumulation.renderer.drawPath(new helper_3.PathOption(id + 'connector_' + point.index, 'transparent', dataLabel.connectorStyle.width, dataLabel.connectorStyle.color || point.color, 1, '', path));
	                    datalabelGroup.appendChild(pathElement);
	                }
	                parent.appendChild(datalabelGroup);
	            }
	        };
	        AccumulationDataLabel.prototype.getTemplateSize = function (element, point, argsData) {
	            var clientRect;
	            element = helper_4.createTemplate(element, point.index, argsData.template, this.accumulation, point, this.accumulation.visibleSeries[0]);
	            clientRect = helper_4.measureElementRect(element);
	            return { width: clientRect.width, height: clientRect.height };
	        };
	        AccumulationDataLabel.prototype.setTemplateStyle = function (childElement, point, parent, labelColor, fill) {
	            childElement.style.left = (point.labelRegion.x) + 'px';
	            childElement.style.top = (point.labelRegion.y) + 'px';
	            childElement.style.color = labelColor ||
	                this.getSaturatedColor(point, fill);
	            if (childElement.childElementCount) {
	                parent.appendChild(childElement);
	                this.doTemplateAnimation(this.accumulation, childElement);
	            }
	        };
	        AccumulationDataLabel.prototype.doTemplateAnimation = function (accumulation, element) {
	            var series = accumulation.visibleSeries[0];
	            var delay = series.animation.delay + series.animation.duration;
	            if (series.animation.enable && accumulation.animateSeries) {
	                helper_4.templateAnimate(element, delay, 200);
	            }
	        };
	        AccumulationDataLabel.prototype.getSaturatedColor = function (point, color) {
	            var saturatedColor;
	            if (this.marginValue > 1) {
	                saturatedColor = color === 'transparent' ? this.getLabelBackground(point) : color;
	            }
	            else {
	                saturatedColor = this.getLabelBackground(point);
	            }
	            saturatedColor = (saturatedColor === 'transparent') ? window.getComputedStyle(document.body, null).backgroundColor : saturatedColor;
	            var rgbValue = helper_3.convertHexToColor(helper_3.colorNameToHex(saturatedColor));
	            var contrast = Math.round((rgbValue.r * 299 + rgbValue.g * 587 + rgbValue.b * 114) / 1000);
	            return contrast >= 128 ? 'black' : 'white';
	        };
	        AccumulationDataLabel.prototype.getLabelBackground = function (point) {
	            return point.labelPosition === 'Outside' ? this.accumulation.background : point.color;
	        };
	        AccumulationDataLabel.prototype.correctLabelRegion = function (labelRegion, textSize, padding) {
	            if (padding === void 0) { padding = 4; }
	            labelRegion.height -= padding;
	            labelRegion.width -= padding;
	            labelRegion.x += padding / 2;
	            labelRegion.y += padding / 2;
	            textSize.height -= padding;
	            textSize.width -= padding;
	        };
	        AccumulationDataLabel.prototype.getModuleName = function () {
	            return 'AccumulationDataLabel';
	        };
	        AccumulationDataLabel.prototype.destroy = function (accumulation) {
	        };
	        return AccumulationDataLabel;
	    }(pie_base_1.PieBase));
	    exports.AccumulationDataLabel = AccumulationDataLabel;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(4), __webpack_require__(4), __webpack_require__(54), __webpack_require__(48), __webpack_require__(3), __webpack_require__(12)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, ej2_popups_1, acc_base_1, helper_1, constants_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var AccumulationTooltip = (function () {
	        function AccumulationTooltip(accumulation) {
	            this.accumulation = accumulation;
	            this.tooltipOption = accumulation.tooltip;
	            this.targetId = accumulation.element.id + '_pie_tooltip';
	            var targetElement = ej2_base_2.createElement('div', {
	                id: this.targetId,
	                styles: 'position: absolute;background: transparent;height: 2px;width: 2px;'
	            });
	            accumulation.element.appendChild(targetElement);
	            this.tooltip = new ej2_popups_1.Tooltip({
	                opensOn: 'custom',
	                beforeOpen: this.tooltipCustomization.bind(this),
	                openDelay: 0,
	                closeDelay: 1000
	            });
	            this.tooltip.appendTo(accumulation.element);
	        }
	        AccumulationTooltip.prototype.setTemplateFunction = function (template) {
	            var e;
	            try {
	                if (document.querySelectorAll(template).length) {
	                    this.templateFn = ej2_base_1.compile(document.querySelector(template).innerHTML.trim());
	                }
	            }
	            catch (e) {
	                this.templateFn = ej2_base_1.compile(template);
	            }
	        };
	        AccumulationTooltip.prototype.renderTooltip = function (point, seriesIndex) {
	            var element = helper_1.getElement(this.targetId);
	            if (element && (element.getAttribute('data-tooltip-id') === null) ||
	                this.tooltipIndex !== 'series_' + seriesIndex + '_point_' + point.index) {
	                this.updatePosition(this.targetId, point.symbolLocation.x, point.symbolLocation.y, this.accumulation.element.id + '_Series_0_Point_' + point.index);
	                this.setTemplateFunction(this.tooltipOption.template);
	                this.currentPoint = point;
	                this.tooltip.content = this.getTooltipContent(point, seriesIndex);
	                this.tooltip.open(helper_1.getElement(this.targetId));
	                this.tooltipIndex = 'series_' + seriesIndex + '_point_' + point.index;
	            }
	        };
	        AccumulationTooltip.prototype.fadeOutTooltip = function () {
	            clearTimeout(this.clearTooltip);
	            this.removeTooltip = this.removeTooltip.bind(this);
	            this.clearTooltip = setTimeout(this.removeTooltip, 500);
	        };
	        AccumulationTooltip.prototype.removeTooltip = function () {
	            if (this.tooltip) {
	                this.tooltip.close();
	            }
	        };
	        AccumulationTooltip.prototype.getTooltipContent = function (point, seriesIndex) {
	            if (this.tooltipOption.template && this.templateFn) {
	                var templates = this.templateFn(point);
	                var element = ej2_base_2.createElement('div');
	                while (templates.length > 0) {
	                    element.appendChild(templates[0]);
	                }
	                return element;
	            }
	            else {
	                return this.getTooltipText(point, this.tooltipOption, seriesIndex);
	            }
	        };
	        AccumulationTooltip.prototype.tooltipCustomization = function (args) {
	            var argsData = {
	                cancel: false, name: constants_1.tooltipRender,
	                content: this.tooltip.content,
	                textStyle: this.tooltipOption.textStyle,
	                series: this.accumulation.visibleSeries[0],
	                point: this.currentPoint
	            };
	            this.accumulation.trigger(constants_1.tooltipRender, argsData);
	            args.cancel = argsData.cancel;
	            this.tooltip.content = argsData.content;
	            this.tooltipOption.textStyle = argsData.textStyle;
	            var content = document.getElementsByClassName('e-tooltip-wrap')[0];
	            var font = this.tooltipOption.textStyle;
	            var position = this.tooltip.position.split(' ');
	            var borderColor = this.tooltipOption.border.color || this.currentPoint.color;
	            var pointerSize = 8;
	            var outerWidth;
	            var innerWidth;
	            args.element.classList.remove('e-popup-close');
	            args.element.classList.add('e-popup-open');
	            var arrowEle = args.element.querySelector('.e-arrow-tip');
	            var borderWidth = this.tooltipOption.border.width;
	            ej2_base_2.setStyleAttribute(args.element, {
	                'backgroundColor': this.tooltipOption.fill, 'borderColor': borderColor,
	                'borderWidth': borderWidth, 'borderRadius': '5px', 'pointer-events': 'none'
	            });
	            ej2_base_2.setStyleAttribute(args.element.querySelector('.e-tip-content'), {
	                'color': font.color || '#000000', 'fontFamily': font.fontFamily, 'fontSize': font.size,
	                'fontWeight': font.fontWeight, 'opacity': font.opacity.toString(), 'fontStyle': font.fontStyle
	            });
	            pointerSize = args.element.querySelector('.e-arrow-tip').offsetHeight;
	            outerWidth = pointerSize + 'px';
	            ej2_base_2.setStyleAttribute(args.element.querySelector('.e-arrow-tip-outer'), {
	                'borderRightColor': 'transparent', 'borderLeftColor': 'transparent', 'borderBottomColor': borderColor,
	                'borderLeftWidth': outerWidth, 'borderRightWidth': outerWidth, 'borderBottomWidth': outerWidth,
	                'borderTopColor': borderColor,
	            });
	            innerWidth = (pointerSize - borderWidth) + 'px';
	            ej2_base_2.setStyleAttribute(args.element.querySelector('.e-arrow-tip-inner'), {
	                'borderRightColor': 'transparent', 'borderLeftColor': 'transparent', 'borderBottomColor': borderColor,
	                'borderLeftWidth': innerWidth, 'borderRightWidth': innerWidth, 'borderBottomWidth': innerWidth,
	                'left': borderWidth, 'top': 0, 'borderTopColor': this.tooltipOption.fill
	            });
	            ej2_base_2.setStyleAttribute(args.element, {
	                'display': 'block', 'transitionProperty': 'left,top',
	                'transitionDuration': this.tooltipOption.enableAnimation ? '500ms' : '0ms'
	            });
	            this.tooltip.dataBind();
	        };
	        AccumulationTooltip.prototype.updatePosition = function (id, x, y, pointId) {
	            var pointElement = helper_1.getElement(pointId);
	            var translate = pointElement.getAttribute('transform');
	            if (!ej2_base_3.isNullOrUndefined(translate) && translate !== '') {
	                translate = translate.replace('translate(', '');
	                translate = translate.replace(')', '');
	                var tx = parseInt(translate.split(',')[0], 10);
	                var ty = parseInt(translate.split(',')[1], 10);
	                x = !isNaN(tx) ? tx + x : x;
	                y = !isNaN(ty) ? ty + y : y;
	            }
	            var tooltip = helper_1.getElement(id);
	            if (tooltip) {
	                tooltip.style.top = y + 'px';
	                tooltip.style.left = x + 'px';
	            }
	            else {
	                tooltip = ej2_base_2.createElement('div', {
	                    id: id,
	                    styles: 'position:absolute;left:' + x + 'px;top:' + y +
	                        'px;width:2px;height:2px;background:transparent'
	                });
	                helper_1.getElement(this.accumulation.element.id + '_Secondary_Element').appendChild(tooltip);
	            }
	        };
	        AccumulationTooltip.prototype.getTooltipText = function (point, tooltip, seriesIndex) {
	            var format = tooltip.format ? tooltip.format : '${point.x} : ${point.y}';
	            var series = acc_base_1.getSeriesFromIndex(seriesIndex, this.accumulation.visibleSeries);
	            return this.parseTemplate(point, format, series);
	        };
	        AccumulationTooltip.prototype.parseTemplate = function (point, format, series) {
	            var value;
	            var textValue;
	            for (var _i = 0, _a = Object.keys(point); _i < _a.length; _i++) {
	                var dataValue = _a[_i];
	                value = new RegExp('${point' + '.' + dataValue + '}', 'gm');
	                format = format.replace(value.source, point[dataValue]);
	            }
	            for (var _b = 0, _c = Object.keys(Object.getPrototypeOf(series)); _b < _c.length; _b++) {
	                var dataValue = _c[_b];
	                value = new RegExp('${series' + '.' + dataValue + '}', 'gm');
	                textValue = series[dataValue];
	                format = format.replace(value.source, textValue);
	            }
	            return format;
	        };
	        AccumulationTooltip.prototype.getModuleName = function () {
	            return 'AccumulationTooltip';
	        };
	        AccumulationTooltip.prototype.destroy = function (chart) {
	        };
	        return AccumulationTooltip;
	    }());
	    exports.AccumulationTooltip = AccumulationTooltip;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 54 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_54__;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(4), __webpack_require__(48), __webpack_require__(7), __webpack_require__(41)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ej2_base_1, acc_base_1, base_1, selection_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var AccumulationSelection = (function (_super) {
	        __extends(AccumulationSelection, _super);
	        function AccumulationSelection(accumulation) {
	            var _this = _super.call(this, accumulation) || this;
	            _this.renderer = accumulation.renderer;
	            return _this;
	        }
	        AccumulationSelection.prototype.initPrivateVariables = function (accumulation) {
	            this.styleId = accumulation.element.id + '_ej2_chart_selection';
	            this.unselected = accumulation.element.id + '_ej2_deselected';
	            this.selectedDataIndexes = [];
	            this.rectPoints = null;
	        };
	        AccumulationSelection.prototype.invokeSelection = function (accumulation) {
	            this.initPrivateVariables(accumulation);
	            this.series = ej2_base_1.extend({}, accumulation.visibleSeries, null, true);
	            this.seriesStyles();
	            this.selectDataIndex(this.concatIndexes(accumulation.selectedDataIndexes, this.selectedDataIndexes), accumulation);
	        };
	        AccumulationSelection.prototype.generateStyle = function (series) {
	            return (series.selectionStyle || this.styleId + '_series_' + series.index);
	        };
	        AccumulationSelection.prototype.findElements = function (accumulation, series, index) {
	            return [this.getElementByIndex(index)];
	        };
	        AccumulationSelection.prototype.getElementByIndex = function (index) {
	            var elementId = this.control.element.id + '_Series_' + index.series + '_Point_' + index.point;
	            return document.getElementById(elementId);
	        };
	        AccumulationSelection.prototype.calculateSelectedElements = function (accumulation, event) {
	            if (event.target.id.indexOf('_Series_') > -1 || event.target.id.indexOf('_datalabel_') > -1) {
	                this.performSelection(acc_base_1.indexFinder(event.target.id), accumulation, event.target);
	            }
	        };
	        AccumulationSelection.prototype.performSelection = function (index, accumulation, element) {
	            element = element.id.indexOf('datalabel') > -1 ?
	                accumulation.getSeriesElement().childNodes[index.series].childNodes[index.point]
	                : element;
	            switch (accumulation.selectionMode) {
	                case 'Point':
	                    if (!isNaN(index.point)) {
	                        this.selection(accumulation, index, [element]);
	                        this.blurEffect(accumulation.element.id, accumulation.visibleSeries);
	                    }
	                    break;
	            }
	        };
	        AccumulationSelection.prototype.selection = function (accumulation, index, selectedElements) {
	            if (!accumulation.isMultiSelect) {
	                this.removeMultiSelectEelments(accumulation, this.selectedDataIndexes, index, accumulation.series);
	            }
	            var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');
	            if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {
	                this.removeStyles(selectedElements, index);
	                this.addOrRemoveIndex(this.selectedDataIndexes, index);
	            }
	            else {
	                this.applyStyles(selectedElements, index);
	                this.addOrRemoveIndex(this.selectedDataIndexes, index, true);
	            }
	        };
	        AccumulationSelection.prototype.redrawSelection = function (accumulation, oldMode) {
	            var selectedDataIndexes = ej2_base_1.extend([], this.selectedDataIndexes, null, true);
	            this.removeSelectedElements(accumulation, this.selectedDataIndexes);
	            this.blurEffect(accumulation.element.id, accumulation.visibleSeries);
	            this.selectDataIndex(selectedDataIndexes, accumulation);
	        };
	        AccumulationSelection.prototype.removeSelectedElements = function (accumulation, indexes) {
	            var seriesgroup = accumulation.getSeriesElement();
	            for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {
	                var index = indexes_1[_i];
	                this.removeStyles([this.getElementByIndex(index)], index);
	            }
	        };
	        AccumulationSelection.prototype.legendSelection = function (accumulation, series, pointIndex) {
	            var element = accumulation.getSeriesElement().childNodes[series].childNodes[pointIndex];
	            var seriesStyle = this.generateStyle(accumulation.visibleSeries[series]);
	            var seriesElements = accumulation.getSeriesElement().childNodes[series].childNodes[pointIndex];
	            this.selection(accumulation, new base_1.Index(series, pointIndex), [seriesElements]);
	            this.blurEffect(accumulation.element.id, accumulation.visibleSeries);
	        };
	        AccumulationSelection.prototype.selectDataIndex = function (indexes, accumulation) {
	            var element;
	            for (var _i = 0, indexes_2 = indexes; _i < indexes_2.length; _i++) {
	                var index = indexes_2[_i];
	                element = this.getElementByIndex(index);
	                if (element) {
	                    this.performSelection(index, accumulation, element);
	                }
	            }
	        };
	        AccumulationSelection.prototype.removeMultiSelectEelments = function (accumulation, index, currentIndex, seriesCollection) {
	            var series;
	            for (var i = 0; i < index.length; i++) {
	                series = seriesCollection[index[i].series];
	                if (!this.checkEquals(index[i], currentIndex)) {
	                    this.removeStyles(this.findElements(accumulation, series, index[i]), index[i]);
	                    index.splice(i, 1);
	                    i--;
	                }
	            }
	        };
	        AccumulationSelection.prototype.blurEffect = function (pieId, visibleSeries) {
	            var visibility = this.checkPointVisibility(this.selectedDataIndexes);
	            for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {
	                var series = visibleSeries_1[_i];
	                if (series.visible) {
	                    this.checkSelectionElements(document.getElementById(pieId + '_SeriesCollection'), this.generateStyle(series), visibility);
	                }
	            }
	        };
	        AccumulationSelection.prototype.checkSelectionElements = function (element, className, visibility) {
	            var children = (element.childNodes[0].childNodes);
	            var legendShape;
	            var elementClass;
	            var parentClass;
	            for (var i = 0; i < children.length; i++) {
	                elementClass = children[i].getAttribute('class') || '';
	                parentClass = children[i].parentNode.getAttribute('class') || '';
	                if (elementClass.indexOf(className) === -1 && parentClass.indexOf(className) === -1 && visibility) {
	                    this.addSvgClass(children[i], this.unselected);
	                }
	                else {
	                    this.removeSvgClass(children[i], this.unselected);
	                }
	                if (this.control.legendSettings.visible) {
	                    legendShape = document.getElementById(this.control.element.id + '_chart_legend_shape_' + i);
	                    if (legendShape) {
	                        if (elementClass.indexOf(className) === -1 && parentClass.indexOf(className) === -1 && visibility) {
	                            this.addSvgClass(legendShape, this.unselected);
	                        }
	                        else {
	                            this.removeSvgClass(legendShape, this.unselected);
	                        }
	                    }
	                }
	            }
	        };
	        AccumulationSelection.prototype.applyStyles = function (elements, index) {
	            for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
	                var element = elements_1[_i];
	                var legendShape = void 0;
	                if (element) {
	                    if (this.control.legendSettings.visible) {
	                        legendShape = document.getElementById(this.control.element.id + '_chart_legend_shape_' + index.point);
	                        this.removeSvgClass(legendShape, this.unselected);
	                        this.addSvgClass(legendShape, this.getSelectionClass(legendShape.id));
	                    }
	                    this.removeSvgClass(element.parentNode, this.unselected);
	                    this.removeSvgClass(element, this.unselected);
	                    this.addSvgClass(element, this.getSelectionClass(element.id));
	                }
	            }
	        };
	        AccumulationSelection.prototype.getSelectionClass = function (id) {
	            return this.generateStyle(this.control.series[acc_base_1.indexFinder(id).series]);
	        };
	        AccumulationSelection.prototype.removeStyles = function (elements, index) {
	            var legendShape;
	            for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {
	                var element = elements_2[_i];
	                if (element) {
	                    if (this.control.legendSettings.visible) {
	                        legendShape = document.getElementById(this.control.element.id + '_chart_legend_shape_' + index.point);
	                        this.removeSvgClass(legendShape, this.getSelectionClass(legendShape.id));
	                    }
	                    this.removeSvgClass(element, this.getSelectionClass(element.id));
	                }
	            }
	        };
	        AccumulationSelection.prototype.addOrRemoveIndex = function (indexes, index, add) {
	            for (var i = 0; i < indexes.length; i++) {
	                if (this.checkEquals(indexes[i], index)) {
	                    indexes.splice(i, 1);
	                    i--;
	                }
	            }
	            if (add) {
	                indexes.push(index);
	            }
	        };
	        AccumulationSelection.prototype.checkEquals = function (first, second) {
	            return ((first.point === second.point) && (first.series === second.series));
	        };
	        AccumulationSelection.prototype.checkPointVisibility = function (selectedDataIndexes) {
	            var visible = false;
	            for (var _i = 0, selectedDataIndexes_1 = selectedDataIndexes; _i < selectedDataIndexes_1.length; _i++) {
	                var data = selectedDataIndexes_1[_i];
	                if (acc_base_1.pointByIndex(data.point, this.control.visibleSeries[0].points).visible) {
	                    visible = true;
	                    break;
	                }
	            }
	            return visible;
	        };
	        AccumulationSelection.prototype.getModuleName = function () {
	            return 'AccumulationSelection';
	        };
	        AccumulationSelection.prototype.destroy = function (accumulation) {
	        };
	        return AccumulationSelection;
	    }(selection_1.BaseSelection));
	    exports.AccumulationSelection = AccumulationSelection;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(45), __webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, annotation_1, helper_1, ej2_base_1) {
	    "use strict";
	    Object.defineProperty(exports, "__esModule", { value: true });
	    var AccumulationAnnotation = (function (_super) {
	        __extends(AccumulationAnnotation, _super);
	        function AccumulationAnnotation(control, annotations) {
	            var _this = _super.call(this, control) || this;
	            _this.pie = control;
	            _this.annotations = annotations;
	            return _this;
	        }
	        AccumulationAnnotation.prototype.renderAnnotations = function (element) {
	            var _this = this;
	            var annotationElement;
	            var location;
	            this.parentElement = ej2_base_1.createElement('div', {
	                id: this.pie.element.id + '_Annotation_Collections'
	            });
	            this.annotations.map(function (annotation, index) {
	                location = new helper_1.ChartLocation(0, 0);
	                annotationElement = _this.render(annotation, index);
	                if (_this['setAnnotation' + annotation.coordinateUnits + 'Value'](location)) {
	                    _this.setElementStyle(location, annotationElement, _this.parentElement);
	                }
	            });
	            helper_1.appendElement(this.parentElement, element);
	        };
	        AccumulationAnnotation.prototype.getModuleName = function () {
	            return 'Annotation';
	        };
	        AccumulationAnnotation.prototype.destroy = function (control) {
	        };
	        return AccumulationAnnotation;
	    }(annotation_1.AnnotationBase));
	    exports.AccumulationAnnotation = AccumulationAnnotation;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(7), __webpack_require__(12), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, base_1, constants_1, theme_1) {
	    "use strict";
	    function __export(m) {
	        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	    }
	    Object.defineProperty(exports, "__esModule", { value: true });
	    __export(base_1);
	    __export(constants_1);
	    __export(theme_1);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ })
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,